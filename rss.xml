<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>optozorax.blog</title>
        <link>https://testzorax.github.io/</link>
        <description>Мои програмульки и результаты их работы</description>
        <generator>Zola</generator>
        <language>ru</language>
        <atom:link href="https://testzorax.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 27 Aug 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Переезд на Zola и обновление блога</title>
            <pubDate>Fri, 27 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/zola/</link>
            <guid>https://testzorax.github.io/p/zola/</guid>
            <description>&lt;h1 id=&quot;raz&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#raz&quot;&gt;#&lt;&#x2F;a&gt;раз&lt;&#x2F;h1&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;501&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c279deac0e74b1eb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw8.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw8.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;502&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3a54ff060b06b16800.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw9.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw9.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;495&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;21381ea31411ecb000.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw10.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw10.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;333&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9cedcb044039cb2600.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw8.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw8.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;334&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0191f2dee0e5020c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw9.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw9.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;330&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b42c7f4ec8f7271d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw10.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;lw10.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very very long line, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;hello world&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;891&quot;
    height=&quot;412&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5edd115e3a6e71ee00.webp&quot; 
    onclick=&quot;full_screen(&#x27;preview.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;preview.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;This is the &lt;code&gt;snthh&lt;&#x2F;code&gt; preview&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;!-- disable_counting --&gt;
&lt;!-- enable_counting --&gt;
&lt;h1 id=&quot;dva&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dva&quot;&gt;#&lt;&#x2F;a&gt;два&lt;&#x2F;h1&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;Summary &lt;code&gt;ololo&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;891&quot;
    height=&quot;412&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5edd115e3a6e71ee00.webp&quot; 
    onclick=&quot;full_screen(&#x27;preview.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;preview.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;This is the &lt;code&gt;snthh&lt;&#x2F;code&gt; preview&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;✨ &lt;code&gt;blue&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue2-bg blue2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue2-bg blue2-border&quot;&gt;✨ &lt;code&gt;blue2&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue3-bg blue3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue3-bg blue3-border&quot;&gt;✨ &lt;code&gt;blue3&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;✨ &lt;code&gt;green&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;✨ &lt;code&gt;green2&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ &lt;code&gt;green3&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;✨ &lt;code&gt;orange&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;✨ &lt;code&gt;red&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;✨ &lt;code&gt;red2&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red3-bg red3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red3-bg red3-border&quot;&gt;✨ &lt;code&gt;red3&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;✨ &lt;code&gt;violet&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;✨ &lt;code&gt;gray&lt;&#x2F;code&gt; hi&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;When building the website, you can set a theme by using &lt;code&gt;--theme&lt;&#x2F;code&gt; option. However, we suggest you modify the 
configuration file (&lt;code&gt;config.toml&lt;&#x2F;code&gt;) and set the theme as the default.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;dva-dva&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dva-dva&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;два два&lt;&#x2F;h2&gt;
&lt;div class=&quot;pros&quot;&gt;
&lt;span style=&quot;color: #090&quot;&gt;&lt;big&gt;&lt;b&gt;Плюсы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;обработка картинок, возможность создавать уменьшенные картинки&lt;&#x2F;li&gt;
&lt;li&gt;возможность узнать размер картинки заранее, чтобы в галерее сделать вертикальное центрирование!!! это ваще огонь&lt;&#x2F;li&gt;
&lt;li&gt;шорткоды — вызов кастомных функций&lt;&#x2F;li&gt;
&lt;li&gt;сообщения об ошибках нормальные, только не работают в zola serve, но это обещают исправить в ближайшее время&lt;&#x2F;li&gt;
&lt;li&gt;не надо париться насчёт toc, он уже рассчитан&lt;&#x2F;li&gt;
&lt;li&gt;маленькая, и можно всю документацию от и до прочитать за один присест&lt;&#x2F;li&gt;
&lt;li&gt;можно хранить картинки в одной папке с постом (ура!!!!!)&lt;&#x2F;li&gt;
&lt;li&gt;такономии, через которые из коробки можно сделать теги без всяких костылей и сложного кода как у меня было на jekyll&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;cons&quot;&gt;
&lt;span style=&quot;color: #c00&quot;&gt;&lt;big&gt;&lt;b&gt;Минусы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;permalink возвращает адрес, который привязан к айпишнику на который раздаёшь, то есть если зайти с телефона по вайфаю, ничего не будет работать. ну бред же, какая теоретическая выгода от этого есть?&lt;&#x2F;li&gt;
&lt;li&gt;permalink неадекватно много используется, даже в toc, где он должен быть просто &lt;code&gt;#адрес&lt;&#x2F;code&gt;, там пишется полный адрес :facepalm:&lt;&#x2F;li&gt;
&lt;li&gt;шорткоды с телом не рендерят то что внутри них изначально&lt;&#x2F;li&gt;
&lt;li&gt;язык можно было бы сделать и пожёстче с нормальными option и работы с ними, а то все вот эти &lt;code&gt;if page.variable then&lt;&#x2F;code&gt; очень неприятны когда у тебя там хранится какая-то фигня. да и вообще написать что-то типо &lt;code&gt;unwrap_or&lt;&#x2F;code&gt; было бы в миллион раз проще и удобней, чем городить сотню ифов.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;dva-tri&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dva-tri&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;два три&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;--- &#x2F;path&#x2F;to&#x2F;original	timestamp
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;+++ &#x2F;path&#x2F;to&#x2F;new	timestamp
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;@@ -1,3 +1,9 @@
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+This is an important
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+notice! It should
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+therefore be located at
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+the beginning of this
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+document!
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt; This part of the
&lt;&#x2F;span&gt;&lt;span&gt; document has stayed the
&lt;&#x2F;span&gt;&lt;span&gt; same from version to
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;@@ -8,13 +14,8 @@
&lt;&#x2F;span&gt;&lt;span&gt; compress the size of the
&lt;&#x2F;span&gt;&lt;span&gt; changes.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-This paragraph contains
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-text that is outdated.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-It will be deleted in the
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-near future.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span&gt; It is important to spell
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;-check this dokument. On
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+check this document. On
&lt;&#x2F;span&gt;&lt;span&gt; the other hand, a
&lt;&#x2F;span&gt;&lt;span&gt; misspelled word isn&amp;#39;t
&lt;&#x2F;span&gt;&lt;span&gt; the end of the world.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;@@ -22,3 +23,7 @@
&lt;&#x2F;span&gt;&lt;span&gt; this paragraph needs to
&lt;&#x2F;span&gt;&lt;span&gt; be changed. Things can
&lt;&#x2F;span&gt;&lt;span&gt; be added after it.
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+This paragraph contains
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+important new additions
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+to this document.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;tri&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tri&quot;&gt;#&lt;&#x2F;a&gt;три&lt;&#x2F;h1&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;а&lt;&#x2F;th&gt;&lt;th&gt;б&lt;&#x2F;th&gt;&lt;th&gt;в&lt;&#x2F;th&gt;&lt;th&gt;г&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;й&lt;&#x2F;td&gt;&lt;td&gt;ц&lt;&#x2F;td&gt;&lt;td&gt;у&lt;&#x2F;td&gt;&lt;td&gt;к&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;17c07e2f34a2e86600.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;368.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;368.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7232c532a08e72b400.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;369.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;369.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;615cb35fba459fe700.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;370.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;370.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_3&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;4 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;87f97b2ff676c0e600.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;371.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;371.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_4&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;5 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2d3a973abffc8b2400.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;372.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;372.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_5&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;6 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;de6a0c3dd63f2d4200.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;373.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;373.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_6&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;7 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7b2624aee4cabbc100.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;374.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;374.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_7&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;8 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4b98e241f1d4362400.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;portals&amp;#x2F;375.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;portals&amp;#x2F;375.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;706&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×3.1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(1, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(1, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;17c07e2f34a2e86600.webp&quot; 
      id=&quot;demo_1_0&quot; 
      onclick=&quot;gallery_set(1, 0)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;7232c532a08e72b400.webp&quot; 
      id=&quot;demo_1_1&quot; 
      onclick=&quot;gallery_set(1, 1)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;615cb35fba459fe700.webp&quot; 
      id=&quot;demo_1_2&quot; 
      onclick=&quot;gallery_set(1, 2)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;87f97b2ff676c0e600.webp&quot; 
      id=&quot;demo_1_3&quot; 
      onclick=&quot;gallery_set(1, 3)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;2d3a973abffc8b2400.webp&quot; 
      id=&quot;demo_1_4&quot; 
      onclick=&quot;gallery_set(1, 4)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;de6a0c3dd63f2d4200.webp&quot; 
      id=&quot;demo_1_5&quot; 
      onclick=&quot;gallery_set(1, 5)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;7b2624aee4cabbc100.webp&quot; 
      id=&quot;demo_1_6&quot; 
      onclick=&quot;gallery_set(1, 6)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;4b98e241f1d4362400.webp&quot; 
      id=&quot;demo_1_7&quot; 
      onclick=&quot;gallery_set(1, 7)&quot;
      width=&quot;1280&quot; height=&quot;706&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[1] = 0;
slide_count[1] = 8;
&lt;&#x2F;script&gt;</description>
        </item>
        <item>
            <title>Порталы</title>
            <pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/portals/</link>
            <guid>https://testzorax.github.io/p/portals/</guid>
            <description>&lt;style&gt;
.container-col {
  padding: 10px;
  margin: 5px;
  min-width: 110px;
  flex: 1 0 0%;
}
&lt;&#x2F;style&gt;
&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Данная статья является сборником всех моих постов про порталы из телеграма. Собрал в одном месте чтобы было удобнее читать, информация не потерялась и индексировалось поисковиками.&lt;&#x2F;p&gt;
&lt;p&gt;Каждый отдельный пост указывается датой публикации. После заголовка есть ссылка на посты в телеграме откуда это было взято.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;24-11-2019&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#24-11-2019&quot;&gt;#&lt;&#x2F;a&gt;24.11.2019&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt; уже удалённый канал.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Друзья, наконец этот момент настал! Я публикую видео, где показываю результат работы над проектом, который последние два года скрывал от всех и называл &amp;quot;секретным проектом&amp;quot;. Чем же оказался этот секретный проект? Смотрите в видео.&lt;&#x2F;p&gt;
&lt;p&gt;Приятного просмотра.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;fWkAfa96OmI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;container-col&quot;&gt;
&lt;p&gt;&lt;strong&gt;Сам опубликовался:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Ссылка&lt;&#x2F;th&gt;&lt;th&gt;❤️&lt;&#x2F;th&gt;&lt;th&gt;💬&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pikabu.ru&#x2F;story&#x2F;portal_v_portale_reshenie_problemyi_s_pomoshchyu_simulyatsii_7066445&quot;&gt;pikabu&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;2456&lt;&#x2F;td&gt;&lt;td&gt;469&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-169103586_20&quot;&gt;optozorax blog ВК&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1198648150095007744&quot;&gt;Twitter&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Portal&#x2F;comments&#x2F;e10wxm&#x2F;portal_in_portal_simulation_and_rendening&#x2F;&quot;&gt;reddit&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;container-col&quot;&gt;
&lt;p&gt;&lt;strong&gt;Про эту работу рассказали другие люди:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Ссылка&lt;&#x2F;th&gt;&lt;th&gt;❤️&lt;&#x2F;th&gt;&lt;th&gt;💬&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dtf.ru&#x2F;avi&#x2F;84037-video-pro-to-chto-budet-esli-prosunut-portal-v-portal&quot;&gt;DTF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;204&lt;&#x2F;td&gt;&lt;td&gt;72&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-184203753_15697&quot;&gt;ЖЮ ВК&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;114&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.maximonline.ru&#x2F;guide&#x2F;maximir&#x2F;_article&#x2F;chto-budet-esli-odin-portal-perpendikulyarno-zasunut-v-drugoi-portal-video-simulyacii&#x2F;&quot;&gt;MAXIM&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tjournal.ru&#x2F;flood&#x2F;128131-chto-budet-esli-popytatsya-prosunut-portal-cherez-portal&quot;&gt;TJ&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;24-02-2020&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#24-02-2020&quot;&gt;#&lt;&#x2F;a&gt;24.02.2020&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;62&quot;&gt;&lt;code&gt;tg&#x2F;62&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;63&quot;&gt;&lt;code&gt;tg&#x2F;63&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;64&quot;&gt;&lt;code&gt;tg&#x2F;64&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Я задался вопросом, насколько быстро будет работать рейтрейсинг в браузере. &lt;&#x2F;p&gt;
&lt;p&gt;Для начала, очевидно, что рейтрейсинг надо реализовывать на шейдерах.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я зашёл на shadertoy.com и взял первые попавшиеся шейдеры, которые это делают. Затем я засунул эти шейдеры в библиотеку, которую я до этого использовал для графики в браузере: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;miniquad&quot;&gt;miniquad&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;В итоге получилось это:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dovol-no-bystryi-reitreising-triokh-sfer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dovol-no-bystryi-reitreising-triokh-sfer&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Довольно быстрый рейтрейсинг трёх сфер&lt;&#x2F;h2&gt;
&lt;p&gt;(&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;optozorax&#x2F;b62122a06e38f8752ee4e95879ecc1db&quot;&gt;код&lt;&#x2F;a&gt;) (&lt;a href=&quot;https:&#x2F;&#x2F;www.shadertoy.com&#x2F;view&#x2F;4ljGRd&quot;&gt;шейдер&lt;&#x2F;a&gt;) (&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;bufdraw&#x2F;www_shader_test_1&#x2F;index.html&quot;&gt;веб-демка&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;669&quot;
    height=&quot;525&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5f18a832fef30f7900.webp&quot; 
    onclick=&quot;full_screen(&#x27;63.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;63.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;ochen-medlennyi-no-ochen-krasivyi-reitreising-tsvetnykh-oblakov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ochen-medlennyi-no-ochen-krasivyi-reitreising-tsvetnykh-oblakov&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Очень медленный, но очень красивый рейтрейсинг цветных облаков&lt;&#x2F;h2&gt;
&lt;p&gt;(&lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;optozorax&#x2F;030f3f11d2c14c333524f34750538f37&quot;&gt;код&lt;&#x2F;a&gt;) (&lt;a href=&quot;https:&#x2F;&#x2F;www.shadertoy.com&#x2F;view&#x2F;3l23Rh&quot;&gt;шейдер&lt;&#x2F;a&gt;) (&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;bufdraw&#x2F;www_shader_test_2&#x2F;index.html&quot;&gt;веб-демка&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;669&quot;
    height=&quot;525&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;536471ecc407e76700.webp&quot; 
    onclick=&quot;full_screen(&#x27;64.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;64.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h2&gt;
&lt;p&gt;Ни первый, ни тем более второй пример не запускаются у меня на телефоне, Firefox тупо крашится. На айфоне первый пример летает. Второй работает, но заметно медленней.&lt;&#x2F;p&gt;
&lt;p&gt;Так что перспективы рейтрейсинга в браузере на шейдерах сомнительны. А то пока я мылся в душе, надумал что можно переписать свой просмотрщик &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portals_opengl&quot;&gt;порталов&lt;&#x2F;a&gt; на рейтрейсинг и браузер. Пока что, видимо, не судьба :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;(спойлер из далёкого будущего: судьба, я ошибался)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;31-01-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#31-01-2021&quot;&gt;#&lt;&#x2F;a&gt;31.01.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;298&quot;&gt;&lt;code&gt;tg&#x2F;298&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (7 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;299&quot;&gt;&lt;code&gt;tg&#x2F;299&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (80 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;vvedenie-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie-1&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Введение&lt;&#x2F;h2&gt;
&lt;p&gt;Как известно, я решил задачу &amp;quot;что будет если поместить портал в портал&amp;quot;. Я написал программу, которая проводит вычисление этого, и срендерил результат.&lt;&#x2F;p&gt;
&lt;p&gt;По этому поводу я опубликовал маленькое видео на ютубе, а затем запостил это видео на реддите, и оно там не взлетело, набрав 29 лайков.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас, спустя год, я решил предпринять попытку №2, и залил видео, чтобы оно было просматриваемо через встроенный в реддит плеер, и сразу переместил указатель начала видео к сути, параллельно ускорив его. Надеюсь это увеличит эффект.&lt;&#x2F;p&gt;
&lt;p&gt;Вот &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Portal&#x2F;comments&#x2F;l9agp9&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;ссылка&lt;&#x2F;a&gt; на новый пост в реддите. Прошу оценить.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe id=&quot;reddit-embed&quot; src=&quot;https:&#x2F;&#x2F;www.redditmedia.com&#x2F;r&#x2F;Portal&#x2F;comments&#x2F;l9agp9&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;?ref_source=embed&amp;amp;ref=share&amp;amp;embed=true&quot; sandbox=&quot;allow-scripts allow-same-origin allow-popups&quot; style=&quot;border: none;&quot; height=&quot;431&quot; width=&quot;640&quot; scrolling=&quot;no&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;vyvody&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvody&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Выводы&lt;&#x2F;h2&gt;
&lt;p&gt;Спасибо всем за поддержку, пост набрал 2.8к апвоутов и остановился в подъёме. А теперь немного размышлений по поводу реддита.&lt;&#x2F;p&gt;
&lt;p&gt;Я опубликовал данный пост в &lt;code&gt;r&#x2F;Portal&lt;&#x2F;code&gt;, где находится 98к подписчиков, и где за всё время самый успешный пост набрал 5к апвоутов. Это означает, что насколько бы хорош мой пост ни был, он вряд ли наберёт больше 5к, потому что на это влияет не только качество поста, но ещё и много других критериев, которые должны сойтись вместе одновременно. А я видел, что обычно всякие крутые вещи на реддите набирают &amp;gt;40к апвоутов, и рассчитывал примерно на это. Я думал, что у реддита есть аналог трендов, и что любой пост может взлететь до небес, если он хорош. А оказывается, нет, и если хочется взлететь до небес, нужно публиковаться в изначально популярном сабреддите.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё пост набрал 2.8к апвоутов, и 70 комментариев, в то время, как тот же самый &lt;a href=&quot;https:&#x2F;&#x2F;pikabu.ru&#x2F;story&#x2F;portal_v_portale_reshenie_problemyi_s_pomoshchyu_simulyatsii_7066445&quot;&gt;пост на пикабу&lt;&#x2F;a&gt; набрал 2.4к апвоутов, но 469 комментариев. Плюс на пикабу я опубликовал это с предысторией и приложил видео на ютубе, в котором до момента входа ждать наверное секунд 30. Но, тем не менее, его оценило много людей, и посмотрело много людей. Отсюда можно сделать вывод что пикабу является хорошей площадкой с лояльной и активной аудиторией.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё один вариант как можно увеличить охват на реддите - это кросс-посты. Как я выяснил, нельзя кросс-постить в самые релевантные для моего поста сабреддиты: &lt;code&gt;r&#x2F;gifs&lt;&#x2F;code&gt;, &lt;code&gt;r&#x2F;gaming&lt;&#x2F;code&gt;, &lt;code&gt;r&#x2F;interestingasfuck&lt;&#x2F;code&gt;, &lt;code&gt;r&#x2F;nextfuckinglevel&lt;&#x2F;code&gt;. Туда можно постить только &amp;quot;оригинальный&amp;quot; контент.&lt;&#x2F;p&gt;
&lt;p&gt;Но можно кросс-постить в менее поулярные сабреддиты, и я постнул в &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;DrosteEffect&#x2F;comments&#x2F;l9l9ki&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;DrosteEffect&lt;&#x2F;a&gt;, и какой-то чувак кросс-постнул в &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Recursion&#x2F;comments&#x2F;l9z3ky&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;Recursion&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь я обнаруживаю, что мою гифку перезалили, и опубликовали в &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;interestingasfuck&#x2F;comments&#x2F;l9zjec&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;interestingasfuck&lt;&#x2F;a&gt;, и там пост набрал 4.3к апвоутов.&lt;&#x2F;p&gt;
&lt;p&gt;Я принял правильное решение, что разместил ватермарку посередине картинки, потому что учитывая масштабы копипасты постов, это единственный способ как можно найти оригинал. В будущем думаю сразу размещать ссылку на этот телеграм-канал, написав: &lt;code&gt;t.me&#x2F;optozorax_dev&lt;&#x2F;code&gt;. Раньше у меня ватермарка была слабо видно, и она была в левом углу картинки, благодаря этому какое-то сообщество в вк, обрезало мою анимацию квадратом, и моей ватермарки как и не бывало.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я принял правильное решение, что в гифке сразу перешёл к делу и показываю процесс входа через 1 секунду от старта, а весь нужный контекст предоставляю в заголовке. Так часто делают, и это работает. В этом плане мою &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fWkAfa96OmI&quot;&gt;ютубовское видео&lt;&#x2F;a&gt; просто ужасно, потому что оно повторяет заголовок, вводит много ненужной информации в начале, и вообще там всё медленно происходит. Весь процесс можно ускорить в 1.5 раза, и ничего плохого не случится. Так же, если бы я сделал видео максимально коротким, то на ютубе шансов завируситься было бы намного больше, потому что люди на ютубе всегда пишут: &amp;quot;If this video less than a minute, and YouTube recommends it to me, I definitely watch it.&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Будущие посты-гифки по этой теме я планирую публиковать в &lt;code&gt;r&#x2F;gaming&lt;&#x2F;code&gt;, или &lt;code&gt;r&#x2F;nextfuckinglevel&lt;&#x2F;code&gt;, и уже потом кросс-постить это в &lt;code&gt;r&#x2F;Portal&lt;&#x2F;code&gt; (туда кросс-пост разрешён).&lt;&#x2F;p&gt;
&lt;p&gt;Надеюсь эта информация вам пригодится, если вы захотите что-то постить на реддит и получить максимальный охват.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;statistika&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#statistika&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Статистика&lt;&#x2F;h2&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;container-col&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;В реддите:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Ссылка&lt;&#x2F;th&gt;&lt;th&gt;❤️&lt;&#x2F;th&gt;&lt;th&gt;💬&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Portal&#x2F;comments&#x2F;l9agp9&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;Portal&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;3.3k&lt;&#x2F;td&gt;&lt;td&gt;78&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;interestingasfuck&#x2F;comments&#x2F;l9zjec&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;interestingasfuck&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;4.4k&lt;&#x2F;td&gt;&lt;td&gt;127&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Recursion&#x2F;comments&#x2F;l9z3ky&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;Recursion&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;1.3k&lt;&#x2F;td&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;DrosteEffect&#x2F;comments&#x2F;l9l9ki&#x2F;this_happens_if_you_put_one_portal_inside_another&#x2F;&quot;&gt;r&#x2F;DrosteEffect&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;486&lt;&#x2F;td&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;container-col&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;strong&gt;Украли без указания авторства:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Ссылка&lt;&#x2F;th&gt;&lt;th&gt;❤️&lt;&#x2F;th&gt;&lt;th&gt;💬&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-152349826_15251&quot;&gt;GameTopus ВК&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;162&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-112289703_56003&quot;&gt;SciTopus ВК&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;157&lt;&#x2F;td&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-132147085_344201&quot;&gt;Видач ВК&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td&gt;694&lt;&#x2F;td&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;9-02-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#9-02-2021&quot;&gt;#&lt;&#x2F;a&gt;9.02.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;310&quot;&gt;&lt;code&gt;tg&#x2F;310&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (115 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;310_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;В процессе решения задачи о вхождении портала в портал я осознал, что порталы могут быть не только плоскими, но ещё и поверхностными.&lt;&#x2F;p&gt;
&lt;p&gt;На данной гифке как раз показан пример поверхностного портала. Он состоит из двух пар плоских порталов, которые соединены друг с другом таким образом, чтобы при телепортации сохранялась непрерывность и целостность пространства с обоих сторон.&lt;&#x2F;p&gt;
&lt;p&gt;Справа показано как треугольник обрезается при входе в данный портал.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще, теоретически, порталы можно разместить на любую поверхность, самое главное чтобы один из них образовывал заднюю часть поверхности, а другой - переднюю.&lt;&#x2F;p&gt;
&lt;p&gt;А ещё, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portals_opengl#%D0%BF%D0%BE%D0%B2%D0%B5%D1%80%D1%85%D0%BD%D0%BE%D1%81%D1%82%D0%BD%D1%8B%D0%B9-%D0%BF%D0%BE%D1%80%D1%82%D0%B0%D0%BB&quot;&gt;поверхностные порталы&lt;&#x2F;a&gt; можно покрутить в &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portals_opengl&#x2F;releases&#x2F;tag&#x2F;1.1&quot;&gt;моей программке&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;14-02-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#14-02-2021&quot;&gt;#&lt;&#x2F;a&gt;14.02.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;312&quot;&gt;&lt;code&gt;tg&#x2F;312&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;313&quot;&gt;&lt;code&gt;tg&#x2F;313&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;314&quot;&gt;&lt;code&gt;tg&#x2F;314&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;315&quot;&gt;&lt;code&gt;tg&#x2F;315&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;316&quot;&gt;&lt;code&gt;tg&#x2F;316&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;317&quot;&gt;&lt;code&gt;tg&#x2F;317&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;318&quot;&gt;&lt;code&gt;tg&#x2F;318&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;319&quot;&gt;&lt;code&gt;tg&#x2F;319&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;320&quot;&gt;&lt;code&gt;tg&#x2F;320&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;322&quot;&gt;&lt;code&gt;tg&#x2F;322&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;323&quot;&gt;&lt;code&gt;tg&#x2F;323&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (19 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Недавно я услышал интересную идею о том, чтобы создать портал в форме ленты Мёбиуса.&lt;&#x2F;p&gt;
&lt;p&gt;Я не хотел создавать скучный портал в форме ленты Мёбиуса, который телепортирует из одного места в другое, я хотел создать такой портал, который будет телепортировать в свою какую-то часть, то есть сделать эту ленту такой, чтобы она была порталом, состоящим из одной стороны.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я сел за размышления: порисовал на бумажке, повырезал из неё, поприкладывал листочки друг к другу, и понял что теоретически это возможно, что целостность входящего объекта не будет нарушаться в месте где лента Мёбиуса замыкается на свою обратную сторону. Это возможно только если входящий объект будет проходить вперёд, но будет телепортироваться зеркально относительно горизонтали.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы лучше понять что я имею ввиду, давайте взглянем на эту гифку. &lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;313.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Здесь представлен цилиндр, который телепортирует входящий в него свет зеркально относительно горизонтали. У этого цилиндра есть только боковая поверхность, и нету верхней. Поэтому когда мы смотрим на него сверху, мы можем видеть его внутренности.&lt;&#x2F;p&gt;
&lt;p&gt;Если смотреть на него так, что луч пересекает его два раза, то всё выглядит как обычно (зеркало + зеркало = нормально). Тут важно заметить, что в начале гифки мы видим синий пол через него. Но если смотреть на него так, чтобы луч пересекал поверхность один раз, то мы на месте пола увидим белый потолок. В этом и заключается суть зеркалирования. Представьте что то же самое делается и в ленте Мёбиуса.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала я хотел сделать ленту Мёбиуса через полигональные порталы, но быстро понял что это тупиковый путь, ибо не получается смапить вход и выход, а там нужно чтобы полигоны совпадали на 100%. Тогда я решил пойти другим путём — брать отрезок на ленте Мёбиуса, и в этом отрезке телепортировать входящий луч света зеркально. По идее, раз мы теперь оперируем отрезками, а не полигонами, то всё должно работать.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;907&quot;
    height=&quot;460&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3fbf2adb9708da8f00.png&quot; 
    onclick=&quot;full_screen(&#x27;314.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;314.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Более формально, если взглянуть на параметрическое представление ленты Мёбиуса, то мне нужно найти в какой точке &lt;code&gt;(u, v)&lt;&#x2F;code&gt; что-то касается этой ленты, затем просто умножить &lt;code&gt;v&lt;&#x2F;code&gt; на &lt;code&gt;-1&lt;&#x2F;code&gt;: &lt;code&gt;(u, -v)&lt;&#x2F;code&gt;, и преобразовать эти координаты обратно к &lt;code&gt;(x, y, z)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, теперь на основе чего это можно сделать? Недолго думав я пришёл к тому, что реализовать такое рейтрейсингом будет проще всего. Окей, делать рейтрейсинг через шейдеры я умею (или могу загуглить на &lt;a href=&quot;http:&#x2F;&#x2F;shadertoy.com&#x2F;&quot;&gt;shadertoy.com&lt;&#x2F;a&gt; как это делают), так что тут никаких проблем. Но как мне найти пересечение луча и поверхность Мёбиуса?&lt;&#x2F;p&gt;
&lt;p&gt;В рейтрейсинге луч обычно представляется в виде &lt;code&gt;o + d*t&lt;&#x2F;code&gt;, где &lt;code&gt;o&lt;&#x2F;code&gt;(origin), &lt;code&gt;d&lt;&#x2F;code&gt;(direction) - это вектора, а &lt;code&gt;t&lt;&#x2F;code&gt; - скаляр, который необходимо найти.&lt;&#x2F;p&gt;
&lt;p&gt;И если посмотреть на параметрическое представление, то оно выглядит очень плохо, аналитически найти пересечение луча и точку на поверхности Мёбиуса у нас не получится.&lt;&#x2F;p&gt;
&lt;p&gt;Но, это получается уравнение с тремя неизвестными &lt;code&gt;(t, u, v)&lt;&#x2F;code&gt; и тремя уравнениями. Значит решение можно найти численно! Благо на 3 курсе у нас были лабы на написание многомерного метода Ньютона (узнать который я мечтал ещё со школы), так что как я его понял, сразу оформил это в виде математической статьи, чтобы кто угодно (понимающий математику), тоже мог им воспользоваться, вот &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;newtons_method_article&quot;&gt;ссылка на эту статью&lt;&#x2F;a&gt;, там же рядом лежит pdf&#x27;ка.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, я начал программировать этот метод Ньютона внутри шейдеров, а он, оказывается, очень слаб. Он очень сильно зависит от начального приближения. И он настолько плохо находит нужное мне решение, что даже со сферой он работал отвратительно:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;687&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;cb4176cfc2d7c52800.webp&quot; 
    onclick=&quot;full_screen(&#x27;316.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;316.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я думал что всё потеряно, что вот он мой конец. Но через какое-то время мне пришла идея, что можно свести многомерный поиск к одномерному. Если внимательно посмотреть на параметрическое уравнение ленты Мёбиуса, то можно заметить следующее: при фиксированном &lt;code&gt;u&lt;&#x2F;code&gt; оно превращается в уравнение прямой! А ещё можно заметить, что если зафиксировать &lt;code&gt;v = 0&lt;&#x2F;code&gt;, то у нас получится уравнение окружности!&lt;&#x2F;p&gt;
&lt;p&gt;На данной картинке можно увидеть что лента Мёбиуса действительно состоит из прямых отрезков:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;901&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b2f4c38c5065f3d400.webp&quot; 
    onclick=&quot;full_screen(&#x27;317.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;317.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Раз лента Мёбиуса при фиксированном &lt;code&gt;u&lt;&#x2F;code&gt; превращается в уравнение прямой, значит можно аналитическим образом найти расстояние между двумя прямыми. А это расстояние можно использовать в одномерном методе Ньютона, чтобы его минимизировать, и найти такое &lt;code&gt;u&lt;&#x2F;code&gt;, при котором это расстояние равно нулю, то есть луч пересекает прямую с поверхности, то есть саму поверхность!&lt;&#x2F;p&gt;
&lt;p&gt;Во-первых одномерный поиск намного лучше сходится к нужным корням, а во-вторых для него намного проще взять сразу много начальных приближений, чтобы решение уж точно пришло к самому эффективному корню (самой близкой точке на луче).&lt;&#x2F;p&gt;
&lt;p&gt;Ещё тут важно обратить внимание на то, что &lt;code&gt;u&lt;&#x2F;code&gt; передаётся только в периодические функции, а значит оно должно быть в пределах &lt;code&gt;[0; 2π)&lt;&#x2F;code&gt;, и в таком случае лучше обрезать эту переменную по этим границам, когда к ней прибавляется &lt;code&gt;Δu&lt;&#x2F;code&gt;, иначе решение будет сходиться очень плохо (проверено на практике).&lt;&#x2F;p&gt;
&lt;p&gt;В итоге мой одномерный метод Ньютона перебирает 20 начальных приближений по всей окружности, иначе иногда появляются участки, где не находится оптимальный корень. А это очень затратно скажу я вам, особенно на каждый пиксель такое вычислять. Ну да ладно, у меня тут не продакшеновые алгоритмы, а прототипы и исследовательская деятельность, сойдёт. Но если кто-то знает как можно более эффективно искать численное решение данного уравнения — буду рад послушать.&lt;&#x2F;p&gt;
&lt;p&gt;Либо есть другой вариант — взять другое параметрическое представление ленты Мёбиуса, которое не делает таких искривлений, но такое вряд ли существует. Я вообще не смог загуглить никаких других форм ленты Мёбиуса кроме той, что написана на Википедии.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, я теперь наконец умею рисовать ленту Мёбиуса рейтрейсингом, и при этом для каждого луча я умею получать в каких &lt;code&gt;(u, v)&lt;&#x2F;code&gt; на ленте он находится. Вот как это выглядит на поверхности.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;900&quot;
    height=&quot;775&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0b527f146886361100.webp&quot; 
    onclick=&quot;full_screen(&#x27;319.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;319.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Дальше дело за малым — добавить объекты вокруг (чтобы было на что смотреть через телепортирующийся свет), и сделать саму телепортацию, ну и конечно управление мышью, чтобы вертеть, все дела.&lt;&#x2F;p&gt;
&lt;p&gt;Я расчехлил макроквад и свой старый код для &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portals_tracing&quot;&gt;рендеринга порталов&lt;&#x2F;a&gt; на C++ и быстро накидал код для камеры, для мышки и прочего. Ох, как же я кайфую со своего кода, я там практически сам полностью изобрёл все абстракции и математику для рейтрейсинга, и мне мой код намного понятнее и приятней, чем то что обычно пишут на shadertoy, там обычно месиво из формул, которые хрен расшифруешь.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, теперь момент истины! Как же выглядит портальная лента Мёбиуса???&lt;&#x2F;p&gt;
&lt;p&gt;Она выглядит вот так:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;322.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Я надеялся что у меня где-то ошибка в коде, что эта лента не так сильно всё искривляет, но нет, данный код работает корректно для цилиндра, и я его уже максимально обдумал, в нём нет логических ошибок.&lt;&#x2F;p&gt;
&lt;p&gt;Проблема данного портала в том, что это не портал. Можно видеть, что прямые линии не сохраняются, а это значит, что если объект залетит туда, то на другой стороне его разорвёт и искривит, что он уже не может быть собой. А обычные порталы таким не грешат, это одно из их главных свойств — сохранять целостность входящего объекта. Вот поверхностный портал сохраняет целостность, поэтому он — портал. Так что это просто искривлятор света.&lt;&#x2F;p&gt;
&lt;p&gt;Но это вполне очевидно что данный «портал» всё искривляет. Если посмотреть на визуализацию &lt;code&gt;(u, v)&lt;&#x2F;code&gt; на прошлой картинке, то можно видеть, что там квадратик снизу не таких же размеров как и вверху, а у нас как раз меняются местами верх и низ.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так вот всё печально. У меня были большие надежды на этот портал, я все эти 2 дня мечтал его увидеть, и молился всем богам, чтобы он сохранял целостность, думал что он будет очень интересно выглядеть, а оказалось вот так...((&lt;&#x2F;p&gt;
&lt;p&gt;Думаю надо немного снизить планку и постараться сделать портал в форме ленты Мёбиуса, который состоит из двух частей. Похоже, такой должен сохранять целостность :)&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, код лежит &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;mobius_portal&#x2F;tree&#x2F;778c561061a51a4c574755427ba227f87d6c4922&quot;&gt;тут&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;15-02-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#15-02-2021&quot;&gt;#&lt;&#x2F;a&gt;15.02.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;324&quot;&gt;&lt;code&gt;tg&#x2F;324&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (14 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;324.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Сегодня я сделал портал Мёбиуса, состоящий из двух частей, и он работает и выглядит нормально!&lt;&#x2F;p&gt;
&lt;p&gt;Тут всё как с цилиндром в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#14022021&quot;&gt;14.02.2021&lt;&#x2F;a&gt;: если луч проходит через портал два раза, то он возвращается в прежнюю вселенную. Поэтому лента Мёбиуса выглядит так интересно с некоторых ракурсов, где луч проходит дважды.&lt;&#x2F;p&gt;
&lt;p&gt;Там, где луч проходит один раз, он телепортируется на другую сторону, и это можно наблюдать. Сначала мы смотрим в спину синего портала, и видим что красная стенка к нам теперь близко, потому что она близко к оранжевому порталу.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё что мне нравится, наблюдая в синий портал, можно видеть обратную сторону его границы — оранжевую.&lt;&#x2F;p&gt;
&lt;p&gt;Так же видно, что если поставить эти порталы друг напротив друга, то они, как и обычные порталы, создают коридор.&lt;&#x2F;p&gt;
&lt;p&gt;Затем, в середине видео, я перевернул один портал на 180°, нажав &lt;code&gt;A&lt;&#x2F;code&gt;. Я это сделал для того, чтобы легче было видеть где луч проходит один раз, а где два.&lt;&#x2F;p&gt;
&lt;p&gt;По мне, получилось очень красиво и интересно, стоило всех приложенных трудов :)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;mobius_portal&#x2F;tree&#x2F;8aee45f6f8da7252a77fe97d9c337a0aa1d8b169&quot;&gt;Код&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;15-02-2021-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#15-02-2021-1&quot;&gt;#&lt;&#x2F;a&gt;15.02.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;325&quot;&gt;&lt;code&gt;tg&#x2F;325&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (57 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Я сделал веб демку для портала Мёбиуса!!!&lt;&#x2F;p&gt;
&lt;p&gt;Заходите, крутите наздоровье. Управление: мышь + кнопки написаны слева вверху. Если сильно лагает и маленький ФПС, то уменьшите размер браузера, должно стать получше.&lt;&#x2F;p&gt;
&lt;p&gt;Не открывать с телефона, ибо он может просто зависнуть. Здесь шейдеры виноваты, телефон такое не выдержит.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;mobius_portal&#x2F;&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;mobius_portal&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ну и ещё, раз появилась демка, можно опубликоваться и в остальных местах, вот ссылка на &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;mobius_portal&quot;&gt;гитхаб&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;nextfuckinglevel&#x2F;comments&#x2F;lkok2m&#x2F;mindblowing_portal_in_form_of_the_mobius_strip&#x2F;&quot;&gt;реддит&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1361438218101657600&quot;&gt;твиттер&lt;&#x2F;a&gt; и &lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;wall-169103586_54&quot;&gt;вк&lt;&#x2F;a&gt;, если захотите поставить лайк.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;20-02-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#20-02-2021&quot;&gt;#&lt;&#x2F;a&gt;20.02.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;326&quot;&gt;&lt;code&gt;tg&#x2F;326&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (6 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;327&quot;&gt;&lt;code&gt;tg&#x2F;327&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;328&quot;&gt;&lt;code&gt;tg&#x2F;328&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;329&quot;&gt;&lt;code&gt;tg&#x2F;329&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;330&quot;&gt;&lt;code&gt;tg&#x2F;330&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (15 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;В твиттере мой портал Мёбиуса понравился многим крутым людям, и меня много ретвитнули. А ещё там появились очень ценные комментарии от математиков-геометров&#x2F;топологов, которые дали ссылки на похожие штуки.&lt;&#x2F;p&gt;
&lt;p&gt;В то время как в реддите меня забанили с формулировкой «this is not next fucking level», и там в принципе набрало мало лайков, даже в сабреддите &#x2F;r&#x2F;Portal. Поэтому думаю что дальше, помимо этого канала, лучше развивать твиттер, это более благодарная площадка, и там сидят крутые математики и крутые программисты.&lt;&#x2F;p&gt;
&lt;p&gt;Первое о чём я узнал — это программа &lt;a href=&quot;https:&#x2F;&#x2F;facstaff.susqu.edu&#x2F;brakke&#x2F;polycut&#x2F;polycut.htm&quot;&gt;«Polycut»&lt;&#x2F;a&gt;, которая визуализирует различные виды порталов, но без самих портальных эффектов, и вообще без сложной геометрии, просто показывают идею через цвета.&lt;&#x2F;p&gt;
&lt;p&gt;И оказывается что концепцию портала Мёбиуса из двух частей (order-2) уже рассматривали 😔. Мало того, ещё там есть тройной портал Мёбиуса! И ещё есть такие мозговыносящие порталы, которые я до сих пор не могу осмыслить, например Trefoli Partial.&lt;&#x2F;p&gt;
&lt;p&gt;Мне кажется этим всем визуализациям немного не хватает графония в виде телепортации света и возможности увидеть другую сцену сквозь них, либо поставить их друг напротив друга.&lt;&#x2F;p&gt;
&lt;p&gt;Ну а следующее о чём мне рассказали — это &lt;a href=&quot;https:&#x2F;&#x2F;imaginary.org&#x2F;program&#x2F;knotportal&quot;&gt;«KnotPortal»&lt;&#x2F;a&gt;. На самом деле подобный тип портала уже показывался в более старой программе «Polycut», но тут уже визуализация значительно лучше, и тут самое интересное — это Trefoli Knot, который является одним непрерывным порталом, но при этом может телепортировать в 4 (или больше) различных вселенных!&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, непрерывный портал, который может переносить не только в одну вселенную, а сразу во множество — это очень малоизвестная концепция. Я называю такие порталы тройными&#x2F;четверными итд, и в своё время самостоятельно открыл тройной портал, а на основании идеи о нём и любой N-портал. То есть такие порталы могут существовать N равноценными частями. И соответственно, каждую из этих частей мы можем поместить в различные вселенные, чтобы связывать их друг с другом.&lt;&#x2F;p&gt;
&lt;p&gt;Так что многомировые порталы существовали и до меня, но не в таком виде, как я их придумал! Так что мои предстоящие визуализации будут чем-то новым и необычным.&lt;&#x2F;p&gt;
&lt;p&gt;Надо продолжить изучать страницы, там ещё много текста, и много порталов, и думаю что надо попробовать все эти визуализации потом перенести в свою новую программу.&lt;&#x2F;p&gt;
&lt;p&gt;Вот как в «Polycut» визуализировали портал Мёбиуса:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;327.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;А вот так выглядит портал под названием «Trefoli partial» 🤯.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;328.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;А вот так выглядит Trefoli Knot, который телепортирует в 4 (или больше) различных вселенных. Его можно посмотреть на &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=XhdnG1xkFnw&quot;&gt;этом видео&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;592&quot;
    height=&quot;333&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4a34f3d5542b9dab00.webp&quot; 
    onclick=&quot;full_screen(&#x27;329.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;329.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Точно, совсем забыл! Пока я пилю визуализации, вот вам загадки!&lt;&#x2F;p&gt;
&lt;p&gt;У меня есть две очень крутые вещи: тройной портал и одиночный портал (монопортал). Если понять концепцию тройного портала, то можно легко соорудить четверной, пятерной итд, но не одиночный.&lt;&#x2F;p&gt;
&lt;p&gt;Обычные порталы состоят из двух равноценных частей, нельзя назвать одну часть «входом», а другую «выходом», они одинаково и входы и выходы.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь вот вам зададки: придумайте порталы, которые равноценно существуют тремя частями (тройной портал), и одной (монопортал).&lt;&#x2F;p&gt;
&lt;p&gt;Может быть вы придумаете что-то, что ни мне, ни кому-либо ещё ранее не было известно! В любом случае если вы постараетесь решить эти загадки, то потом будет гораздо интересней увидеть решение.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-03-2021&quot;&gt;#&lt;&#x2F;a&gt;2.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;331&quot;&gt;&lt;code&gt;tg&#x2F;331&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;332&quot;&gt;&lt;code&gt;tg&#x2F;332&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;333&quot;&gt;&lt;code&gt;tg&#x2F;333&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;334&quot;&gt;&lt;code&gt;tg&#x2F;334&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;335&quot;&gt;&lt;code&gt;tg&#x2F;335&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;336&quot;&gt;&lt;code&gt;tg&#x2F;336&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;337&quot;&gt;&lt;code&gt;tg&#x2F;337&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Вместо того чтобы делать то что обещал или хотел, я снова занимался тем, что изображено на аватарке этого канала.&lt;&#x2F;p&gt;
&lt;p&gt;А именно я захотел оптимизировать рендеринг ленты Мёбиуса.&lt;&#x2F;p&gt;
&lt;p&gt;Напоминаю, что лента Мёбиуса задаётся параметрически довольно сложным уравнением, а рендерю я её через ray-tracing. Соответственно для каждого пикселя надо искать пересечение луча с этой лентой. Я искал пересечение через одномерный метод Ньютона.&lt;&#x2F;p&gt;
&lt;p&gt;Bottleneck&#x27;ом этих вычислений было то, что для метода Ньютона требовалось очень много начальных приближений, а именно 10, иначе картинка получалась очень плохой. Если ставить 20-30, то картинка уже идеальная и абсолютно без артефактов, но вычисляется такое невозможно долго. И если бы я мог сократить это число хотя бы до 1 или 2, то я бы очень сильно улучшил производительность рендеринга.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я начал думать как мне сделать так, чтобы было всего одно начальное приближение.&lt;&#x2F;p&gt;
&lt;p&gt;Самое первое что я сделал — это &lt;a href=&quot;https:&#x2F;&#x2F;www.shadertoy.com&#x2F;view&#x2F;3sycRV&quot;&gt;откопал&lt;&#x2F;a&gt; в дебрях shadertoy демку где через ray-marching рендерится лента Мёбиуса, может быть мне получится использовать эту информацию.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;mobius_portal&#x2F;blob&#x2F;improve-calculations&#x2F;ray_marching.glsl&quot;&gt;выкинул&lt;&#x2F;a&gt; из неё всё лишнее и постарался использовать так, чтобы вычислять начальное приближение из положения на пересечении. В итоге начальное приближение действительно хорошо находилось, и даже слишком хорошо, но из-за особенностей рей-марчинга вокруг ленты Мёбиуса было свечение, и оно очень плохо находило пересечение телепортированного луча, который дважды проходит через ленту, особенно в местах, где эти оба места близки. Я к сожалению не очень понимаю как реймарчинг в данной демке работает, каким магическим образом этот ротор так делает, так что я не смог уменьшить радиус этого свечения. И этот вариант пришлось откинуть в пользу других, потенциально сработающих.&lt;&#x2F;p&gt;
&lt;p&gt;Для дальнейшего повествования следует сказать, что, очевидно, ленту Мёбиуса можно обернуть в сферу так, чтобы она её полностью покрывала. Эта сфера как минимум с радиусом &lt;code&gt;1.55&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь эту информацию можно использовать. Можно представить любой луч, который потенциально может пересечь ленту Мёбиуса, двумя точками на этой сфере. Первая точка показывает origin, а вторая direction. Итого любой луч мы можем закодировать 4 числами — этими углами на сфере. Тогда результат для этих 4 чисел должен быть — n чисел, обозначающих точки пересечения этого луча с фигурой внутри сферы. Для ленты Мёбиуса по идее должно получаться всегда 2 числа, ибо это довольно простая фигура.&lt;&#x2F;p&gt;
&lt;p&gt;Но на самом деле можно даже не кодировать 2 числа для одного луча, можно всегда кодировать 1 число - ближайшую точку пересечения. А чтобы получить дальнюю точку (в случае, если наш луч лежит не вне сферы, а внутри неё), то мы можем просто поменять местами точки на сфере и получить обратный результат.&lt;&#x2F;p&gt;
&lt;p&gt;Ура, теперь что за число должно быть в результате. Это может быть &lt;code&gt;t&lt;&#x2F;code&gt; — величина показывающая, сколько нужно пройти по лучу, чтобы достичь ленты Мёбиуса. Но это довольно неюзабельная информация, так как для рендеринга используется метод Ньютона по переменной &lt;code&gt;u&lt;&#x2F;code&gt; в параметрическом задании ленты Мёбиуса. Поэтому я решил хранить именно &lt;code&gt;u&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы оценить качество любого решения, можно воспользоваться следующими данными. Я перебрал количество начальных приближений для метода Ньютона от 0 до 10 и посчитал насколько хорошо предсказывается истинный результат с 1000 начальными приближениями:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;0 — 9.9  
&lt;&#x2F;span&gt;&lt;span&gt;1 — 0.47  
&lt;&#x2F;span&gt;&lt;span&gt;2 — 0.12  
&lt;&#x2F;span&gt;&lt;span&gt;3 — 0.04  
&lt;&#x2F;span&gt;&lt;span&gt;5 — 0.02  
&lt;&#x2F;span&gt;&lt;span&gt;10 — 0.007
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Далее по ним мы будем исследовать насколько каждый предложенный метод адекватен.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, основа есть что дальше?&lt;&#x2F;p&gt;
&lt;p&gt;Первое что пришло в мою больную голову — нужно использовать машинное обучение. То есть нужно рассчитать кучу кучу лучей, а затем сделать какую-то нейросетку чтобы она по 4 числам находила другое одно число. Так как простые нейросетки — это просто перемножение матриц, то мы можем в шейдерах перемножать только максимум матрицы 4×4, поэтому надо делать нейросетки из 4 и менее нейронов (напоминаю, что мы делаем рейтрейсинг для каждого пикселя, поэтому использовать перемножение больших матриц мы не можем, уж дешевле будет метод Ньютона 10 раз запустить). Моя больная голова предположила что этого может быть достаточно, и что это даже может сработать.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала я начал оптимизировать нейросетки через растоманские библиотеки для методов оптимизаций, и получалось дико медленно и дико плохо. Оказывается я просто перемножал матрицы и применял к ним функцию активации, но совсем забыл что крайне важно ещё к ним прибавлять bias.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я ушёл на питон + keras, и начал обучать нейронку там. Вот &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;emergevolution&#x2F;1982&quot;&gt;данные&lt;&#x2F;a&gt;, если вдруг кто-то захочет попробовать сделать лучше. Итого у меня самый лучший результат получлися с 3 слоями по 4 нейрона и функцией активации elu. А результат этот &lt;code&gt;20.0&lt;&#x2F;code&gt;. Намного хуже чем 0 начальных приближений (WAT? у меня в коде где-то явно ошибка, но нейронка точно правильно работает в коде на расте, это я проверял). Если же к ней добавить метод Ньютона после предсказания, то получается &lt;code&gt;0.31451&lt;&#x2F;code&gt; (≈π&#x2F;10, WAT?), что чуть-чуть лучше, чем 1 начальное приближение, но всё ещё очень плохо. Может быть там нейросетка просто нашла среднее число, из которого хорошо сходится в максимальное число других чисел, и всё.&lt;&#x2F;p&gt;
&lt;p&gt;Хочу сказать спасибо &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;sv9t_channel&quot;&gt;Святу&lt;&#x2F;a&gt;, за ценные советы и комментарии. Скажу то что вам может быть полезно: если вы захотите решать такую задачу, то это задача регрессии, и для неё надо использовать соответствующие метрики; если ваши данные как-то связаны с тригонометрией, то к ним можно добавить на вход ещё синусы и косинусы входных данных, тогда результаты нейросети могут улучшиться (я проверил, улучились, но не намного); ещё на входы можно добавить произведения ходов (вторые степени), чтобы получилась полиномиальная регрессия (это тоже немного улучшило результат). Ну и вообще после его слов я понял, что у меня же все данные заданы в текстуре, я могу просто на текстуре делать линейную или квадратичную интерполяцию чтобы получать значения между точками.&lt;&#x2F;p&gt;
&lt;p&gt;Параллельно с нейросетками, в процессе подготовки данных, я вдруг понял, что вообще-то можно просто перебрать все эти 4 числа с каким-то шагом и сохранить результат в текстуру. Если перебирать с шагом 50, то текстура в итоге будет 50²×50² = 2500×2500, что не так и много, особенно учитывая что очень много лучей просто будут чёрными, и что будет оптимизация от png. Ну максимум десяток мегабайт получится.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так выглядит текстура на сфере.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;334.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Ну ок, засунул я это в текстуру. Дальше можно из текстуры получать начальное приближение и считать метод Ньютона? Оказывается получается очень очень плохо, и это видно на данном видео:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;335.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Так как я привожу лучи к дискретным значениям, то теряется много информации о них, и на самом деле для данного луча может подходить кардинально другое начальное приближение, чем то, которое находится по данным целочисленным координатам. Особенно это плохо в том месте, где лента становится параллельна горизонту.&lt;&#x2F;p&gt;
&lt;p&gt;А вот так выглядит сама текстура (нарисовна в радужном градиенте для простоты восприятия).&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;900&quot;
    height=&quot;900&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2ca4e185573e5cbe00.webp&quot; 
    onclick=&quot;full_screen(&#x27;336.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;336.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В общем я уже целую неделю в перерывах с этим парюсь, пишу кучу всякого кода, и получается очень плохо, и я принимаю решение рассказать здесь об этом неудачном опыте и забить.&lt;&#x2F;p&gt;
&lt;p&gt;В итоге кстати, мне удалось добиться 60 фпс на 4к фулскрине, но это выяснилось в процессе. Первое что я сделал — это поставил if, в котором чекаю если луч пересекает сферу которая покрывает ленту Мёбиуса, то только в этом случае считаем дорогой метод Ньютона, иначе не считаем. Следующая оптимизация заключалась в том, что я для вычисления двух ближайших точек у скрещивающихся прямых стал использовать не обращение матрицы 3×3, а более простые формулы с википедии с использованием скалярного и векторного произведения векторов.&lt;&#x2F;p&gt;
&lt;p&gt;Вот и всё, вот тебе и 60фпс, и можно сказать все старания были насмарку. Поэтому меньше надо отвлекаться на побочные квесты, и больше на главную цель повествования.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;6-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#6-03-2021&quot;&gt;#&lt;&#x2F;a&gt;6.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;338&quot;&gt;&lt;code&gt;tg&#x2F;338&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;339&quot;&gt;&lt;code&gt;tg&#x2F;339&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;340&quot;&gt;&lt;code&gt;tg&#x2F;340&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;341&quot;&gt;&lt;code&gt;tg&#x2F;341&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Я хочу перевести старые сцены визуализации порталов из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portals_opengl&quot;&gt;portals_opengl&lt;&#x2F;a&gt; на новый рей-трейсинговый браузерный движок, который рендерит портал Мёбиуса. Поэтому мне нужно производить быстрый рейтрейсинг полигонов, ибо там в каждой сцене всё представлено полигонами, и вычисление портала в портале у меня тоже делалось через алгоритмы с полигонами.&lt;&#x2F;p&gt;
&lt;p&gt;Я делаю рей-трейсинг через шейдеры, и в шейдерах у меня хранится сцена в виде кода (а не в виде данных). Поэтому и полигоны тоже должны быть как-то представлены в виде кода. Классические алгоритмы проверки принадлежит ли точка полигону требуют массивов, может быть аллокаций, так что это не очень доступный вариант внутри шейдеров. Но зато шейдеры компилятся в рантайме, а значит в рантайме им можно подмешивать код.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому для быстрого рейтрейсинга полигонов я выбираю путь кодогенерации. То есть для данного полигона я планирую генерировать какой-то код, который максимально быстро для произвольной точки должен проверять, принадлежит ли точка полигону.&lt;&#x2F;p&gt;
&lt;p&gt;Раньше я уже &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;fast_tree_point_in_polygon1&quot;&gt;пытался такое сделать&lt;&#x2F;a&gt;, так как раньше я тоже рендерил порталы и всё что с ними связано через рей-трейсинг, но делал это на процессоре. Если посмотреть эту страницу, у меня не получилось: алгоритм работал очень криво, долго и плохо. Я утонул в сложности и решил его забросить. Тогда я пытался это делать на основе прямоугольников и прямоугольных треугольников.&lt;&#x2F;p&gt;
&lt;p&gt;Но сейчас мне пришла идея о том что это можно сделать по-другому: можно делить всё пополам при помощи прямой. А чтобы проверить по какую сторону от прямой находится данная точка, нужно сделать очень мало очень простых арифметических действий, благодаря чему такой код, по идее, должен быть очень быстрым.&lt;&#x2F;p&gt;
&lt;p&gt;Как мы знаем, уравнение прямой задаётся в виде: &lt;code&gt;y = k * x + b&lt;&#x2F;code&gt;. Иногда проблема с этим уравнением возникает, если &lt;code&gt;k → ∞&lt;&#x2F;code&gt;, то есть если прямая горизональная. Эту проблему можно легко обойти если использовать уравнение прямой &lt;code&gt;x = k * y + b&lt;&#x2F;code&gt;, ведь здесь &lt;code&gt;k_y → 0&lt;&#x2F;code&gt; когда &lt;code&gt;k_x → ∞&lt;&#x2F;code&gt;, в итоге если мы будем выбирать наименьший из них, то наш &lt;code&gt;k&lt;&#x2F;code&gt; всегда будет меньше единицы по модулю.&lt;&#x2F;p&gt;
&lt;p&gt;Я решил поступать следующим образом:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Если текущий полигон — это треугольник, то возвращаем проверку находится ли точка внутри данного треугольника.&lt;&#x2F;li&gt;
&lt;li&gt;Сначала выбираем наилучшую прямую, затем разрезаем полигон этой прямой.&lt;&#x2F;li&gt;
&lt;li&gt;Для каждой стороны рекурсивно повторяем данную процедуру.&lt;&#x2F;li&gt;
&lt;li&gt;Возвращаем проверку, которая смотрит по какую сторону прямой находится данная точка, и в соответствии с этим смотрит в рекурсивную проверку.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Таким образом итоговая проверка будет лишь смотреть по какую сторону от прямой находится данная точка, и в самом конце она будет лишь проверять принадлежит ли точка треугольнику.&lt;&#x2F;p&gt;
&lt;p&gt;А это уже много сгенерировать просто в кучу &lt;code&gt;if&lt;&#x2F;code&gt;&#x27;ов в код на шейдерах.&lt;&#x2F;p&gt;
&lt;p&gt;Здесь самая главная проблема — это обрезать полигон прямой, ибо после этого действия полигон может стать сложнее, и соответственно мы никогда не можем выйти из рекурсии и получить треугольник. Ещё одна проблема, что после обрезания полигона прямой у нас с одной стороны от этой прямой может возникнуть не один полигон. Ну и последняя проблема — найти подходящую библиотеку, которая будет это делать.&lt;&#x2F;p&gt;
&lt;p&gt;Первая проблема решается тем, что для «лучшей прямой» мы смотрим чтобы эта прямая после обрезания не создавала слишком много новых полигонов, и чтобы после обрезания количество точек с одной стороны и с другой стороны были как можно ближе (стремилось делить пополам).&lt;&#x2F;p&gt;
&lt;p&gt;Что интересно, если для метрики «лучшей прямой» выбирать такую прямую, которая делит площади с одной стороны и с другой как можно ближе к «пополам», то итоговый алгоритм работает очень плохо.&lt;&#x2F;p&gt;
&lt;p&gt;А чтобы обрезать полигон прямой, таких алгоритмов нету в интернете. Нету библиотек, которые умеют это делать. Но при этом библиотеки, которые умеют находить пересечение двух сложных полигонов имеются. Казалось бы, второе намного сложнее, но для него библиотеки есть, а для первого нет. Ну ладно, не проблема, обрезание полигона прямой можно свести к нахождению пересечения двух полигонов.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы это сделать, у текущего полигона можно найти bounding box, и затем можно довольно элементарно вручную обрезать этот прямоугольник текущей прямой. Получаются два полигона, и далее для каждого из них вызываем алгоритм нахождения пересечения с исходным полигоном. Вот задача и решена.&lt;&#x2F;p&gt;
&lt;p&gt;А по поводу библиотеки для пересечения полигонов, тут всё довольно просто. Для Rust существуют биндинги к C++-ной библиотеке &lt;code&gt;clipper&lt;&#x2F;code&gt;, это я и заюзал.&lt;&#x2F;p&gt;
&lt;p&gt;В общем я заставил это работать, и вот пример сложного полигона, для которого это работает.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;1050&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;657e59517fae90cb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;340.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;340.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Его код можно посмотреть &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;optozorax&#x2F;22b58ce813ea45dbb2318edad59081a9&quot;&gt;здесь&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Всё работало хорошо, но проблемы начались когда я захотел скомпилить это для wasm, C++ в wasm бесплатно не компилился, а гугление и пробование всяких &lt;code&gt;wasm32-unknown-emscripten&lt;&#x2F;code&gt; привели в кроличью нору, и я понял что надо бросить это дело пока не поздно. Другая библиотека под названием geo-booleanop написана на чистом Rust 👍. Но проблема в том, что её исходный код основан на коде на JS, и она у меня падает при любых чуточку сложных, а иногда и при простых полигонах 👎.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, пока я с этим разбирался, то понял, что даже мой алгоритм с clipper&#x27;ом очень плохо работает, и на некоторых вещах ломается.&lt;&#x2F;p&gt;
&lt;p&gt;А я надеялся сделать веб-демку, чтобы кто угодно мог просто ввести координаты, и получить соответствующий код для шейдеров.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас думаю что главная проблема в алгоритме обрезания полигона прямой, ибо после этого действия полигон становится сложнее. Плюс сами алгоритмы даже в непогрешимой библиотеке clipper работают не очень хорошо с моими случаями.&lt;&#x2F;p&gt;
&lt;p&gt;А иногда возвращается треугольник, который состоит из 4 точек, и прикол этого треугольника в том, что эта 4 точка находится очень далеко, но то что она образует, имеет практически нулевую площадь. И для такого «треугольника» не находится подходящая разделяющая прямая. В общем одни сложности.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому щас я уже думаю, что вместо обрезания полигона прямой лучше сделать так:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Триангулируем полигон.&lt;&#x2F;li&gt;
&lt;li&gt;Ищем прямую, которая разделяет все треугольники таким образом, чтобы с обоих сторон было максимально одинаковое их количество, и чтобы сумма количества треугольников с двух сторон была как можно меньше (то есть если данная прямая пересекает треугольник, то нужно будет без обрезаний держать его с двух сторон).&lt;&#x2F;li&gt;
&lt;li&gt;Повторяем рекурсивно до тех пор, пока не дойдём до одного треугольника.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Таким образом у нас не создаются новые сложные фигуры и нету места багам (кроме алгоритма триангуляции, разумеется), и при этом сохраняется присущая скорость бинарного деления пространства.&lt;&#x2F;p&gt;
&lt;p&gt;А пока вот ссылка на &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;fast_point_in_polygon_for_glsl&quot;&gt;текущий код&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Что интересно, всё здесь я сделал где-то за 2-3 дня. Я думал что у меня на отлаживание багов уйдёт опять неделя, как это было с ускорением рендеринга ленты Мёбиуса. Но нет, очень часто всё это дело работало с первого раза. Не знаю уж чья тут заслуга — моя, потому что я уже очень много работаю с подобными алгоритмами в личных проектах; или заслуга Rust, потому что его система типов и философия согласной которой организовываются библиотеки, дают такой буст; а может олимпиадки расшатали мозги.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я смотрю, это снова в какой-то степени пост о неудаче... Что-то много в последнее время о неудачах пишу, может надо отдельный хэштэг сделать.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;8-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#8-03-2021&quot;&gt;#&lt;&#x2F;a&gt;8.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;342&quot;&gt;&lt;code&gt;tg&#x2F;342&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (26 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;343&quot;&gt;&lt;code&gt;tg&#x2F;343&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;342.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;strong&gt;Монопортал.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Мы привыкли что порталы состоят из двух частей, что они способны соединять вместе два мира. Но что если усомниться в этом основании и придумать портал, который состоит из одной или из трёх частей? Такое вообще возможно?!&lt;&#x2F;p&gt;
&lt;p&gt;Да! И сегодня я покажу портал, котоый состоит из одной части. Я называю его просто &lt;strong&gt;Монопортал&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Этот портал работает почти как зеркало, только без отзеркаливания! Видно, что написанный на стенке напротив текст он не зеркалит, и его можно спокойно читать.&lt;&#x2F;p&gt;
&lt;p&gt;По треугольнику видно, что в этот портал даже возможно зайти, и после выключения телепортации света видно, что треугольник-то всё время один, нигде копий не создаётся.&lt;&#x2F;p&gt;
&lt;p&gt;Если бы такой портал существовал в реальности, то вы бы могли через него видеть себя, как вас видят другие люди (без зеркалирования). Ещё через него вы бы могли водить с самим собой хороводы.&lt;&#x2F;p&gt;
&lt;p&gt;Монопотрал можно покрутить в браузере:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Данный монопортал условно состоит из одной части: на видео показывается как его можно сконструировать из двух обычных порталов. Называю я его монопорталом, потому что их телепортирующие поверхности объединены в одну, непрерывную поверхность, которая сохраняет непрерывность входящего света и объекта (я это называю сохранение целостности). Именно непрерывность поверхности и сохранение целостности и даёт возможность называть этот портал одним целым, чем-то состоящим из одной части.&lt;&#x2F;p&gt;
&lt;p&gt;И это можно называть порталом, а не чем-то зеркало-подобным, потому что в него возможно зайти. Зеркало же нельзя назвать порталом, потому что при входе в него вы будете сталкиваться сами с собой, и его нельзя сконструировать из обычных порталов, не нарушая «физику».&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;portal&quot;&gt;Исходники&lt;&#x2F;a&gt; (код пока что страшноват, скоро приведу его в порядок).&lt;&#x2F;p&gt;
&lt;p&gt;Наслаждайтесь)) А на подходе ещё куча других монопорталов и &lt;strong&gt;тройной портал&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Так же этот пост можно поддержать в &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1368633616725651463&quot;&gt;твиттере&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;13-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#13-03-2021&quot;&gt;#&lt;&#x2F;a&gt;13.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;351&quot;&gt;&lt;code&gt;tg&#x2F;351&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;352&quot;&gt;&lt;code&gt;tg&#x2F;352&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Я сделал интерфейс для визуального редактирования сцены с порталами. Через этот интерфейс можно менять матрицы объектов и они будут меняться риалтайм (сделаны через uniform у шейдеров); а можно менять объекты и код определения чего-то внутри них, код пересечения с ними; тогда изменения произойдут после нажатия кнопки &lt;code&gt;Recompile&lt;&#x2F;code&gt;, потому что нужно перекомпилировать шейдеры. На видео можно наблюдать этот интерфейс. Сцена здесь сделана полностью с помощью этого интерфейса.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;351.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Далее будет написано как и почему я это сделал.&lt;&#x2F;p&gt;
&lt;p&gt;В прошлом посте, в демке монопортала можно было наблюдать интерфейс, через который можно было смотреть сцену, крутить треугольник.&lt;&#x2F;p&gt;
&lt;p&gt;Данный интерфейс сделан на основе megaui, стандартного гуя юзаемой мною библиотеки (macroquad). Данный интерфейс является так называемым Immediate Mode GUI (далее буду называть imgui, не путать с библиотекой dear imgui), то есть, кратко говоря, он используется следующим образом:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;if ui.button(&amp;quot;Add&amp;quot;).clicked() {  
&lt;&#x2F;span&gt;&lt;span&gt;    array.push(...);  
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Никаких объектов, никакого ООП, никаких коллбэков, всё пишется напрямую, как будто кнопка всегда там существовала. Соответственно, каждый кадр он перестраивается заново.&lt;&#x2F;p&gt;
&lt;p&gt;Возвращаясь к теме, после монопортала я начал делать сцену тройного портала, но понял что я слишком часто запускаю компиляцию, даже когда мне надо повернуть матрицу на какой-то угол чтобы затестить как она будет выглядеть. И я понял что так продолжаться не может, мне нужен визуальный редактор матриц на основе того что я сделал в просмотре монопортала. И буквально за пару дней я такой визуальный редактор и сделал, и он работал. Я крутил слайдеры, а объекты крутились риалтайм. Риалтайм достигался за счёт того, что матрицы я передавал через униформы.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я понял, что могу вообще всё переделать на визуальный редактор, даже добавление и редактирование обычных объектов. Поэтому следующим шагом я сделал это.&lt;&#x2F;p&gt;
&lt;p&gt;К моменту как я это сделал, я опубликовал &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1369940146460762112&quot;&gt;твит&lt;&#x2F;a&gt;, где можно посмотреть как это выглядело.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас я пользуюсь &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt; для imgui&#x27;я, всем советую.&lt;&#x2F;p&gt;
&lt;p&gt;И тут я почувствовал силу. Мне очень сильно понравился imgui. Это какая-то магия, что можно настолько просто и быстро писать интерфейс. Я никогда в жизни не был способен сделать &lt;strong&gt;такой&lt;&#x2F;strong&gt; интерфейс так быстро. Это невероятная мощь, я теперь чувствую что для кучи своих других проектов могу использовать imgui, и получать результат быстрее и лучше.&lt;&#x2F;p&gt;
&lt;p&gt;Конечно, у imgui есть недостатки в виде производительности, и что он не такой гибкий, как обычный гуй, что он &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;issues&#x2F;94&quot;&gt;не может&lt;&#x2F;a&gt; при ресайзинге нормально работать, что в нём не так просто сделать табличное расположение итд. Но это всё не важно, это цена его простоты. И мне кажется надо эту цену принять, и подстраивать своё видение интерфейса под ограничения imgui, тогда разработка будет простой и быстрой.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас у меня много багов, и код генерации шейдеров не очень хороший, работаю над этим, но уже есть:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Редактор матриц: обычная матрица, умножение матриц, телепортацию матрицы через две другие матрицы.&lt;&#x2F;li&gt;
&lt;li&gt;Редактор объектов: (плоский, сложный) × (обычный, портал).&lt;&#x2F;li&gt;
&lt;li&gt;Редактор материалов: обычный, зеркальный, стекляный (последние 2 не тестировал).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Далее я планирую добавить:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Редактор униформов&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Чтобы в нём можно было задать униформ любого типа: число, булевая переменная, вещественное число, и далее этот униформ использовать в матрицах и в коде. Использование в матрицах нужно, чтобы было возможно задать такие же анимации, как и в сцене монопортала.&lt;&#x2F;p&gt;
&lt;p&gt;Далее я планирую нарисовать сцену монопортала через этот интерфейс, затем через него же сделаю портал Мёбиуса, и начну делать все остальные сцены, и показывать все остальные крутые порталы, которые я открыл. Ждите.&lt;&#x2F;p&gt;
&lt;p&gt;Как видите, я пробую новый формат: сначала говорю что сделал, а затем объясняю всю мотивацию. Как вам?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;14-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#14-03-2021&quot;&gt;#&lt;&#x2F;a&gt;14.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;353&quot;&gt;&lt;code&gt;tg&#x2F;353&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;718&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;115aa8ac9d28e87100.webp&quot; 
    onclick=&quot;full_screen(&#x27;353.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;353.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я тут немного посидел, пофиксил баги, добавил код, и теперь:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Даже портал Мёбиуса в этом визуальном редакторе можно задать и конфигурировать.&lt;&#x2F;li&gt;
&lt;li&gt;Работает материал стекла — сфера посередине. Не знаю зачем мне стекло, просто круто!&lt;&#x2F;li&gt;
&lt;li&gt;Работает материал зеркала — стена справа.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ох как хорошо с этим визуальным редактором, скоро великий &lt;del&gt;суп наварю&lt;&#x2F;del&gt; портальные сцены создам.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;18-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#18-03-2021&quot;&gt;#&lt;&#x2F;a&gt;18.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;354&quot;&gt;&lt;code&gt;tg&#x2F;354&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;357&quot;&gt;&lt;code&gt;tg&#x2F;357&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;358&quot;&gt;&lt;code&gt;tg&#x2F;358&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;359&quot;&gt;&lt;code&gt;tg&#x2F;359&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;362&quot;&gt;&lt;code&gt;tg&#x2F;362&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;364&quot;&gt;&lt;code&gt;tg&#x2F;364&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;365&quot;&gt;&lt;code&gt;tg&#x2F;365&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (6 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;790&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b9b62c2713371bb900.webp&quot; 
    onclick=&quot;full_screen(&#x27;354.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;354.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;portal-explorer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-explorer&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Portal Explorer&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Объявляю релиз Portal Explorer v0.1.0!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Portal Explorer&lt;&#x2F;strong&gt; — это в первую очередь программа для просмотра самых разных порталов. Во вторую очередь это программа для создания сцен с порталами через визуальный редактор. И я переделал все свои предыдущие порталы под этот формат.&lt;&#x2F;p&gt;
&lt;p&gt;Чего говорить, просто возьмите и зацените веб-демки: (лучше с компа)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#monoportal&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Монопортал&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal&quot;&gt;Монопортал&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;790&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f58b173ce5e65af400.webp&quot; 
    onclick=&quot;full_screen(&#x27;355.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;355.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;portal-miobiusa&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-miobiusa&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Портал Мёбиуса&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=mobius&quot;&gt;Портал Мёбиуса&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;790&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dc14c7330855a60800.webp&quot; 
    onclick=&quot;full_screen(&#x27;356.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;356.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;taimlaps&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#taimlaps&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Таймлапс&lt;&#x2F;h2&gt;
&lt;p&gt;А вот здесь можно увидеть таймлапс того как я делал сцену с монопорталом через интерфейс. Снимал до того пока у меня не вылетела программа :D, потом уже лень было снимать.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;357.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;chto-sdelal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-sdelal&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Что сделал&lt;&#x2F;h2&gt;
&lt;p&gt;Значит, я последние несколько дней фигачил весь этот крутой интерфейс, пилил фичи, и наконец сделал так, чтобы в интерфейсе можно было задавать ВСЁ:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Свободные переменные типов bool, int, float.&lt;&#x2F;li&gt;
&lt;li&gt;Вычисляемые переменные. То есть в интерфейсе пишешь формулу, а формула вычисляется в число.&lt;&#x2F;li&gt;
&lt;li&gt;Матрицы.&lt;&#x2F;li&gt;
&lt;li&gt;Матрицы через вычисляемые переменные.&lt;&#x2F;li&gt;
&lt;li&gt;Объекты.&lt;&#x2F;li&gt;
&lt;li&gt;Материалы.&lt;&#x2F;li&gt;
&lt;li&gt;Текстуры.&lt;&#x2F;li&gt;
&lt;li&gt;Пользовательский GLSL код.&lt;&#x2F;li&gt;
&lt;li&gt;Какие из свободных переменных пользователь может настраивать.&lt;&#x2F;li&gt;
&lt;li&gt;Этапы анимации (типо как собрать монопортал из дверного проёма и простых порталов).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ещё раз советую потыкаться в интерфейс, там есть возможность всё это настраивать, посмотрите, лучше тысячи слов.&lt;&#x2F;p&gt;
&lt;p&gt;Про задание объектов и матриц я уже рассказывал, расскажу про новое.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vychisliaemye-peremennye&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vychisliaemye-peremennye&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Вычисляемые переменные.&lt;&#x2F;h2&gt;
&lt;p&gt;У меня матрицы должны вычисляться в коде на расте, чтобы затем передаться в шейдеры через униформы. Так же у меня в есть места, где прямо в интерфейсе пишется код — это код шейдеров, например функция, определяющая внутри объекта ли точка, или для материала каким хитрым образом преобразовать цвет.&lt;&#x2F;p&gt;
&lt;p&gt;Так что очень хотелось бы засунуть вычисляемые переменные в шейдеры, но нельзя, надо делать отдельное решение. И я быстро нашёл отличную библиотеку &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;likebike&#x2F;fasteval&quot;&gt;fasteval&lt;&#x2F;a&gt;, которая как раз позволяет парсить строки с формулами и интерпретировать их. Обожаю Rust за то что мне за несколько часов удалось полностью подключить и встроить эту библиотеку в интерфейс.&lt;&#x2F;p&gt;
&lt;p&gt;Этапы анимации сделаны через работу со свободными переменными. Я просто для каждого этапа задаю будет ли эта переменная отправлена пользователю, или ей запишется какое-то специальное значение.&lt;&#x2F;p&gt;
&lt;p&gt;В комбинации с этим я и создаю то что можно наблюдать в демке монопортала.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так выглядят формулы и этапы анимации в интерфейсе:&lt;&#x2F;p&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;755f1124f64736e100.webp&quot; 
    onclick=&quot;full_screen(&#x27;359.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;359.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;949&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b9adf9017a7611ef00.webp&quot; 
    onclick=&quot;full_screen(&#x27;360.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;360.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;949&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;07552aa4670687fd00.webp&quot; 
    onclick=&quot;full_screen(&#x27;361.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;361.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;949&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(1, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(1, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;755f1124f64736e100.webp&quot; 
      id=&quot;demo_1_0&quot; 
      onclick=&quot;gallery_set(1, 0)&quot;
      width=&quot;1280&quot; height=&quot;949&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;b9adf9017a7611ef00.webp&quot; 
      id=&quot;demo_1_1&quot; 
      onclick=&quot;gallery_set(1, 1)&quot;
      width=&quot;1280&quot; height=&quot;949&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;07552aa4670687fd00.webp&quot; 
      id=&quot;demo_1_2&quot; 
      onclick=&quot;gallery_set(1, 2)&quot;
      width=&quot;1280&quot; height=&quot;949&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[1] = 0;
slide_count[1] = 3;
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;soobshcheniia-ob-oshibkakh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#soobshcheniia-ob-oshibkakh&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Сообщения об ошибках&lt;&#x2F;h2&gt;
&lt;p&gt;Ещё кое-что над чем я постарался — это &lt;strong&gt;сообщения об ошибках&lt;&#x2F;strong&gt;. Если где-то происходит ошибка, то в заголовке соответствующего хранилища пишется количество ошибок внутри. Для шейдеров парсятся сообщения об ошибках и определяется в каком конкретно участке кода пользователя произошла ошибка. Такая фича дорогого стоит при кодогенерации.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;506&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4bd700419cb6ed2200.webp&quot; 
    onclick=&quot;full_screen(&#x27;362.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;362.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;498&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3cbfb5af5341fe3400.webp&quot; 
    onclick=&quot;full_screen(&#x27;363.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;363.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;proektsiia-panini&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#proektsiia-panini&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Проекция Панини&lt;&#x2F;h2&gt;
&lt;p&gt;Так же я добавил очень хайповую &lt;strong&gt;Проекцию Панини&lt;&#x2F;strong&gt;. Эта проекция позволяет не очень сильно искривлять картинку (не сильнее, чем Fisheye), но при этом предоставлять очень большой угол обзора, даже больше 180°. Сделана она на основе проекции на сферу, а потом из этой проекции на цилиндр. Хитрая проекция в общем. В веб-демке чтобы её включить, нажмите «Camera Settings» и поставиьте галочку «Panini Projection».&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;364.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;zakliuchenie-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie-1&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h2&gt;
&lt;p&gt;Теперь я столько сцен наделаю: смещающий монопортал, вращающий на 180° монопортал, тройной портал, МОНОПОРТАЛ МЁБИУСА, угловой монопортал, портальная броня, порталы из замощений, ух.&lt;&#x2F;p&gt;
&lt;p&gt;Мне очень нравится что происходит, я прям кайфую от результата, последний раз так круто было когда я фигачил статью про свою раскладку.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё мне очень нравится egui, он так классно выглядит, и с ним так просто писать интерфейс. Ещё кайфую с того что могу без перекомпиляции менять очень много разных вещей.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще знаете, когда я всё это задумывал, я изначально думал: «Ну сделаю чтобы в структурках на расте можно было писать порталы, и чтобы это потом кодогенерилось. Но, блин, это такой гемор, столько всего надо сделать.», а тут я нафиг сделал не только это, но ещё и сделал ко всему этому интерфейс, я вообще даже не мечтал о таком результате, который есть сейчас.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё я щас думаю что со всем этим гуём я смогу прямо ОЧЕНЬ просто показать как таки &lt;strong&gt;построить&lt;&#x2F;strong&gt; портал в портале, без всех тех моих зубодробительных алгоритмов над полигонами на C++, думаю через этот гуй можно просто за час решить проблему портала в портале в том виде как она решена в моём видео на ютубе.&lt;&#x2F;p&gt;
&lt;p&gt;Вся эта интерактивность, она очень хороша. Класс.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, этот пост можно поддержать в &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1372318558584242178&quot;&gt;твиттере&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;19-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#19-03-2021&quot;&gt;#&lt;&#x2F;a&gt;19.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;366&quot;&gt;&lt;code&gt;tg&#x2F;366&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (5 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;366.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;strong&gt;Монопортал Мёбиуса.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Этот портал состоит из одной части и обладает одной поверхностью! Всё что в него входит просто телепортируется на другую его часть.&lt;&#x2F;p&gt;
&lt;p&gt;Обязательно заходите в веб демо (с компа), там вся анимация, описание, и там очень много ползунков можно покрутить:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=mobius_monoportal&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=mobius_monoportal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Интересное наблюдение, которое я совершил случайно: если крутить его вокруг локальной оси &lt;code&gt;Y&lt;&#x2F;code&gt;, то картинка не меняется!&lt;&#x2F;p&gt;
&lt;p&gt;Я не зря предыдущими постами рассказал что такое простой Монопортал, это было спланировано чтобы вы смогли лучше осознать текущий пост. По сути это тот же самый монопортал, только странной формы.&lt;&#x2F;p&gt;
&lt;p&gt;Кто помнит, в самом начале я как раз мечтал получить именно этот результат, и теперь у меня получилось!&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, других монопорталов Мёбиуса получить нельзя, даже если добавить зеркалирование по любой из осей, так что это единственный такой.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;20-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#20-03-2021&quot;&gt;#&lt;&#x2F;a&gt;20.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;368&quot;&gt;&lt;code&gt;tg&#x2F;368&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (11 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3fe508983902759800.webp&quot; 
    onclick=&quot;full_screen(&#x27;368.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;368.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;34808ccd8735c8e200.webp&quot; 
    onclick=&quot;full_screen(&#x27;369.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;369.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;469957d6e7d332c500.webp&quot; 
    onclick=&quot;full_screen(&#x27;370.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;370.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_3&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;4 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;25eb0bc8e9f2fc4e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;371.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;371.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_4&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;5 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c3f1ec7bb0f9ed9600.webp&quot; 
    onclick=&quot;full_screen(&#x27;372.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;372.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_5&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;6 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;12f84d7976dcc54d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;373.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;373.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_6&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;7 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c2bf7eb02a60148000.webp&quot; 
    onclick=&quot;full_screen(&#x27;374.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;374.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;871&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_2_7&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;8 &#x2F; 8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;ae80ce3c5d0ff7f200.webp&quot; 
    onclick=&quot;full_screen(&#x27;375.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;375.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;706&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×3.1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(2, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(2, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;3fe508983902759800.webp&quot; 
      id=&quot;demo_2_0&quot; 
      onclick=&quot;gallery_set(2, 0)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;34808ccd8735c8e200.webp&quot; 
      id=&quot;demo_2_1&quot; 
      onclick=&quot;gallery_set(2, 1)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;469957d6e7d332c500.webp&quot; 
      id=&quot;demo_2_2&quot; 
      onclick=&quot;gallery_set(2, 2)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;25eb0bc8e9f2fc4e00.webp&quot; 
      id=&quot;demo_2_3&quot; 
      onclick=&quot;gallery_set(2, 3)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;c3f1ec7bb0f9ed9600.webp&quot; 
      id=&quot;demo_2_4&quot; 
      onclick=&quot;gallery_set(2, 4)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;12f84d7976dcc54d00.webp&quot; 
      id=&quot;demo_2_5&quot; 
      onclick=&quot;gallery_set(2, 5)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;c2bf7eb02a60148000.webp&quot; 
      id=&quot;demo_2_6&quot; 
      onclick=&quot;gallery_set(2, 6)&quot;
      width=&quot;1280&quot; height=&quot;871&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 12.5%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;ae80ce3c5d0ff7f200.webp&quot; 
      id=&quot;demo_2_7&quot; 
      onclick=&quot;gallery_set(2, 7)&quot;
      width=&quot;1280&quot; height=&quot;706&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06931793956520665&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[2] = 0;
slide_count[2] = 8;
&lt;&#x2F;script&gt;
&lt;p&gt;&lt;strong&gt;Тройной портал.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Я уже усомнялся в том, что порталы могут иметь только две части, и показывал вам портал из &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#8032021&quot;&gt;одной части&lt;&#x2F;a&gt;, настало время показать портал из трёх частей, портал который может соединить три разных мира!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=triple_portal&quot;&gt;Веб демка&lt;&#x2F;a&gt; (лучше с ПК)&lt;&#x2F;p&gt;
&lt;p&gt;Данный портал можно собрать из трёх пар обычных порталов, так что всё вполне легально!) В центре касания трёх порталов никакой объект не ломается, и его не разрывает, это можно увидеть в демке.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь там ну вообще очень много всяких ползунков, обязательно поиграйтесь с ними, покрутите. Я лично сам залип на час где-то, круча эти ползунки, и исследуя какую красивую рекурсию могут порождать части тройного портала, направленные друг на друга.&lt;&#x2F;p&gt;
&lt;p&gt;Я прям не ожидал что получится настолько красиво. Тем более я и сам не видел всей этой красоты раньше, всё благодаря визуальному редактору и силе рейтрейсинга.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, лайфхак: чтобы приблизить можно сделать угол обзора 2°.&lt;&#x2F;p&gt;
&lt;p&gt;Меня можно поддержать в &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1373077780720668675&quot;&gt;твиттере&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Portal&#x2F;comments&#x2F;m8wgc3&#x2F;ever_interested_in_a_portal_gun_that_can_create&#x2F;&quot;&gt;реддите&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;pikabu.ru&#x2F;story&#x2F;portal_iz_tryoknh_chastey_8090309&quot;&gt;пикабу&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;21-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#21-03-2021&quot;&gt;#&lt;&#x2F;a&gt;21.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;380&quot;&gt;&lt;code&gt;tg&#x2F;380&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;386&quot;&gt;&lt;code&gt;tg&#x2F;386&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_3_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 4&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;fd6b0a668e13e49100.webp&quot; 
    onclick=&quot;full_screen(&#x27;380.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;380.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;913&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_3_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 4&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a3dedfc32ce18b0800.webp&quot; 
    onclick=&quot;full_screen(&#x27;381.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;381.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;913&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_3_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 4&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4a0699cf7eb7870700.webp&quot; 
    onclick=&quot;full_screen(&#x27;382.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;382.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;913&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_3_3&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;4 &#x2F; 4&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;859e3d80ac3fd9ef00.webp&quot; 
    onclick=&quot;full_screen(&#x27;383.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;383.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;913&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(3, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(3, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 25%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;fd6b0a668e13e49100.webp&quot; 
      id=&quot;demo_3_0&quot; 
      onclick=&quot;gallery_set(3, 0)&quot;
      width=&quot;1280&quot; height=&quot;913&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 25%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;a3dedfc32ce18b0800.webp&quot; 
      id=&quot;demo_3_1&quot; 
      onclick=&quot;gallery_set(3, 1)&quot;
      width=&quot;1280&quot; height=&quot;913&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 25%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;4a0699cf7eb7870700.webp&quot; 
      id=&quot;demo_3_2&quot; 
      onclick=&quot;gallery_set(3, 2)&quot;
      width=&quot;1280&quot; height=&quot;913&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 25%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;859e3d80ac3fd9ef00.webp&quot; 
      id=&quot;demo_3_3&quot; 
      onclick=&quot;gallery_set(3, 3)&quot;
      width=&quot;1280&quot; height=&quot;913&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[3] = 0;
slide_count[3] = 4;
&lt;&#x2F;script&gt;
&lt;p&gt;&lt;strong&gt;Портал в портале.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Не верю что говорю это, но я сделал веб-демку, где вы можете натурально взять один портал и засунуть его в другой под любым возможным углом и посмотреть что получится. И оно просто работает.&lt;&#x2F;p&gt;
&lt;p&gt;Кажется это самое лучшее что я когда-либо делал в жизни.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=portal_in_portal&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=portal_in_portal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Я это сделал в своём визуальном редакторе просто за пару часов. Я уже сюда случайно запостил скриншоты того как это выглядит, и решил не удалять раз уж запостил.&lt;&#x2F;p&gt;
&lt;p&gt;Я уже решал подобную проблему, но делал я это давно, и делал очень сложным способом — через всякие вычисления над полигонами. И это было настолько сложно, что за пару лет на разработки из полсилы в свободное время я смог сделать только то что можно наблюдать в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#31012021&quot;&gt;этом&lt;&#x2F;a&gt; посте. Другие типы вхождения портала в портал или вхождение тройного портала в тройной портал работали с дикими багами, которые настолько сложно осознать, что я до сих пор не до конца понимаю в чём проблема, хоть я это и визуализировал миллион раз.&lt;&#x2F;p&gt;
&lt;p&gt;У меня давно были мысли о том, что это должно как-то решаться проще, должен быть подход который всё упрощает. По аналогии с тем как брутфорс позволяет решить задачу просто, но не очень быстро. И вот, наконец, я данный способ нашёл.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь я ещё больше убеждаюсь в том, что важнее не упорный труд, а умение придумать обходной и хитрый путь, умение думать мозгами.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;384.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;385.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;24-03-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#24-03-2021&quot;&gt;#&lt;&#x2F;a&gt;24.03.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;387&quot;&gt;&lt;code&gt;tg&#x2F;387&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;388&quot;&gt;&lt;code&gt;tg&#x2F;388&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;389&quot;&gt;&lt;code&gt;tg&#x2F;389&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;А я тем временем немного законтрибьютил в опен-сурс. У меня в Portal Explorer&#x27;е были разные наработки, улучшалки юзаемых мною библиотек, и я решил вынести их отдельно, чтобы другие тоже могли пользоваться.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;quad-url&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#quad-url&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;quad-url&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;quad-url&quot;&gt;[crates.io]&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;quad-url&quot;&gt;[github]&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;quad-url&#x2F;?a&amp;amp;b=1&amp;amp;cd=e+f&amp;amp;gh#myhash&quot;&gt;[web demo]&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Это библиотека для чтения и изменения текущей ссылки (search параметры, hash) и для открытия ссылок в текущей или новой вкладке.&lt;&#x2F;p&gt;
&lt;p&gt;В моём Portal Explorer&#x27;е это используется для считывания сцены из урла: &lt;code&gt;?scene=triple_portal&lt;&#x2F;code&gt;, и я сейчас сделал так, что когда сцена открывается через меню «Load», то текущая ссылка меняется на имя этой сцены.&lt;&#x2F;p&gt;
&lt;p&gt;Так же с помощью неё я &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;egui-miniquad&#x2F;pull&#x2F;13&quot;&gt;пофиксил&lt;&#x2F;a&gt; открытие ссылок в egui-miniquad, а следовательно и в следующем крейте.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;egui-macroquad&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#egui-macroquad&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;egui-macroquad&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;egui-macroquad&quot;&gt;[crates.io]&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;egui-macroquad&quot;&gt;[github]&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;egui-macroquad&#x2F;&quot;&gt;[web demo]&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;not-fl3&#x2F;macroquad&quot;&gt;macroquad&lt;&#x2F;a&gt; славится своей простотой использования, и теперь с такой же простотой можно подключить очень крутую библиотеку для Immediate Mode GUI: egui.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, все мои последние вещи: Portal Explorer, Monoportal, Mobius Portal написаны с использованием macroquad, так что всем советую.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;540&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;261f92f119df5c2100.webp&quot; 
    onclick=&quot;full_screen(&#x27;389.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;389.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;469&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8f457252d866507e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;390.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;390.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;13-04-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#13-04-2021&quot;&gt;#&lt;&#x2F;a&gt;13.04.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;395&quot;&gt;&lt;code&gt;tg&#x2F;395&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (4 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Новости за последнее время:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Мою довольно нетривиальную фичу в &lt;code&gt;egui&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;pull&#x2F;257#event-4584292671&quot;&gt;замерджили&lt;&#x2F;a&gt;. Кратко говоря, данная фича позволяет любому виджету хранить произвольные данные в структуре интерфейса, которая передаётся везде. То есть не надо заводить какой-то свой &lt;code&gt;HashMap&lt;&#x2F;code&gt;, и протаскивать его во все функции. Сделано это при помощи хранения через трейт &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;any&#x2F;trait.Any.html&quot;&gt;Any&lt;&#x2F;a&gt; (как &lt;code&gt;TypeMap&lt;&#x2F;code&gt;). Так же важнейшей частью и челленджем этой фичи является решение проблему де&#x2F;сериализации этой штуки! Это нужно, чтобы после закрытия программы всё состояние интерфейса могло сохраняться и считываться из файла. Сделал это при помощи отложенной десериализации, которая ждёт когда пользователь вызовет &lt;code&gt;.get::&amp;lt;Type&amp;gt;()&lt;&#x2F;code&gt; с тем типом, который ему нужен. Автор &lt;code&gt;egui&lt;&#x2F;code&gt; говорит что мне надо вынести это как отдельный крейт, ибо сериализацию &lt;code&gt;Any&lt;&#x2F;code&gt; вроде так ещё не была решена. Надо будет заняться, но мой перфекционизм требует чтобы я сначала изучил все &lt;code&gt;TypeMap&lt;&#x2F;code&gt; библиотеки, и только потом релизил это как крейт... Эту фичу я сделал, так как интерфейс в Portal Explorer&#x27;е выглядел страшно с точки зрения кода, ибо я везде протаскивал свои &lt;code&gt;HashMap&lt;&#x2F;code&gt;&#x27;ы. Пока что без новых портальных сцен, потому что там у меня во всю идёт рефакторинг 🚧, ибо мой интерфейс уже не позволяет легко и быстро делать сложные портальные сцены.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Я оживил репошку &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ozkriff&#x2F;awesome-quads&quot;&gt;awesome-quads&lt;&#x2F;a&gt;, где собраны ссылки на проекты, которые основаны на либах &lt;code&gt;miniquad&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;macroquad&lt;&#x2F;code&gt;. По списку игр и прочих штук видно, что &lt;code&gt;macroquad&lt;&#x2F;code&gt; довольно популярен.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;🔵🟠 Portal Explorer &lt;a href=&quot;https:&#x2F;&#x2F;gamedev.rs&#x2F;news&#x2F;020&#x2F;#portal-explorer&quot;&gt;попал&lt;&#x2F;a&gt; в Rust GameDev ежемесячник! Спасибо Андрею &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;ozkriff_games&quot;&gt;@ozkriff_games&lt;&#x2F;a&gt; за эту возможность и координацию ✊.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;29-04-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#29-04-2021&quot;&gt;#&lt;&#x2F;a&gt;29.04.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;396&quot;&gt;&lt;code&gt;tg&#x2F;396&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;397&quot;&gt;&lt;code&gt;tg&#x2F;397&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;398&quot;&gt;&lt;code&gt;tg&#x2F;398&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;399&quot;&gt;&lt;code&gt;tg&#x2F;399&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;400&quot;&gt;&lt;code&gt;tg&#x2F;400&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;402&quot;&gt;&lt;code&gt;tg&#x2F;402&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (6 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;403&quot;&gt;&lt;code&gt;tg&#x2F;403&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;portal-explorer-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-explorer-2&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Portal Explorer 2&lt;&#x2F;h2&gt;
&lt;p&gt;Объявляю о релизе Portal Explorer v0.2.0!&lt;&#x2F;p&gt;
&lt;p&gt;Список изменений:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Отрефакторен интерфейс редактирования сцен.&lt;&#x2F;li&gt;
&lt;li&gt;Добавлена возможность менять камеру в меню просмотра сцены.&lt;&#x2F;li&gt;
&lt;li&gt;Появилась кнопка включения русского языка в меню.&lt;&#x2F;li&gt;
&lt;li&gt;Добавились описания конкретных этапов, у переменных теперь можно задавать человекочитаемые названия и описание вместо «user_a».&lt;&#x2F;li&gt;
&lt;li&gt;favicon&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Для каждой сцены:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Улучшено описание, добавлено описание на русском.&lt;&#x2F;li&gt;
&lt;li&gt;Возможность смотреть на портал под призмой того что он соединяет несколько миров.&lt;&#x2F;li&gt;
&lt;li&gt;В пункте «Explore» можно в один клик перемещать камеру на конкретный портал.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Изменения сцен:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Тройной портал — красивые комбинации настроек добавлены как отдельные этапы.&lt;&#x2F;li&gt;
&lt;li&gt;Портал в форме замыкания Хопфа (Цепной портал) — «новая» сцена.&lt;&#x2F;li&gt;
&lt;li&gt;Портал в портале — показал начало анимации, красивые комбинации настроек и даже анимации добавлены как отдельные этапы.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Веб-демка:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=triple_portal&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=triple_portal&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Выбирайте сцены в меню «Load». Даже если вы видели все эти сцены, советую пройтись по ним снова, и снова глянуть описание, ибо там много изменений и улучшений.&lt;&#x2F;p&gt;
&lt;p&gt;Пока что оптимизаций под мобилки нету, но я там пофиксил один баг, теперь вы должны суметь управлять интерфейсом через пальцы. Так что если у вас сильная мобила, можете попробовать запустить.&lt;&#x2F;p&gt;
&lt;p&gt;А ниже будет более подробно.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;otrefaktoren-interfeis-redaktirovania-stsen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#otrefaktoren-interfeis-redaktirovania-stsen&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Отрефакторен интерфейс редактированя сцен&lt;&#x2F;h2&gt;
&lt;p&gt;Напоминаю, что все сцены я делаю в визуальном редакторе, который сам и написал. Раньше у меня там было всё очень плохо с точки зрения User Experience, потому что:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Некоторые настройки сцены зависели от положения в массиве. Соответственно если я что-то удаляю или перемещаю, то это может сломаться.&lt;&#x2F;li&gt;
&lt;li&gt;Другие настройки были завязаны на строковых именах, соответственно нельзя переименовывать некоторые объекты, и вообще это как-то несерьёзно.&lt;&#x2F;li&gt;
&lt;li&gt;Нельзя было задать анонимный объект «на месте» (inline). Можно писать только имена существующих объектов. Соответственно если я хочу просто сделать минус к существующей переменной, то мне надо создавать новую именованную переменную.&lt;&#x2F;li&gt;
&lt;li&gt;Все этапы объяснения были сделаны так, что в настройках сцены для конкретной переменной (например, которая управляет цветом порталов — от чёрного к оранжевому&#x2F;синему) надо ставить switch в виде математической формулы, например &lt;code&gt;swith(stage, 0.0, progress, 1.0, 1.0 - progress, 0.0)&lt;&#x2F;code&gt;. Из-за того что разные анимации должны находиться в одной матрице или одной переменной, сложность и когнитивная нагрузка невероятно возрастали.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Поэтому сцены было делать очень сложно, и было много мест где могут произойти ошибки, особенно сложно было писать сцены которые что-то объясняют, ибо там много анимаций.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я решил ввести две новые фичи:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Чтобы каждый объект имел свой типизированный айдишник (вместо имени или положения в массиве).&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы значение любого объекта можно было задавать «на месте», без написания его имени и создания именованного объекта.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;И это было главной точкой моего рефакторинга. Чтобы заставить работать некоторые части, пришлось сделать тот контрибьюшн в &lt;code&gt;egui&lt;&#x2F;code&gt;, ибо у меня там становилось всё так сложно, что без той фичи было нельзя.&lt;&#x2F;p&gt;
&lt;p&gt;После того как я это сделал, мне пришлось вручную переделать все сцены под новый формат, в нём ведь идеология и принципы поменялись, просто так автоматически не переведёшь. Да и я хотел испытать его на практике и найти баги, заодно улучшить сцены.&lt;&#x2F;p&gt;
&lt;p&gt;В итоге, действительно разработка сцен стала в миллион раз проще, а типизированные айдишники очень спасают при кодинге (больше типов богу типов!).&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;1175&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9ae45efb6792565e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;398.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;398.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В самом верху находится меню «Objects», в нём лежат объекты. Объект требует одну матрицу, чтобы задать место где он будет находиться. Матрицу можно объявить инлайн, здесь это именно так и делается. Но здесь сделана «Param.» (параметрическая) матрица, у которой компоненты можно задавать формулами, которые зависят от каких-то параметров. В данном случае сделано чтобы положение матрицы высчитывалось на основании угла &lt;code&gt;x&lt;&#x2F;code&gt; по траектории окружности, который можно передать пользователю, например. Соответственно данный объект крутится по окружности. Видно что внутри матрицы заданы ещё инлайн формулы.&lt;&#x2F;p&gt;
&lt;p&gt;Представить такой же код с предыдущим подходом, когда под каждый такой чих надо создавать именованный объект — это ужас!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dobavlena-vozmozhnost-meniat-kameru-v-meniu-prosmotra-stseny&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dobavlena-vozmozhnost-meniat-kameru-v-meniu-prosmotra-stseny&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Добавлена возможность менять камеру в меню просмотра сцены&lt;&#x2F;h2&gt;
&lt;p&gt;Хочется:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Чтобы пользователь мог выбирать вокруг какого портала ему крутиться (может хочет рассмотреть его получше).&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы можно было выбирать внутри какой комнаты крутиться (для сцен, в которых есть несколько комнат&#x2F;миров). &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;И я такое реализовал, и это можно видеть подробно на данном видео.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;399.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;poiavilas-knopka-vkliucheniia-russkogo-iazyka-v-meniu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poiavilas-knopka-vkliucheniia-russkogo-iazyka-v-meniu&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Появилась кнопка включения русского языка в меню&lt;&#x2F;h2&gt;
&lt;p&gt;Сделал возможность задавать кучу всяких описаний и подсказок, и чтобы одним нажатием кнопки все описания превращались в русские.&lt;&#x2F;p&gt;
&lt;p&gt;Сделал я это как минимум потому что мне самому проще сначала написать всю лирику на русском, а потом переводить её на английский. А то когда было только английское описание, было очень сложно формулировать мысли.&lt;&#x2F;p&gt;
&lt;p&gt;Ну и вообще, русский как бы основной язык меня и моих читателей.&lt;&#x2F;p&gt;
&lt;p&gt;Правда, тогда для консистентности надо и весь остальной интерфейс перевести... Но, думаю, русские человеки смогут справиться с английским интерфейсом, им «не привыкать». Если станет совсем критично, буду думать о том, чтобы реализовать &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;issues&#x2F;136&quot;&gt;это ишью&lt;&#x2F;a&gt;, причём реализовать таким образом, чтобы и для пользователей библиотеки &lt;code&gt;egui&lt;&#x2F;code&gt; стало удобно задавать локализацию.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;361&quot;
    height=&quot;393&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;89ab52efcb25f13200.webp&quot; 
    onclick=&quot;full_screen(&#x27;400.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;400.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;367&quot;
    height=&quot;407&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f6e018910042a0d800.webp&quot; 
    onclick=&quot;full_screen(&#x27;401.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;401.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;portal-v-forme-zamykaniia-khopfa&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-v-forme-zamykaniia-khopfa&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Портал в форме замыкания Хопфа&lt;&#x2F;h2&gt;
&lt;p&gt;Знаете же как цепь соединяют? Вот это портал в данной форме. Наверное лучше было бы назвать его «Цепной портал».&lt;&#x2F;p&gt;
&lt;p&gt;Для того чтобы он работал необходимо чтобы два портала, соединённые в цепь, были двухсторонними (имеет телепортирующую поверхность как спереди, так и сзади).&lt;&#x2F;p&gt;
&lt;p&gt;В видео можно увидеть, что в месте пересечения двух порталов никакой телепортации не происходит, это потому что она компенсируется из-за прохождения дважды.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё в видео можно увидеть что существует два способа раскраски данного портала, и как раз благодаря одному можно понять куда и когда луч телепортируется.&lt;&#x2F;p&gt;
&lt;p&gt;Идею о таком портале подсказал один математик из твиттера, ему он очень понравился.&lt;&#x2F;p&gt;
&lt;p&gt;В прошлый раз я сделал его плохо и криво (видимо был расстроен реакцией на остальные порталы) и поэтому зарелизил его тяп-ляп, поэтому даже здесь не рассказал. В этот раз мне не сложно было сделать его хорошо, и вот он здесь.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;402.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;portal-v-portale&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-v-portale&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Портал в портале&lt;&#x2F;h2&gt;
&lt;p&gt;Эту сцену я тоже зарелизил не очень постаравшись, что-то даже не подумал о том, чтобы показать а как этот портал там оказался. Поэтому в этой версии сначала показывается что мы берём два связанных портала, затем разворачиваем синий и вставляем его в оранжевый.&lt;&#x2F;p&gt;
&lt;p&gt;Ну и ещё добавлены анимации и картинки. Хвала новому интерфейсу, добавить их было легче лёгкого!&lt;&#x2F;p&gt;
&lt;p&gt;И на этот раз я постарался над описанием в этой сцене, расписал там что означают цвета, при выключенной опции «Teleport light», и как они вычисляются. Включайте русский язык и читайте секцию «Как это работает», думаю в этот раз вы сможете лучше понять подкапотную магию.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;403.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;1-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1-05-2021&quot;&gt;#&lt;&#x2F;a&gt;1.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;404&quot;&gt;&lt;code&gt;tg&#x2F;404&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;405&quot;&gt;&lt;code&gt;tg&#x2F;405&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;406&quot;&gt;&lt;code&gt;tg&#x2F;406&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;407&quot;&gt;&lt;code&gt;tg&#x2F;407&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;А я вам принёс парочку новых прикольных монопорталов. В ближайшее время вас ждут ещё два (три&#x2F;четыре?) интересных монопортала.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vrashchaiushchii-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vrashchaiushchii-monoportal&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Вращающий монопортал&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;405.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_rotating&quot;&gt;Вращающий монопортал&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Этот монопортал собирается из обычного монопортала простым отражением одной его части. В реальности совершить такое отражение невозможно.&lt;&#x2F;p&gt;
&lt;p&gt;Результирующий монопортал вращает всё на 180°.&lt;&#x2F;p&gt;
&lt;p&gt;Так же, если войти в него, то вы станете отражённым (или мир для вас станет отражённым), как будто вы зашли в зеркало.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Идея:&lt;&#x2F;strong&gt; спасибо &lt;a href=&quot;http:&#x2F;&#x2F;t.me&#x2F;FindYouByUsernameAndContactYou&quot;&gt;myotra&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;n-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#n-monoportal&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;N-монопортал&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;406.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_n&quot;&gt;N-монопортал&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Это монопортал, который ведёт себя как будто он состоит из N частей, например из трёх, но на самом деле часть всегда одна!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;postroenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#postroenie&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Построение&lt;&#x2F;h3&gt;
&lt;p&gt;Берём обычный монопортал и просто вращаем его части, чтобы между ними был угол &lt;code&gt;360°&#x2F;Count&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;obychnyi-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obychnyi-monoportal&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Обычный монопортал&lt;&#x2F;h3&gt;
&lt;p&gt;Он получается при &lt;code&gt;Count = 2&lt;&#x2F;code&gt;, и это довольно очевидно, он выглядит как будто у него есть две части.&lt;&#x2F;p&gt;
&lt;p&gt;Если заменить порталы на зеркала (опция &lt;code&gt;Act as a mirror&lt;&#x2F;code&gt;), то он выглядит как обычное зеркало.&lt;&#x2F;p&gt;
&lt;p&gt;Если отзеркалить одну портальную часть (опция &lt;code&gt;Mirror one part vertically&lt;&#x2F;code&gt;) (это не то же самое что сделать её зеркалом!), то портал выглядит как обычный вращающий монопортал.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;troinoi-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#troinoi-monoportal&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Тройной монопортал&lt;&#x2F;h3&gt;
&lt;p&gt;Это звучит дико, но это похоже на ребёнка монопортала и тройной портала. Самое главное что в нём изображение сохраняет непрерывность и выглядит хорошо.&lt;&#x2F;p&gt;
&lt;p&gt;Зеркало здесь ломается посередине.&lt;&#x2F;p&gt;
&lt;p&gt;Отзеркаливание одной части тоже ломается.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chetvernoi-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chetvernoi-monoportal&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Четверной монопортал&lt;&#x2F;h3&gt;
&lt;p&gt;А тут уже зеркало не ломается. На самом деле зеркало ломается только для нечётных N.&lt;&#x2F;p&gt;
&lt;p&gt;Четвертинка посередине выглядит как обычный монопортал — через неё можно читать текст напротив вас, и это сохраняется даже если включить зеркало! Именно так и сделан предмет под названием «True mirror», он состоит из двух зеркал, стоящих друг напротив друга под 90°.&lt;&#x2F;p&gt;
&lt;p&gt;Аналогично для опции отзеркаливания одной части.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ostal-nye&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ostal-nye&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Остальные&lt;&#x2F;h3&gt;
&lt;p&gt;Остальные монопорталы ничем не выделяются.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-05-2021&quot;&gt;#&lt;&#x2F;a&gt;2.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;408&quot;&gt;&lt;code&gt;tg&#x2F;408&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (5 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;⚠️ На улицах Алматы были обнаружены спойлеры к будущим порталам Ильи&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a0e5a39a81ddca4c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;408.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;408.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;3-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#3-05-2021&quot;&gt;#&lt;&#x2F;a&gt;3.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;409&quot;&gt;&lt;code&gt;tg&#x2F;409&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;smeshchaiushchii-monoportal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smeshchaiushchii-monoportal&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Смещающий монопортал&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;409.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_offset&quot;&gt;Смещающий монопортал&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Этот портал работает как обычный монопортал, но дополнительно смещает всё на половину своей высоты.&lt;&#x2F;p&gt;
&lt;p&gt;Он может существовать только благодаря помощи поддерживающих порталов.&lt;&#x2F;p&gt;
&lt;p&gt;Идея такого портала случайно пришла ко мне в голову, когда я пытался заснуть. Хорошо что я всегда записываю мысли перед сном.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;smeshchaem-odnu-chast&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smeshchaem-odnu-chast&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Смещаем одну часть&lt;&#x2F;h3&gt;
&lt;p&gt;Берём обычный монопортал и смещаем его часть ровно на половину его высоты.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dobavliaem-podderzhivaiushchie-portaly-i-teleportiruem-etu-chast&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dobavliaem-podderzhivaiushchie-portaly-i-teleportiruem-etu-chast&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Добавляем поддерживающие порталы и телепортируем эту часть&lt;&#x2F;h3&gt;
&lt;p&gt;Под конец этой анимации портал станет непрерывным.&lt;&#x2F;p&gt;
&lt;p&gt;Попробуйте прокрутить эту анимацию с выключенной опцией «Teleport light». Зелёный цвет означает телепортированный портал.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;issledovanie-smeshcheniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#issledovanie-smeshcheniia&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Исследование смещения&lt;&#x2F;h3&gt;
&lt;p&gt;Портал получается непрерывным только для смещения 0 (обычный монопортал) и 0.5 от высоты портала.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;delaem-portal-bol-she&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delaem-portal-bol-she&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Делаем портал больше&lt;&#x2F;h3&gt;
&lt;p&gt;Можно видеть что с большим порталом пол и потолок встречаются ровно посередине высоты комнаты.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;5-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#5-05-2021&quot;&gt;#&lt;&#x2F;a&gt;5.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;412&quot;&gt;&lt;code&gt;tg&#x2F;412&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;413&quot;&gt;&lt;code&gt;tg&#x2F;413&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;414&quot;&gt;&lt;code&gt;tg&#x2F;414&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;415&quot;&gt;&lt;code&gt;tg&#x2F;415&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;416&quot;&gt;&lt;code&gt;tg&#x2F;416&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;vvedenie-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie-2&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Введение&lt;&#x2F;h2&gt;
&lt;p&gt;Я закончил все фундаментальные монопорталы!&lt;&#x2F;p&gt;
&lt;p&gt;Для тех кто не знает или забыл: напоминаю что монопортал — это портал, который состоит из одной непрерывной телепортирующей поверхности. Обычный монопортал не такой интересный, но вот всё что идёт дальше — небольшой вынос мозга, потому что непонятно как некоторые вещи можно засунуть в одну часть.&lt;&#x2F;p&gt;
&lt;p&gt;В частности, в данном посте, я расскажу про масштабирующие монопорталы. Суть их в том, что в одной непрерывной поверхности имеется возможность увеличивать или уменьшать входящий объект. Прежде чем читать далее попробуйте сами решить эту задачу. Возможно ли его построить? Как его сделать так чтобы он не разрывал объекты и сохранял прямые линии и углы?&lt;&#x2F;p&gt;
&lt;p&gt;Звучит дико, но такое на самом деле возможно, и его на самом деле возможно собрать из обычных плоских порталов без всяких новых технологий равномерного уменьшения и прочего.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smeshchaiushchii-monoportal-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smeshchaiushchii-monoportal-2&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Смещающий монопортал 2&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;414.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_offset2&quot;&gt;Смещающий монопортал 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Прежде чем рассказать о другом масштабирующем портале, я должен показать другой способ построения смещающего монопортала, ведь именно он будет использован далее. Он показан на видео и он довольно простой. Кстати, намного проще оригинального метода с всей этой телепортацией. Но оригинальный хорош тем, что показывает что другого смещения кроме 0.5 и 0 не существует.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;masshtabiruiushchii-monoportal-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#masshtabiruiushchii-monoportal-2&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Масштабирующий монопортал 2&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;415.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_scale2&quot;&gt;Масштабирующий монопортал 2&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Он собран из смещающего монопортала, верхняя часть которого превращена в трапецию и в соответствии с этим изменился масштаб всего что от неё зависело.&lt;&#x2F;p&gt;
&lt;p&gt;Данный портал состоит из одной непрерывной поверхности, при вхождении в которую возможно как увеличиваться так и уменьшаться.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zakliuchenie-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie-2&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h2&gt;
&lt;p&gt;Тут можно наблюдать интересную закономерность — существует два масштабирующих монопортала, и оба основаны на других монопорталах: смещающем и вращающем. Тогда появляются открытые вопросы:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Возможно ли создать масштабирующий монопортал, который основан на обычном монопортале?&lt;&#x2F;li&gt;
&lt;li&gt;Возможно ли создать масштабирующий монопортал без поддерживающих порталов?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Предварительный ответ — нет, но кто знает)&lt;&#x2F;p&gt;
&lt;h1 id=&quot;6-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#6-05-2021&quot;&gt;#&lt;&#x2F;a&gt;6.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;417&quot;&gt;&lt;code&gt;tg&#x2F;417&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;420&quot;&gt;&lt;code&gt;tg&#x2F;420&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (10 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;421&quot;&gt;&lt;code&gt;tg&#x2F;421&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (13 💬)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;portal-v-forme-logarifmicheskoi-spirali&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-v-forme-logarifmicheskoi-spirali&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Портал в форме логарифмической спирали&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=monoportal_log&quot;&gt;Портал в форме логарифмической спирали&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Это просто вращающий масштабирующий монопортал, о котором я ранее рассказывал, только в немного другой форме. Если путешествовать по нему кругами, то будет казаться что вы поднимаетесь или опускаетесь по логарифмической спирали.&lt;&#x2F;p&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_4_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3166b4e3755beb8500.webp&quot; 
    onclick=&quot;full_screen(&#x27;417.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;417.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;720&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_4_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e287ad8f557f13c000.webp&quot; 
    onclick=&quot;full_screen(&#x27;418.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;418.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;720&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_4_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4a2e4b7f14ff1f7400.webp&quot; 
    onclick=&quot;full_screen(&#x27;419.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;419.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;720&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(4, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(4, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;3166b4e3755beb8500.webp&quot; 
      id=&quot;demo_4_0&quot; 
      onclick=&quot;gallery_set(4, 0)&quot;
      width=&quot;1280&quot; height=&quot;720&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;e287ad8f557f13c000.webp&quot; 
      id=&quot;demo_4_1&quot; 
      onclick=&quot;gallery_set(4, 1)&quot;
      width=&quot;1280&quot; height=&quot;720&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 33.333333333333336%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;4a2e4b7f14ff1f7400.webp&quot; 
      id=&quot;demo_4_2&quot; 
      onclick=&quot;gallery_set(4, 2)&quot;
      width=&quot;1280&quot; height=&quot;720&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[4] = 0;
slide_count[4] = 3;
&lt;&#x2F;script&gt;
&lt;h2 id=&quot;opros&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opros&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Опрос&lt;&#x2F;h2&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;telegram.org&#x2F;js&#x2F;telegram-widget.js?15&quot; data-telegram-post=&quot;optozorax_dev&amp;#x2F;420&quot; data-width=&quot;100%&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;rezul-tat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rezul-tat&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Результат&lt;&#x2F;h2&gt;
&lt;p&gt;Всем спасибо за участие, совпало с моим выбором на 3&#x2F;4, я не ожидал что обычный монопортал вырвется так вперёд)&lt;&#x2F;p&gt;
&lt;p&gt;Опубликовал в твиттере: (заходите по ссылке, там тред)&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Thread about portals with only one part (monoportals) which I discovered. With web demos and explanations.&lt;br&gt;&lt;br&gt;Presented all known kinds: Mobius, N-monoportal, logarithmic spiral, regular, offsetting, rotating, scaling.&lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;portal_explorer?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#portal_explorer&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;35BIlCNydA&quot;&gt;pic.twitter.com&#x2F;35BIlCNydA&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; ilya sheprut (@optozorax) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1390241834232913923?ref_src=twsrc%5Etfw&quot;&gt;May 6, 2021&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;В этот раз я попробовал публиковаться по-другому:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Много вещей за один раз.&lt;&#x2F;li&gt;
&lt;li&gt;Видео очень короткие, показывают только суть, без конструирования.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;11-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#11-05-2021&quot;&gt;#&lt;&#x2F;a&gt;11.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;423&quot;&gt;&lt;code&gt;tg&#x2F;423&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;424&quot;&gt;&lt;code&gt;tg&#x2F;424&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;425&quot;&gt;&lt;code&gt;tg&#x2F;425&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;427&quot;&gt;&lt;code&gt;tg&#x2F;427&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;430&quot;&gt;&lt;code&gt;tg&#x2F;430&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;431&quot;&gt;&lt;code&gt;tg&#x2F;431&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (2 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;432&quot;&gt;&lt;code&gt;tg&#x2F;432&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;433&quot;&gt;&lt;code&gt;tg&#x2F;433&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (13 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;434&quot;&gt;&lt;code&gt;tg&#x2F;434&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (17 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;435&quot;&gt;&lt;code&gt;tg&#x2F;435&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;436&quot;&gt;&lt;code&gt;tg&#x2F;436&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (7 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;vvedenie-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie-3&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Введение&lt;&#x2F;h2&gt;
&lt;p&gt;Снова у меня новые сцены. Но теперь они не про какие-то мозговыносящие вещи, а про базовые. Я знаю что много людей не понимает что у меня тут вообще происходит, поэтому такие объясняющие сцены важны. Я планирую на основе этих сцен создать объясняющее видео про портал в портале и выложить его на Ютуб: собрать все объяснения и мои комментарии в одно место, чтобы не было разрозненно как в этом канале.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;osnovy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#osnovy&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Основы&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;644&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;602894ae423f6a0800.webp&quot; 
    onclick=&quot;full_screen(&#x27;424.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;424.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=basics&quot;&gt;Основы&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;В этой сцене рассказывается что такое портал, откуда он взялся и как его можно создать. Сцена подойдёт для тех кто не играл в Portal&#x2F;Portal 2.&lt;&#x2F;p&gt;
&lt;p&gt;Очень часто порталы сравнивают с зеркалами, поэтому имеется опция «Mirror», которая позволяет отключить телепортацию света и объектов и просто превратить порталы в зеркала.&lt;&#x2F;p&gt;
&lt;p&gt;Для нас привычна концепция двери — она позволяет перейти из одной комнаты в другую. Но куда важнее не сама дверь, а дверной проём, потому что именно он соединяет две комнаты, разделённые стенами.&lt;&#x2F;p&gt;
&lt;p&gt;Видимо идея портала была вдохновлена именно им.&lt;&#x2F;p&gt;
&lt;p&gt;В этой сцене показаны две комнаты, соединённые дверным проёмом.&lt;&#x2F;p&gt;
&lt;p&gt;Подобно тому как дверной проём может соединять две комнаты, обычный портал может соединять два мира:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;644&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;ad8686276ebdd00c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;425.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;425.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;644&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b2b417215e26050200.webp&quot; 
    onclick=&quot;full_screen(&#x27;426.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;426.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Можно сказать что портал — это дверной проём между пространствами.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;portaly-v-odnom-mire&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portaly-v-odnom-mire&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Порталы в одном мире&lt;&#x2F;h2&gt;
&lt;p&gt;Интересности начинаются когда мы помещаем порталы в один мир.&lt;&#x2F;p&gt;
&lt;p&gt;В данной сцене показаны два портала друг напротив друга. Треугольник всё время двигается прямо, но благодаря возможности порталов телепортировать, его движение зацикливается.&lt;&#x2F;p&gt;
&lt;p&gt;Заметьте, что когда мы смотрим в голубой портал, мы видим снова только голубой портал; аналогично с оранжевым; а у изображения треугольника мы всегда видим спину.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь попробуйте заменить порталы на зеркала. Теперь в каждом зеркале мы видим чередование голубого и оранжевого зеркала; а у изображения треугольника чередуется перед и спина.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;427.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;643&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;cc6cb6ffe0f6554400.webp&quot; 
    onclick=&quot;full_screen(&#x27;428.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;428.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;643&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f24756ca09d0ff6d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;429.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;429.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это просто немного другое расположение двух порталов в одном мире:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;430.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;При &lt;code&gt;Distance = 0&lt;&#x2F;code&gt; получается &lt;code&gt;4-монопортал&lt;&#x2F;code&gt;, за подробностями смотрите в сцену &lt;code&gt;N-monoportal&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dvernoi-proiom&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dvernoi-proiom&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Дверной проём&lt;&#x2F;h2&gt;
&lt;p&gt;Из любого дверного проёма можно создать порталы.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;431.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Можно сказать как будто мы рвём пространство-время между половинками дверного проёма.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;model-skorosti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#model-skorosti&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Модель скорости&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;432.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=speed_model&quot;&gt;Модель скорости&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;В игре Portal порталы не двигались, они размещались только на неподвижных поверхностях, таково было ограничение физического движка. Поэтому люди слабо представляют как должны себя вести двигающиеся порталы.&lt;&#x2F;p&gt;
&lt;p&gt;В этой сцене показан правильный ответ на вопрос о том как двигающийся портал должен себя вести.&lt;&#x2F;p&gt;
&lt;p&gt;Именно такое поведение считается правильным в &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=B19nlhbA7-E&quot;&gt;Минутке физики&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Если рассмотреть разные точки зрения на движение, то кажется как будто движение портала аналогично движению всего пространства. И в одних случаях пространство и объекты внутри него либо всегда подвижны либо всегда неподвижны до или после телепортации.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;odinakovaia-forma&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#odinakovaia-forma&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Одинаковая форма&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;433.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=same_shape&quot;&gt;Одинаковая форма&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Портал обязан иметь одинаковую форму с двух сторон.&lt;&#x2F;strong&gt; Иначе получается некорректный портал. В этой сцене можно видеть что случается когда портал имеет разную форму в разных своих частях: с одной стороны телепортация треугольника может выглядеть хорошо, а с другой она уже сломана.&lt;&#x2F;p&gt;
&lt;p&gt;Данный закон пригождается при телепортации портала через другой портал.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;portal-v-portale-dve-pary&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-v-portale-dve-pary&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Портал в портале: две пары&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;434.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=portal_in_portal_two_pairs&quot;&gt;Портал в портале: две пары&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Вопрос «Что будет если поместить портал в портал?» можно решить по-другому, не создавая никаких парадоксов, просто взяв на два портала больше.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте возьмём две разные пары порталов: треугольные и круглые. Тогда можно поместить треугольный портал в круглый портал и задача будет очень легко решена. Конечно, это не честное решение, но оно поможет лучше понять логику истинного портала в портале.&lt;&#x2F;p&gt;
&lt;p&gt;Это можно наблюдать перемещая ползунок «Progress».&lt;&#x2F;p&gt;
&lt;p&gt;А теперь попробуйте сделать это с выключенной опцией «Teleport light».&lt;&#x2F;p&gt;
&lt;p&gt;Теперь видно, что нетелепортированный портал — красный, а телепортированный — зелёный. Причём такая же раскраска присутствует на неподвижной треугольной части. Так происходит потому что каждый портал обязан сохранять свою форму с двух сторон. &lt;strong&gt;Если портал отрезается с одной стороны, он должен отрезаться с другой стороны.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;По сути красный и зелёный портал — два разных портала, которые просто находятся рядом с одной стороны и соединяются через круглый портал с другой стороны.&lt;&#x2F;p&gt;
&lt;p&gt;В этом и состоит суть телепортации портала — мы из исходного портала отрезаем кусочек, чтобы данный кусочек входил полностью в круглый портал и не создавал никаких проблем.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zakliuchenie-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie-3&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h2&gt;
&lt;p&gt;Так же по сцене с моделью скорости можно видеть появление новой фичи: автоматические анимации, которые работают за счёт обращения к текущему времени. Я обновил сцену «Портал в портале» в соответствии с этой фичей — это можно посмотреть в этапах «Анимация 1» и «Анимация 2».&lt;&#x2F;p&gt;
&lt;p&gt;На этом всё на сегодня. Кстати, привет всем новым подписчикам, и огромное спасибо &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;post&#x2F;UgwyCsICpnaMe1CAfrN4AaABCQ&quot;&gt;ТехноШаману&lt;&#x2F;a&gt;. Такая поддержка очень мотивирует!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;31-05-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#31-05-2021&quot;&gt;#&lt;&#x2F;a&gt;31.05.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;439&quot;&gt;&lt;code&gt;tg&#x2F;439&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;440&quot;&gt;&lt;code&gt;tg&#x2F;440&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;441&quot;&gt;&lt;code&gt;tg&#x2F;441&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;442&quot;&gt;&lt;code&gt;tg&#x2F;442&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;443&quot;&gt;&lt;code&gt;tg&#x2F;443&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (3 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;444&quot;&gt;&lt;code&gt;tg&#x2F;444&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;vvedenie-4&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie-4&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Введение&lt;&#x2F;h2&gt;
&lt;p&gt;Я всё ещё хочу создать видео где объясняю портал в портале. Сначала расписал довольно подробный план для начала и конца видео. А на середине начались проблемы. До этого я думал что всех имеющихся анимаций и сцен хватит для того чтобы снять подробное и понятное видео, но во время написания плана видео, осознал что нет.&lt;&#x2F;p&gt;
&lt;p&gt;Как раз таки середина и переход от простейших понятий до самого решения задачи поставили меня в ступор. Я думал что бессилен, но потом вышел на ходьбу (я недавно начал ходить каждый день по 8к шагов), и во время ходьбы решил продумать все эти проблемы. Отходил час, придумал и собрал все паззлы в одну единую картину, теперь у меня есть чёткий и понятный план. Почему-то во время ходьбы мне думается намного лучше, чем во время сидения на месте. Может ещё помогает что во время ходьбы на улице не позалипаешь в телефон и не увидишь счётчик уведомлений.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я распланировал ещё кучу других объясняющих сцен, и когда закончу их, начну дальше писать план и может однажды доживу до озвучки, монтажа и дай бог до релиза.&lt;&#x2F;p&gt;
&lt;p&gt;А ещё я подумал что надо бы вам приносить новости почаще, так что сегодня я сделал одну сцену из списка и сразу о ней расскажу.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;razrezaiushchaia-prizma&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#razrezaiushchaia-prizma&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Разрезающая призма&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=cut_prism&quot;&gt;Сцена разрезающая призма.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Это сцена показывает что один портал всегда можно представить как несколько порталов и что порталы обрезают входящие объекты на своей границе.&lt;&#x2F;p&gt;
&lt;p&gt;Понимание данного свойства порталов может быть полезно для понимания того как работает сцена &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#11052021&quot;&gt;«Портал в портале: две пары»&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;440.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Давайте возьмём пару обычных порталов и объект, который в них входит. У данного объекта есть скорость, и он может двигаться в соответствии с изменением времени.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;441.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Мы можем разрезать голубой портал на две части одной прямой. Так как порталы обязаны сохранять одинаковую форму с двух сторон, мы должны с другой стороны сделать то же самое. В итоге мы имеем две пары &lt;strong&gt;разных&lt;&#x2F;strong&gt; порталов: красную и зелёную.&lt;&#x2F;p&gt;
&lt;p&gt;Вы можете перемещать положение прямой на портале.&lt;&#x2F;p&gt;
&lt;p&gt;Главное что здесь нужно увидеть - хоть у нас и есть 2 пары разных порталов, они в итоге образуют один непрерывный портал, потому что находятся физически рядом. Так как мы составили один портал из двух, у нас не поменялось &lt;strong&gt;ничего&lt;&#x2F;strong&gt; - ни картинка, ни телепортация объекта. &lt;em&gt;Поэтому данное разрезание существует только в наших головах, и не существует способа по внешним признакам опознать когда портал является единым или состоит из множества связанных частей.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Таким же образом можно разрезать этот портал ещё на бесконечное число других порталов, и вообще можно считать каждый его атом отдельным порталом.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Главное чтобы сохранялось их относительное положение на входе и на выходе.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;442.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Граница двух порталов должна вести себя как нож, который на входе обрезает все объекты, входящие в него. Здесь ножи представлены серым цветом.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Этот нож обязан быть направлен по направлению скорости входящего объекта.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;На выходе объект восстанавливается обратно, поэтому его разрезание не меняет ничего.&lt;&#x2F;p&gt;
&lt;p&gt;Видно, что раз порталы обрезают объект по внутренней границе, то они должны так же обрезать его по внешней границе. В &lt;del&gt;реальной жизни&lt;&#x2F;del&gt; игре границы порталов нас не убивают, потому что на границах стоят физические объекты. Как, например, здесь голубая и оранжевая обводка вокруг портала.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-06-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-06-2021&quot;&gt;#&lt;&#x2F;a&gt;2.06.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;445&quot;&gt;&lt;code&gt;tg&#x2F;445&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;446&quot;&gt;&lt;code&gt;tg&#x2F;446&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;447&quot;&gt;&lt;code&gt;tg&#x2F;447&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (1 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;448&quot;&gt;&lt;code&gt;tg&#x2F;448&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Я продолжаю делать и улучшать сцены для предстоящего видео на ютубе, и сегодня я вносил дополнения в сцену «Портал в портале».&lt;&#x2F;p&gt;
&lt;p&gt;Когда я показываю портал в портале, никто не понимает что он из себя представляет, и все говорят что-то вроде: «если туда зайти, то тебя уничтожит». Поэтому я сделал сцену, которая показывает что же на самом деле будет с объектом, который войдёт в ту самую бесконечную воронку.&lt;&#x2F;p&gt;
&lt;p&gt;В этой воронке вы просто будете видеть много изображений этого объекта. Он не будет дублирован. Он не уничтожит сам себя, там есть много места развернуться. Так что ничего сверхестественного.&lt;&#x2F;p&gt;
&lt;p&gt;Здесь объект показан в виде круга, у которого разные цвета на разных сторонах и выделено направление.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;446.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Следующее изменение - можно включить режим при котором показываются все степени телепортации портала в портале, без фильтрации по тому какая часть телепортирована или нет. Тут я ничего объяснять не буду, ибо чтобы хоть что-то здесь объяснить, надо уже тыкать пальцем и говорить голосом риалтайм, так что оставим это на этап видеоблога, для которого данная вещь и создавалась. Так что просто наблюдайте видео и смотрите как это прикольно работает в анимациях.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;447.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;2-06-2021-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2-06-2021-2&quot;&gt;#&lt;&#x2F;a&gt;2.06.2021 2&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;449&quot;&gt;&lt;code&gt;tg&#x2F;449&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;450&quot;&gt;&lt;code&gt;tg&#x2F;450&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;451&quot;&gt;&lt;code&gt;tg&#x2F;451&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (15 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;452&quot;&gt;&lt;code&gt;tg&#x2F;452&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=moving_doorway&quot;&gt;Сцена «Двигающийся дверной проём».&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Так как порталы созданы из дверного проёма, значит любые портальные законы, который применяется к порталами соединённым спинами, должны совпадать с поведением дверного проёма. Это аксиома порталов.&lt;&#x2F;p&gt;
&lt;p&gt;В данной сцене показывается эта аксиома с точки зрения движения порталов.&lt;&#x2F;p&gt;
&lt;p&gt;Главная суть данной сцены в том, что вход и выход должны одновременно совершать одинаковые движения, чтобы относительно друг друга они не двигались, тогда они будут вести себя как обычный дверной проём. Это объясняет почему вращение земли никак не мешает порталам.&lt;&#x2F;p&gt;
&lt;p&gt;Сложности начинаются когда порталы обладают скоростью относительно друг друга. Но это уже было показано ранее в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#11052021&quot;&gt;11.05.2021&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Если дверной проём двигается вокруг неподвижного объекта, то точно так же порталы могут двигаться вокруг объекта не придавая ему скорости.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;450.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Если дверной проём может вращаться вокруг объекта, то порталы так же могут вращаться вокруг этого объекта, не придавая ему скорости.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;451.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;3-06-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#3-06-2021&quot;&gt;#&lt;&#x2F;a&gt;3.06.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;453&quot;&gt;&lt;code&gt;tg&#x2F;453&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;454&quot;&gt;&lt;code&gt;tg&#x2F;454&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;455&quot;&gt;&lt;code&gt;tg&#x2F;455&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;456&quot;&gt;&lt;code&gt;tg&#x2F;456&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (108 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;457&quot;&gt;&lt;code&gt;tg&#x2F;457&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;По поводу прошлой сцены у читателей возник вопрос по поводу того что если один портал будет двигаться ускоренно (например, вращаться), а другой - нет? Как себя будет вести телепортированный объект? Ибо с неускоренным движением всё понятно, я уже это показывал в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#11052021&quot;&gt;11.05.2021&lt;&#x2F;a&gt;, там объект двигается согласно Первому Закону Ньютона - равномерно и прямолинейно.&lt;&#x2F;p&gt;
&lt;p&gt;У меня есть два варианта развития событий с ускоренными порталами: дальнодействие и не-дальнодействие. Лучше будет понять на анимациях.&lt;&#x2F;p&gt;
&lt;p&gt;Я считаю что не-дальнодействие - правильный вариант, но может у вас есть свои аргументы, приглашаю в комментарии обсудить это!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=non_linear&quot;&gt;Ссылка на сцену.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dal-nodeistvie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dal-nodeistvie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Дальнодействие&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;454.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;strong&gt;Дальнодействие.&lt;&#x2F;strong&gt; Тут оранжевый портал двигаем мы, но вот объект стоит неподвижно, и портал его поглощает. Если смотреть в оранжевый портал, то объект там так и продолжает стоять на месте, а если смотреть из синего, то объект вращается без действия всяких сил. Дальнодействие!&lt;&#x2F;p&gt;
&lt;p&gt;Мне это совсем не нравится, ибо такое дальнодействие - плохо. Представьте, вы вышли из портала на другой планете, а космический кот уронил его. Всё, жизнь великого рейнджера закончилась.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ne-dal-nodeistvie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ne-dal-nodeistvie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Не-дальнодействие&lt;&#x2F;h2&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;455.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;&lt;strong&gt;Не-дальнодействие.&lt;&#x2F;strong&gt; Если смотреть из синего портала, то объект «вращается» только когда с одной стороны он неподвижен, так что это норм, вращается лишь картинка, затем во время касания телепортирующей поверхности он продолжает на самом деле вращаться, а когда касание этой поверхности заканчивается, он двигается с приобретённой скоростью, и со своим моментом импульса. После того как он телепортировался, он сам по себе и подчиняется Первому Закону Ньютона.&lt;&#x2F;p&gt;
&lt;p&gt;Это мне нравится. Но у этого варианта есть минус. Если раньше телепортирующая поверхность была только чем-то вроде абстракции, чтобы легче было понимать из чего состоит портал, и чтобы проще было его программировать, то теперь телепортирующая поверхность становится реальной вещью, форму которой можно измерить. То есть раньше порталы натурально склеивали пространство, и невозможно было обнаружить швов или границ этой склейки, а теперь этот невидимый шов мы можем измерить ровно таким же вращением.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;opros-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#opros-1&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Опрос&lt;&#x2F;h2&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;telegram.org&#x2F;js&#x2F;telegram-widget.js?15&quot; data-telegram-post=&quot;optozorax_dev&amp;#x2F;456&quot; data-width=&quot;100%&quot;&gt;&lt;&#x2F;script&gt;
&lt;h1 id=&quot;4-06-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#4-06-2021&quot;&gt;#&lt;&#x2F;a&gt;4.06.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;458&quot;&gt;&lt;code&gt;tg&#x2F;458&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (7 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;459&quot;&gt;&lt;code&gt;tg&#x2F;459&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;458.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Чтобы понимать как работают непрерывные процессы, бывает удобно представить их в виде дискретных. В данной сцене показывается это для телепортации.&lt;&#x2F;p&gt;
&lt;p&gt;Ссылка на сцену в веб-демке: &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=cut_plane&quot;&gt;https:&#x2F;&#x2F;optozorax.github.io&#x2F;portal&#x2F;?scene=cut_plane&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Можно определить телепортацию так: всё что полностью вошло в портал, отправляется на другую сторону портала.&lt;&#x2F;p&gt;
&lt;p&gt;Тогда чтобы понять что происходит с объектом, частично вошедшим в портал, необходимо разбить этот процесс на дискретные шаги.&lt;&#x2F;p&gt;
&lt;p&gt;Здесь имеется шаг Δt, за время этого шага часть объекта входит в портал, а часть не входит. Тогда последовательность действий следующая:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Сначала надо определить где нужно разрезать объект так чтобы одна часть полностью вошла в портал, а другая нет.&lt;&#x2F;li&gt;
&lt;li&gt;Затем обрезать его&lt;&#x2F;li&gt;
&lt;li&gt;Затем телепортировать обрезанную часть.&lt;&#x2F;li&gt;
&lt;li&gt;И далее можно двигать всё до конца шага.&lt;&#x2F;li&gt;
&lt;li&gt;Повторять итеративно.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;6-06-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#6-06-2021&quot;&gt;#&lt;&#x2F;a&gt;6.06.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;460&quot;&gt;&lt;code&gt;tg&#x2F;460&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;461&quot;&gt;&lt;code&gt;tg&#x2F;461&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;462&quot;&gt;&lt;code&gt;tg&#x2F;462&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;463&quot;&gt;&lt;code&gt;tg&#x2F;463&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Сцена &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#31052021&quot;&gt;про разрезание объекта&lt;&#x2F;a&gt; порталами была нужна больше для того что будет показано сейчас.&lt;&#x2F;p&gt;
&lt;p&gt;В той сцене мы разделили портал на две части и это выглядит немного бессмысленно и бесполезно. Но настоящий смысл появляется когда у нас портал входит в другой портал и соответственно делится на две части: до вхождения и после вхождения.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так это выглядит в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#11052021&quot;&gt;сцене про две пары&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;773&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4eb1910e81692d0300.webp&quot; 
    onclick=&quot;full_screen(&#x27;460.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;460.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Теперь вот что будет если мы засунем объект в дальний треугольный портал. Он будет разрезан на две части, как это было в сцене про серый нож, и каждая часть войдёт в свой портал: одна в красный, другая в зелёный. В итоге всё будет выглядеть как будто никаких ножей и границ не существует, всё очень непрерывно.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так под капотом работает сложная телепортация.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;optimized&amp;#x2F;461.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;И это важно понимать, ведь когда портал входит в портал, с ним происходит то же самое, но сложнее. На этой картинке красный портал входит одновременно в другой красный и в другой зелёный.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;1002&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;411b4e3e3a6768c800.webp&quot; 
    onclick=&quot;full_screen(&#x27;462.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;462.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;12-06-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#12-06-2021&quot;&gt;#&lt;&#x2F;a&gt;12.06.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;469&quot;&gt;&lt;code&gt;tg&#x2F;469&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (21 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;471&quot;&gt;&lt;code&gt;tg&#x2F;471&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Обновил визуальный стиль:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Шахматная текстура теперь менее контрастная&lt;&#x2F;li&gt;
&lt;li&gt;По краям порталов теперь есть чёрная обводка, чтобы чтобы они лучше отделялись от фона&lt;&#x2F;li&gt;
&lt;li&gt;Добавил антиалиазинг, поэтому прога работает в 4 раза медленней, выключить его можно в меню «Rendering options».&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Первая картинка - было.&lt;&#x2F;p&gt;
&lt;p&gt;Вторая картина - стало.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;706&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;401ce07fd990cc3200.webp&quot; 
    onclick=&quot;full_screen(&#x27;469.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;469.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;706&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;60079883328aa94000.webp&quot; 
    onclick=&quot;full_screen(&#x27;470.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;470.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;14-07-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#14-07-2021&quot;&gt;#&lt;&#x2F;a&gt;14.07.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;473&quot;&gt;&lt;code&gt;tg&#x2F;473&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (48 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Наконец-то я сделал это видео, приятного просмотра!&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;1q0sHf_n_2Y&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;h1 id=&quot;22-07-2021&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#22-07-2021&quot;&gt;#&lt;&#x2F;a&gt;22.07.2021&lt;&#x2F;h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Источник:&lt;&#x2F;strong&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;474&quot;&gt;&lt;code&gt;tg&#x2F;474&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;475&quot;&gt;&lt;code&gt;tg&#x2F;475&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (7 💬),
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;476&quot;&gt;&lt;code&gt;tg&#x2F;476&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;477&quot;&gt;&lt;code&gt;tg&#x2F;477&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (14 💬).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;kak-ia-sdelal-eto-video&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-ia-sdelal-eto-video&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как я сделал это видео&lt;&#x2F;h2&gt;
&lt;p&gt;Я мечтал создать это видео ещё 2 года назад, когда у меня был старый код. Правда тогда его создание казалось настолько далёкой и сложной перспективой, что я не мог начать делать конкретно видео, и упал в яму улучшения кода, которая только отняла моё время.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас всё изменилось, потому что с новым визуальным редактором я смог создать все объясняющие сцены в довольно короткое время (а на старом коде создать все эти сцены было бы невероятно сложно), и я понял что теперь единственной проблемой остаётся монтаж и озвучка.&lt;&#x2F;p&gt;
&lt;p&gt;Для начала я создал список необходимых объясняющих сцен и сделал их, а потом написал в этот канал с объявлением что я начал работать над видео (&lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#11052021&quot;&gt;11.05.2021&lt;&#x2F;a&gt;). Как я потом понял, я описал эти сцены слишком подробно, ибо в видео я им дам очень мало экранного времени и не смогу их так подробно объяснить.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я начал работать над планом видео. Сначала я бесструктурно тупо собрал все идеи, маленькие фрагменты картинок из головы и уже из них потом делал структуру.&lt;&#x2F;p&gt;
&lt;p&gt;Лирическое отступление: под «планом» я понимаю две вещи: структура видео, и текст, который эту структуру связывает; а ещё для всего текста должно быть хотя бы примерно написано над каким визуалом он делается.&lt;&#x2F;p&gt;
&lt;p&gt;Первое время план не пошёл: я очень хорошо расписал начало и конец, а середина не клеилась (я уже писал об этом в &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;portals&#x2F;#31052021&quot;&gt;31.05.2021&lt;&#x2F;a&gt;). Пришлось придумать и создать новые сцены.&lt;&#x2F;p&gt;
&lt;p&gt;После этого я наконец закончил этот план. Я решил что этого достаточно и надо научиться монтажить, иначе весь остальной текст редачить бессмысленно без понимания что за подводный камень может ожидать меня на монтаже.&lt;&#x2F;p&gt;
&lt;p&gt;Я начал смотреть кучу видео-уроков про Shotcut, в котором работал поначалу. Я выбрал именно его, потому что он бесплатный, а я весь такой за бесплатный софт. С горем пополам сделал в нём три первые минуты видео и понял что в нём работать отвратительно, что он тормозит и вообще у него ужасный интерфейс. А ещё я понял что из моего видео надо выбросить очень много всего (я выбросил подробное объяснение что такое портал и что он не равен червоточине), и я лучше понял как надо работать с планом, чтобы он подходил под реалии видео, перелопатил его почти полностью, попереносил кучу всего.&lt;&#x2F;p&gt;
&lt;p&gt;Эти три минуты я озвучил на телефон и звук был ужасен. Его обязательно надо было менять, иначе делать видео будет невозможно. Мне нужен хороший микрофон. Onigiri говорил что первые видео он начинал с петлички BOYA M1-BY, которая стоит ~800р. Я последовал его примеру и купил её. И да, это видео было сделано именно на этой петличке. Я вставлял её в телефон и записывал на диктофон, а потом скидывал на комп (напрямую в комп было очень много помех). Звуком я очень доволен, по крайней мере для первого видео это лучше всего. Спасибо Onigiri за такой совет, ибо с этим Виталием Головановым у меня в голове сложилась картинка что работать можно только с аудиокартой и большим микрофоном за много денег.&lt;&#x2F;p&gt;
&lt;p&gt;Я забил на бесплатность, стал взрослым человеком, установил винду и взял Premiere Pro. В нём конечно работать было намного приятнее и заметно эффективней чем в Shotcut.&lt;&#x2F;p&gt;
&lt;p&gt;Далее идёт очень долгий процесс делания видео, после которого я получил 17 минут материала. Лень рассказывать и вспоминать что там было, так что опустим эту часть (хаха, саму эссенцию опустим, молодец илья).&lt;&#x2F;p&gt;
&lt;p&gt;Я скинул результат одному чуваку это на ревью (он решил остаться анонимным). Он расписал тайм-коды с его критикой и непониманием, и благодаря этому я нашёл очень много ошибок, которые сам бы не увидел из-за замылившихся глаз. Некоторые ошибки были настолько фундаментальны, что пришлось очень сильно переписывать план. Я его переписал а потом понял что видео просто так не дополнить новыми частями, его надо тоже полностью перемонтировать, а ещё надо перезаписать весь звук, потому что текста изменилось так много, что проще весь звук разом переделать, чем искать куда вставлять новые части.&lt;&#x2F;p&gt;
&lt;p&gt;Со вторым горем пополам я перезаписал весь звук, перемонтировал всё видео, доснял к нему много нового видео-материала. И видео отправилось на второе ревью к &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;vsevolodpl&quot;&gt;@vsevolodpl&lt;&#x2F;a&gt;, правда после него я ничего делать не стал (уже сдох), да и получил мало критики, так что забил болт.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь настала пора публикации. Я подумал что нельзя так просто публиковаться на русском, я же мечтал ещё на английском языке. Теперь меня блочили ещё английские субтитры. С горем пополам их сделал, а затем прогнал через Grammarly, исправив все возможные ошибки. Кстати, спасибо &lt;a href=&quot;http:&#x2F;&#x2F;hirrolot.github.io&#x2F;&quot;&gt;hirrolot.github.io&lt;&#x2F;a&gt; за помощь в этом деле. Мой английский очень плох, но один англоговорящий чел в твиттере сказал что субтитры ему понравились, так что ладно.&lt;&#x2F;p&gt;
&lt;p&gt;Значит текст был готов, осталось только наложить субтитры на видео. Я раньше уже их накладывал, и в интерфейсе ютуба это, мягко говоря, неудобно, поэтому я погуглил можно ли накладывать субтитры прямо в Premiere Pro, и оказалось что можно.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала я наложил русские субтитры, и это был ад. Чтобы отсубтитрить 10 минут видео, текстом который ты уже имеешь, нужно непрерывно монотонно ЧАС работать и не отвлекаться. Это реально смертельная работа, копипастить этот текст и выравнивать его под аудио. Я боялся того что меня ждало при наложении английских субтитров.&lt;&#x2F;p&gt;
&lt;p&gt;Но тут хвала небесам, я накладывал английские субтитры поверх русских, и этот процесс происходил в 1.7 раз быстрее (я замерял!), потому что не надо слушать аудио. Боюсь представить сколько бы у меня заняло отсубтитрование английских сабов без русских, сколько бы я потратил времени на чтение английского текста и слушание русского войса, чтобы подравнять их нормально.&lt;&#x2F;p&gt;
&lt;p&gt;Ну а потом ещё куча часов рендеринга и 5 часов ожидание загрузки видео итд. Но это несущественно по сравнению со всем остальным.&lt;&#x2F;p&gt;
&lt;p&gt;В общем создание этого видео кратко можно описать так тремя словами: очень много работы.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, fun fact: чистого наговоренного текста вышло 23к символов, а длина видео 24 минуты, так что вот вам эмпирические данные о том как узнать итоговую длину видео по плану без монтажа.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chto-ia-dumaiu-po-povodu-sozdaniia-etogo-video&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-ia-dumaiu-po-povodu-sozdaniia-etogo-video&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Что я думаю по поводу создания этого видео&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Делать видео очень сложно.&lt;&#x2F;strong&gt; Теперь я понимаю что видеоблоггерство - не очень простое занятие, и весь этот монтаж, озвучка и куча всего ещё — это невероятный труд. И когда я смотрю как Стас разоблачает Топлеса, я не могу видеть разоблачение, я вижу только 40 минут очень сложного монтажа. Как Стас это делает, я не представляю.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Делать своё первое видео ещё сложнее.&lt;&#x2F;strong&gt; Одно дело делать видео когда ты этому научился, но когда ты делаешь это в первый раз — это дико сложно. Я испытал это всё на себе, пройдя через Shotcut, выбор микрофона и переделку первой итерации. В первый раз невозможно сделать нормально. И я в своём первом видео замахнулся на слишком сложный с точки зрения реализации ролик. По-хорошему надо начинать с чего-то попроще.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Бесит заполнять видео-эфир.&lt;&#x2F;strong&gt; Какая-то большая часть видео — это тупо текст, который я наговариваю чтобы что-то объяснить. Для меня стало открытием что в этот момент я должен оказывается показывать какой-то визуал, и довольно неприятно думать что именно туда поставить на фон. Всё-таки в этом плане писать статьи приятней, потому что там можно выкинуть тонну текста без единой картинки.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Формат видео заставляет формулировать мысли кратко.&lt;&#x2F;strong&gt; Как вы видели в описаниях сцен я писал огромные лонгриды, даже для чего-то очевидного. Я могу себе позволить такие лонгриды в статье, но не могу в видео, потому что в видео у меня на пшик получится несклько минут, которые никто не будет смотреть и которые уронят удержание. Поэтому когда я писал план, было тяжело пытаться формулировать свои мысли кратко.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;После ревью нельзя так просто переделать.&lt;&#x2F;strong&gt; После первого ревью видео мне пришлось нафиг полностью переделывать весь план, весь звук, всё видео и переснимать большую часть визуала. Так что ревью видео это не то же самое что ревью статьи. В статье вы можете подправить текст, а в видео подправка текста вызывает цепную реакцию. Так что в видео цена ошибки крайне велика, и я пока не знаю что с этим делать.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;psikhologicheskii-effekt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#psikhologicheskii-effekt&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Психологический эффект&lt;&#x2F;h2&gt;
&lt;p&gt;Как я уже говорил, я мечтал сделать именно это видео ещё 2 года назад. И щас я его наконец сделал, казалось бы я закрыл целый гештальт, я должен быть счастлив, но в момент публикации я не почувствовал ничего. И сейчас я не чувствую ничего. Если подумать, то так происходит всегда когда я что-то делаю. От предвкушения получается удовольствия больше, чем от процесса или результата. Может это не нормально и надо прорабатывать с психологом.&lt;&#x2F;p&gt;
&lt;p&gt;Мне это не нравится. Я не знаю что с этим делать, и то что я сделал это видео явно не прибавило мне мотивации делать другие проекты. Так что вероятно данный канал будет долго пустовать. Надо осмыслить жизнь и свои хобби. Думаю может забить на хобби вообще и заняться другими областями жизни.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Как я пишу программы</title>
            <pubDate>Mon, 16 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/how-i-write-programs/</link>
            <guid>https://testzorax.github.io/p/how-i-write-programs/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Программирование — не только написание кода, но и ещё планирование кода; определение того какие фичи нужны, а какие нет. У меня есть своя система, определяющая: как заниматься планированием программ, фич; как организовывать себя; как не забывать идеи. И я хочу в этой статье рассказать об этом. Что-то в этой системе придумал сам, что-то украл у других людей.&lt;&#x2F;p&gt;
&lt;p&gt;Эта статья может быть полезна начинающим программистам.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;na-primere-programmy-dlia-izucheniia-angliiskikh-slov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#na-primere-programmy-dlia-izucheniia-angliiskikh-slov&quot;&gt;#&lt;&#x2F;a&gt;На примере программы для изучения английских слов&lt;&#x2F;h1&gt;
&lt;p&gt;Недавно я сделал программу с графическим интерфейсом &lt;a href=&quot;&#x2F;p&#x2F;learn-words-post&quot;&gt;для изучения английских слов&lt;&#x2F;a&gt;. Перед её созданием сразу решил что напишу эту статью, и поэтому сразу начал замерять время каждого действия вместе с документированием написания кода, идей и выполнения туду-пунктов. &lt;&#x2F;p&gt;
&lt;p&gt;В итоге эту програму я довёл до абсолютного конца за ≈40 часов чистого времени. Мне не нужны какие-то фичи, ничего не болит. Что очень необычно для пет-проекта, ведь их главное свойство, что они начинаются, но никогда не заканчиваются.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sozdanie-produkta&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sozdanie-produkta&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Создание продукта&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;sbor-idei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sbor-idei&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Сбор идей&lt;&#x2F;h3&gt;
&lt;p&gt;Перед тем как делать какой-то проект вы всегда знаете что хотите получить программу с какими-то конкретными фичами, чтобы если вы сделали то-то, случалось это. Вы не знаете как она должна работать в каждой конкретной детали, но точно знаете что без каких-то деталей делать её нет смысла. Это всё надо записать и систематизировать, чтобы далее от этого отталкиваться при написании кода.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;besporiadochnyi-sbor-idei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#besporiadochnyi-sbor-idei&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Беспорядочный сбор идей&lt;&#x2F;h4&gt;
&lt;p&gt;Я беру файлик и называю его &lt;code&gt;ideas.md&lt;&#x2F;code&gt;. Теперь в нём будут лежать все идеи по данному проекту.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала надо просто накидать всё что лежит в голове без всякого порядка. Я набросал, затем перечитывал это по многу раз и вносил те элементы что ещё не записал. Причём я записывал все идеи, даже самые безумные, мало ли что потом может пригодиться или случиться.&lt;&#x2F;p&gt;
&lt;p&gt;На беспорядочный сбор идей ушло 20 минут, и в результате получился такой файл:&lt;&#x2F;p&gt;
&lt;p&gt;(желательно его не читать, а просто увидеть масштаб)&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@341bd26&#x2F;ideas.md &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;341bd26b133ef3d0a4c9e3b9ee47f7127c07b468&#x27;&gt;diff&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;ul&gt;
&lt;li&gt;Хотелось бы загружать из текста и из субтитров, чтобы была кнопка, которая читает буфер обмена
&lt;ul&gt;
&lt;li&gt;Чтобы при добавлении субтитров или текста, смотрелись все слова, и те что уже известны или выучены, не добавлялись, а новые слова показывались для дальнейшего добавления&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс добавления слова
&lt;ul&gt;
&lt;li&gt;Известные или выученные слова фильтруются&lt;&#x2F;li&gt;
&lt;li&gt;Показывается английское слово&lt;&#x2F;li&gt;
&lt;li&gt;Предлагается добавить его русский перевод вручную&lt;&#x2F;li&gt;
&lt;li&gt;Либо есть кнопка &amp;quot;я уже знаю это слово&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы для данного слова можно было видеть его контекст использования&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы в специальном файле можно было настравить раскладку клавиатуры, чтобы автоматически раскладка подстраивалась без переключения раскладки.&lt;&#x2F;li&gt;
&lt;li&gt;Можно менять местами язык вопросов и ответов&lt;&#x2F;li&gt;
&lt;li&gt;Как вводятся слова:
&lt;ul&gt;
&lt;li&gt;Слово, которое не набиралось ни разу, надо сначала ввести n раз&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые 5 раз отвечались правильно, считаются на сегодня законченными&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые отвечаются неправильно, получают рейтинг -2&lt;&#x2F;li&gt;
&lt;li&gt;Так же контроллируется дата, когда человек отвечал и как. Если некоторое слово долго не набиралось, то необходимо его повторить, причем если до этого повторение работало хорошо, то приоритет меньший.&lt;&#x2F;li&gt;
&lt;li&gt;Только когда слово зарабатывает рейтинг кратный 5, то в записях фиксируется дата, когда это было сделано&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Приоритет слов для набора: Каждая категория сортируется в случайном порядке
&lt;ul&gt;
&lt;li&gt;Слова, которые не набирались 5 раз&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют отрицательный рейтинг&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют рейтинг меньше 5&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют рейтинг выше 5, но весь этот рейтинг был заработан свыше 5 дней назад&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют рейтинг выше 10, но весь этот рейтинг был заработан свыше 5 дней назад&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют рейтинг выше 15, но весь этот рейтинг был заработан свыше 20 дней назад (слова, которые давно не повторялись)&lt;&#x2F;li&gt;
&lt;li&gt;Слова, которые имеют рейтинг выше 20, но весь этот рейтинг был заработан свыше 20 дней назад&lt;&#x2F;li&gt;
&lt;li&gt;Всё, больше точно не надо&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;В центре экрана написано слово, которое надо перевести, ниже его написаны варианты ответа в виде &amp;quot;____ __&amp;quot;, причем необходимо, чтобы _ были раздельны
&lt;ul&gt;
&lt;li&gt;Не соотносится с многозначностью слов, пусть будет просто N полей с не важно какой длиной&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Как справляться с многозначностью слов
&lt;ul&gt;
&lt;li&gt;Для данного английского слова хранится множество пар русских слов, аналогично наоборот&lt;&#x2F;li&gt;
&lt;li&gt;Если сейчас показывается многозначное английское слово, то внизу нужно ввести все добавленные его русские смыслы&lt;&#x2F;li&gt;
&lt;li&gt;В статистике оценивается пара (русское слово, английское слово)&lt;&#x2F;li&gt;
&lt;li&gt;Если какое-то значение многозначного слова уже выучено или не требует повторения, то оно не показывается для ввода, оно просто показывается текстом, чтобы можно было понять какие смыслы введены, а какие нет&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Статистика
&lt;ul&gt;
&lt;li&gt;Для каждого слова запоминается сколько раз его печатали, сколько правильно, сколько неправильно.&lt;&#x2F;li&gt;
&lt;li&gt;Для каждого дня запоминается сколько слов за сегодня отработано по полной, сколько слов отработано вообще итд.&lt;&#x2F;li&gt;
&lt;li&gt;Попробовать рисовать статистику через графики egui.&lt;&#x2F;li&gt;
&lt;li&gt;Ведётся количество новых добавленных слов в день&lt;&#x2F;li&gt;
&lt;li&gt;Где-то должно быть окошко чтобы посмотреть просто количество всех слов в системе, количество выученных слов и количество изучаемых слов&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;При добавлении новых слов есть возможность говорить: я это слово знаю; это не знаю. Чтобы не учить лишний раз известные слова, и чтобы в других текстах они не добавлялись как неизвестные.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Кстати, на этом этапе крайне приятно владеть быстрой слепой печатью, чтобы писать много текста и не отвлекаться процессом печати.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;sistematizatsiia-idei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sistematizatsiia-idei&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Систематизация идей&lt;&#x2F;h4&gt;
&lt;p&gt;У меня есть принцип, что что-то надо систематизировать и разбирать на категории только в двух случаях:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Когда ты точно знаешь что эта категория использовалась ранее и она работает.&lt;&#x2F;li&gt;
&lt;li&gt;У тебя есть критическая масса элементов этой категории.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Поэтому в прошлом пункте идеи писались беспорядочно, а теперь можно заняться их систематизацией, ведь только сейчас можно увидеть какие категории присутствуют, а какие отстутсвуют.&lt;&#x2F;p&gt;
&lt;p&gt;На это тоже ушло 20 минут.&lt;&#x2F;p&gt;
&lt;p&gt;Я хотел написать программу как можно быстрее, и как можно быстрее получать результат, поэтому я разделил идеи на разные категории, постарался выбрать такие идеи, чтобы реализовать первую рабочую версию (MVP) можно было максимально быстро.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому была создана категория «сложные идеи», куда я уносил то что хочу реализовать, но что точно не должно быть в первой итерации.&lt;&#x2F;p&gt;
&lt;p&gt;В итоге файл с идеями теперь выглядит так:&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@5387e15&#x2F;ideas.md &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;5387e1549ec5f543b56f0fc280fc0dc74a9c87da&#x27;&gt;diff&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;h1 id=&quot;sistematizirovannye-idei&quot;&gt;систематизированные идеи&lt;&#x2F;h1&gt;
&lt;p&gt;Реализовать в первую очередь&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Общий интерфейс
&lt;ul&gt;
&lt;li&gt;Добавление слов
&lt;ul&gt;
&lt;li&gt;Через субтитры &lt;code&gt;.src&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Через текст&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Окошко для выучивания слов показывается всегда и его нельзя закрыть, либо оно вообще привязано к фону &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс получения слов из текста или субтитров
&lt;ul&gt;
&lt;li&gt;Есть две кнопки: &amp;quot;добавить как текст&amp;quot;, &amp;quot;добавить как субтитры&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс добавления слова
&lt;ul&gt;
&lt;li&gt;Известные или выученные слова фильтруются&lt;&#x2F;li&gt;
&lt;li&gt;Показывается английское слово&lt;&#x2F;li&gt;
&lt;li&gt;Предлагается добавить его русский перевод вручную (новая строка означает новый смысл)&lt;&#x2F;li&gt;
&lt;li&gt;Есть кнопка &amp;quot;добавить переводы слова&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Либо есть кнопка &amp;quot;я уже знаю это слово&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс ввода слова
&lt;ul&gt;
&lt;li&gt;Вверху написано английское (или русское) слово&lt;&#x2F;li&gt;
&lt;li&gt;Внизу N полей для ввода всех многозначностей этого слова&lt;&#x2F;li&gt;
&lt;li&gt;Некоторые поля могут быть серыми с уже написанными словами, так как эти слова выучены или не требуют сейчас повторения&lt;&#x2F;li&gt;
&lt;li&gt;Для перехода вниз или проверки текущего слова можно нажать Enter&lt;&#x2F;li&gt;
&lt;li&gt;Показывается правильно или неправильно введено слово только после введения всех слов&lt;&#x2F;li&gt;
&lt;li&gt;Для кажого слова показывается точками сколько раз ещё предстоит его вводить на сегодня&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Порядок ввода слова
&lt;ul&gt;
&lt;li&gt;Первые 2 раза слово вводится с подсказкой программы&lt;&#x2F;li&gt;
&lt;li&gt;Затем 3 раза нужно ввести слово по памяти на сегодня&lt;&#x2F;li&gt;
&lt;li&gt;Следующий раз ввести слово 5 раз нужно через день и более&lt;&#x2F;li&gt;
&lt;li&gt;На этом этапе слово считается наполовину выученным&lt;&#x2F;li&gt;
&lt;li&gt;Потом 5 раз через неделю и более&lt;&#x2F;li&gt;
&lt;li&gt;Потом 5 раз через месяц и более&lt;&#x2F;li&gt;
&lt;li&gt;После этого слово считается абсолютно выученным&lt;&#x2F;li&gt;
&lt;li&gt;Каждая ошибка добавляет необходимость вводить ещё один лишний раз это слово&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Слова в очереди
&lt;ul&gt;
&lt;li&gt;Русские и английские слова даются вперемешку&lt;&#x2F;li&gt;
&lt;li&gt;Всё вперемешку&lt;&#x2F;li&gt;
&lt;li&gt;Перебирается каждое слово и смотрится, нужно ли его набирать сегодня и сколько раз&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Как справляться с многозначностью слов
&lt;ul&gt;
&lt;li&gt;Для данного английского слова хранится множество пар русских слов, аналогично наоборот&lt;&#x2F;li&gt;
&lt;li&gt;В статистике оценивается пара (русское слово, английское слово)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Статистика
&lt;ul&gt;
&lt;li&gt;Для каждого слова запоминается: 
&lt;ul&gt;
&lt;li&gt;Сколько раз его печатали, сколько правильно, сколько неправильно&lt;&#x2F;li&gt;
&lt;li&gt;Все даты майлстоунов, когда его печатали в первый день, во второй день, черз неделю, через месяц&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;slozhnye-idei&quot;&gt;сложные идеи&lt;&#x2F;h1&gt;
&lt;p&gt;Реализовать потом&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Интерфейс получения слов из текста или субтитров
&lt;ul&gt;
&lt;li&gt;Программа всегда видит буфер обмена, если открыто это окно&lt;&#x2F;li&gt;
&lt;li&gt;Внизу серым написан текст, который сейчас находится в буфере обмена&lt;&#x2F;li&gt;
&lt;li&gt;Показывается только 200 первых символов этого текста, далее ставится троеточие и подписано количество байт занимаемых всем текстом&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс добавления слова
&lt;ul&gt;
&lt;li&gt;Чтобы для данного слова можно было видеть его контекст использования&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс статистики слова
&lt;ul&gt;
&lt;li&gt;Когда добавлено (дата, количество дней назад)&lt;&#x2F;li&gt;
&lt;li&gt;Сколько раз вводилось&lt;&#x2F;li&gt;
&lt;li&gt;Сколько правильно, сколько неправильно&lt;&#x2F;li&gt;
&lt;li&gt;Все майлстоуны (дней после добавления)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс ввода слова
&lt;ul&gt;
&lt;li&gt;Есть кнопочка &lt;code&gt;(i)&lt;&#x2F;code&gt; напротив каждого слова, на которую можно нажать и посмотреть статистику этого слова&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс окна &amp;quot;раскладка клавиатуры&amp;quot;
&lt;ul&gt;
&lt;li&gt;Тебя просят включить русский язык и ввести все английские буквы, как если бы они находились при включённом английском языке&lt;&#x2F;li&gt;
&lt;li&gt;Аналогично при включённом английском языке просят ввести все русские буквы&lt;&#x2F;li&gt;
&lt;li&gt;Таким образом программа запоминает раскладку клавиатуры и сохраняет её в настройки, чтобы потом использовать чтобы не переключать раскладку клавиатуры&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Статистика
&lt;ul&gt;
&lt;li&gt;Попробовать рисовать статистику через графики egui.&lt;&#x2F;li&gt;
&lt;li&gt;Где-то должно быть окошко чтобы посмотреть просто количество всех слов в системе, количество выученных слов и количество изучаемых слов&lt;&#x2F;li&gt;
&lt;li&gt;Для каждого дня запоминается: 
&lt;ul&gt;
&lt;li&gt;Сколько слов сегодня отработано по полной&lt;&#x2F;li&gt;
&lt;li&gt;Сколько попыток совершено вообще, сколько правильных, сколько неправильных&lt;&#x2F;li&gt;
&lt;li&gt;Сколько задолженность на сегодня&lt;&#x2F;li&gt;
&lt;li&gt;Сколько слов сегодня добавили&lt;&#x2F;li&gt;
&lt;li&gt;Как долго была включена программа (простои больше 15 секунд не учитываются)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Можно получить статистику за всё время, суммировав статистику за каждый день&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;otsortirovat&quot;&gt;отсортировать&lt;&#x2F;h1&gt;

&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;
&lt;h3 id=&quot;planirovanie-struktur-dannykh-i-funktsii&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#planirovanie-struktur-dannykh-i-funktsii&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Планирование структур данных и функций&lt;&#x2F;h3&gt;
&lt;p&gt;Только теперь, когда имеется некое видение программы, можно начать пытаться писать код. Если писать код без этапа сбора и систематизации идей, то можно забыть некоторые мелочи, которые потом придётся вставлять с большой болью.&lt;&#x2F;p&gt;
&lt;p&gt;И начинать код лучше всего не с написания действий, а с проектирования типов&#x2F;структур данных и сигнатур функций. Под структурами данных я понимаю не списки, деревья итд, а просто enum&#x27;ы и struct&#x27;ы. Я даже где-то слышал такую фразу:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Найти нужную структуру данных — это уже значит решить половину задачи.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;И я очень согласен с этим высказыванием, действительно то как ты будешь решать всю задачу зависит от того как выглядят твои типы, особенно важную роль играют enum&#x27;ы, которые прям очень хорошо описывают предметную область.&lt;&#x2F;p&gt;
&lt;p&gt;И поэтому я не могу понять как можно программировать на языках с динамической типизацией, где никто типы никогда не пишет. Я вообще не понимаю какой профит даёт избавление от типов, ведь в долгую это огромный проигрыш, и в короткую тоже не вижу выигрыша.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё есть идея, что чтобы удобнее было писать код, надо подумать о том как представить данные в том виде, чтобы задача в них решалась максимально естественно, и перевести их в этот формат: &lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;one lesson from functional programming:&lt;br&gt;when ya got some data and something to do with it, DON&amp;#39;T just do the thing.&lt;br&gt;imagine a form of the data that would make the thing easy.&lt;br&gt;&lt;br&gt;Transform the data, then do the thing.&lt;br&gt;&lt;br&gt;I call this &amp;quot;cook your food, then eat it.&amp;quot;&lt;&#x2F;p&gt;&amp;mdash; Jessica Joy Kerr (@jessitron) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;jessitron&#x2F;status&#x2F;1286677596005171200&quot;&gt;July 24, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;Далее я буду кидаться коммитами, начинающимися с &lt;code&gt;@&lt;&#x2F;code&gt;. Мне кажется что оптимальным способом смотрения их будет: открыть в новой вкладке и пролистать diff, увидеть &lt;em&gt;примерно&lt;&#x2F;em&gt; что произошло. Либо можно просто их игнорировать, особо ничего не потеряете. Смотреть что происходило в коммитах может быть полезно если вам нужны прям детали как происходила моя разработка.&lt;&#x2F;p&gt;
&lt;p&gt;Спустя два коммита (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;a8549a3e01ab262b2566bb037cc738954335dbc9&quot;&gt;@a8549a3&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;b79f219956d36cd06aecaa554fb096c609646ab0&quot;&gt;@b79f219&lt;&#x2F;a&gt;) и 1ч 20м, у меня получились следующие типы, которые далее будут являться основой всего:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Итерация изучения слова, сколько ждать с последнего изучения, сколько раз повторить, показывать ли слово во время набора
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;LearnType &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Сколько дней ждать с последнего изучения
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;wait_days&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;i8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;show_word&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Статистика написаний для слова, дня или вообще
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;TypingStats &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;typed&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;wrong&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Обозначает одну пару слов рус-англ или англ-рус в статистике
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;WordStatus &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Мы знали это слово раньше, его изучать не надо
&lt;&#x2F;span&gt;&lt;span&gt;    KnowPreviously, 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Мусорное слово, артефакт от приблизительного парсинга текстового файла или субтитров
&lt;&#x2F;span&gt;&lt;span&gt;    TrashWord,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Мы изучаем это слово
&lt;&#x2F;span&gt;&lt;span&gt;    ToLearn { 
&lt;&#x2F;span&gt;&lt;span&gt;        translation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Когда это слово в последний раз изучали
&lt;&#x2F;span&gt;&lt;span&gt;        last_learn: Day, 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Количество изучений слова, при поиске того что надо печатать, проходим по всему массиву
&lt;&#x2F;span&gt;&lt;span&gt;        learns: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;LearnType&amp;gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Статистика
&lt;&#x2F;span&gt;&lt;span&gt;        stats: TypingStats, 
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Мы знаем это слово
&lt;&#x2F;span&gt;&lt;span&gt;    Learned { 
&lt;&#x2F;span&gt;&lt;span&gt;        translation: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Статистика
&lt;&#x2F;span&gt;&lt;span&gt;        stats: TypingStats, 
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;WordsSaved&lt;&#x2F;span&gt;&lt;span&gt;(BTreeMap&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Vec&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;WordStatus&amp;gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В эти структуры сразу было заложено много идей, в том числе статистика. Когда я писал этот код, то очень много перечитывал все идеи, сверялся с тем чтобы ничего не потерялось, и всё было учтено с самого начала.&lt;&#x2F;p&gt;
&lt;p&gt;Следующим этапом приступил к планированю структур и методов для графического интерфейса. Я пишу интерфейс через ImGui, про который написал &lt;a href=&quot;&#x2F;p&#x2F;imgui-post&quot;&gt;отдельную статью&lt;&#x2F;a&gt;. Поэтому на интерфейс у меня потратится минимально времени, и планировать его максимально легко.&lt;&#x2F;p&gt;
&lt;p&gt;Интерфейс распланировал за 32м: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;0cab89035f5ccea042ec9d677f345d1685e4e1c2&quot;&gt;@0cab890&lt;&#x2F;a&gt;, и после этого планирования даже чуть-чуть улучшились и основные структуры данных.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;napisanie-koda&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#napisanie-koda&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Написание кода&lt;&#x2F;h3&gt;
&lt;p&gt;Далее за 1ч написал код логики: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;96eb6087b0bfbde62ad2e5791926157371a3e707&quot;&gt;@96eb608&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Затем за 2ч 45м написал код интерфейса до минимально рабочего состояния: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;7b8de3d5eb39a074da39ffac97c12de24674fc0d&quot;&gt;@7b8de3d&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, писать работающий код поверх распланированных функций и типов крайне приятно, код так легко и быстро идёт.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, на отметке чистого времени у нас 6ч 16м, и программа выглядит следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;820&quot;
    height=&quot;655&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;99a77092b1fa00ab00.webp&quot; 
    onclick=&quot;full_screen(&#x27;min-working.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;min-working.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Здесь работает всего три окошка и основной функционал.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;todo-listy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#todo-listy&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Todo-листы&lt;&#x2F;h3&gt;
&lt;p&gt;Итак, я написал самый минимальный прототип. По идее им уже можно пользоваться.&lt;&#x2F;p&gt;
&lt;p&gt;Нам больше не настолько нужен файлик с идеями, удаляем оттуда всё реализованное: (он стал совсем маленьким)&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@47b0669&#x2F;ideas.md &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;47b06697533bc12aea0dc5bbd15d5fcdc6b1fa63&#x27;&gt;diff&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;h1 id=&quot;idei-neizvestnoi-poleznosti&quot;&gt;идеи неизвестной полезности&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Чтобы при добавлении слов замерялась их частотность, даже частотность известных, и она просто суммировалась к тому что уже хранится, чтобы можно было видеть частотность выученных слов. Хотя и для этого придётся какой-то сложный интерфейс пилить.&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс добавления слова
&lt;ul&gt;
&lt;li&gt;Чтобы для данного слова можно было видеть его контекст использования&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс ввода слова
&lt;ul&gt;
&lt;li&gt;Есть кнопочка &lt;code&gt;(i)&lt;&#x2F;code&gt; напротив каждого слова, на которую можно нажать и посмотреть статистику этого слова&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Интерфейс статистики слова
&lt;ul&gt;
&lt;li&gt;Когда добавлено (дата, количество дней назад)&lt;&#x2F;li&gt;
&lt;li&gt;Сколько раз вводилось&lt;&#x2F;li&gt;
&lt;li&gt;Сколько правильно, сколько неправильно&lt;&#x2F;li&gt;
&lt;li&gt;Все майлстоуны (дней после добавления)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;И заводим файлик todo, в котором разместим конкретные todo-пункты для выполнения:&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@47b0669&#x2F;learn_words.todo &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;47b06697533bc12aea0dc5bbd15d5fcdc6b1fa63&#x27;&gt;diff&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;общее:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы по интерфейсу написания слова можно было легко перемещаться @done (21-07-29 23:34)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы субтитры могли возвращать ошибку и она показывалась в окне @done (21-07-29 23:41)
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ сделать чтобы перемещение по интерфейсу ввода слова делалось через enter
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ добавить чтобы каждое слово знало свой текущий уровень
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ чтобы из файла считывалась комбинация (Words, Settings), и чтобы она же сохранялась
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ замер времени в программе
&lt;&#x2F;span&gt;&lt;span&gt;    + когда простой мышки или клавиатуры больше 15 секунд, программа переходит в режим паузы, и прекращает замер времени, и это показывается на весь экран
&lt;&#x2F;span&gt;&lt;span&gt;    + время в программе за сегодня показывается снизу
&lt;&#x2F;span&gt;&lt;span&gt;    + каждый день запоминается количество времени в програме
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;раскладка:
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ сделать окно для раскладки клавиатуры
&lt;&#x2F;span&gt;&lt;span&gt;    + галочка &amp;quot;использовать автопереключение раскладки&amp;quot;, и если галочка отмечена, то далее показывается всё что есть
&lt;&#x2F;span&gt;&lt;span&gt;    + введите все свои английские символы
&lt;&#x2F;span&gt;&lt;span&gt;    + введите все свои русские символы
&lt;&#x2F;span&gt;&lt;span&gt;    + если ввести символ не можешь, значит ставить пробел
&lt;&#x2F;span&gt;&lt;span&gt;    + чтобы чекалось если вдруг из двух разных языков находятся одинаковые символы, тогда отвергать такую раскладку
&lt;&#x2F;span&gt;&lt;span&gt;    + можно ставить enter для удобства
&lt;&#x2F;span&gt;&lt;span&gt;    + сравнивалось количество символов без enter, и говорилось когда они совпадают а когда нет
&lt;&#x2F;span&gt;&lt;span&gt;    + кнопка &amp;quot;использовать эту раскладку&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ сделать виджеты поля ввода, которое умеет определять текущую раскладку и язык ответа и автоматически подменять буквы
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ раскладка должна храниться в settings
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;статистика:
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ статистика количества слов в программе:
&lt;&#x2F;span&gt;&lt;span&gt;    + известные
&lt;&#x2F;span&gt;&lt;span&gt;    + мусорные
&lt;&#x2F;span&gt;&lt;span&gt;    + изучаемые на каждый уровень
&lt;&#x2F;span&gt;&lt;span&gt;    + изученные полностью
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ основа для замера каждый день
&lt;&#x2F;span&gt;&lt;span&gt;    + замерять количество попыток
&lt;&#x2F;span&gt;&lt;span&gt;    + новых неизвестных слов
&lt;&#x2F;span&gt;&lt;span&gt;    + обновляется либо вручную, либо при закрытии программы, либо при открытии окна статистики
&lt;&#x2F;span&gt;&lt;span&gt;    + заодно замерять количество попыток вообще
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ показывать статистику за сегодня внизу
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ запоминание количества слов каждого уровня каждый день
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ плитка как на гитхабе
&lt;&#x2F;span&gt;&lt;span&gt;    + можно выбирать какой параметр показывать, учитывая всё что известно для текущего дня
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ график количества запомненных слов за все дни, условно какую площадь он занимает, со stems
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;васм:
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ хранение в куках
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ заюзать quad_rand
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ при закрытии вкладки чтобы автоматически сохранялся прогресс
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ кнопки для считывания и загрузки своих данных в программу в меню в пункте Data -&amp;gt; {Import, Export}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Тут стоит отвлечься насчёт того как я веду todo-списки. Одни люди это делают через GitHub, другие через приложение на телефон, а я через расширение для текстового редактора. Я пишу в Sublime + &lt;a href=&quot;https:&#x2F;&#x2F;packagecontrol.io&#x2F;packages&#x2F;PlainTasks&quot;&gt;PlainTasks&lt;&#x2F;a&gt;, так же есть похожее расширение для VSCode: &lt;a href=&quot;https:&#x2F;&#x2F;marketplace.visualstudio.com&#x2F;items?itemName=fabiospampinato.vscode-todo-plus&quot;&gt;Todo+&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Учтите, что этот файл выглядит очень хорошо только в Sublime + PlainTasks, от markdown здесь никакого форматирования к сожалению не делается.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь далее можно реализовывать по одному пунктику и сразу видеть результат.&lt;&#x2F;p&gt;
&lt;p&gt;Я обязательно держу все свои задачи в туду-пунктах. Если бывает так что я выполнил что-то, чего там нет, то я просто заношу это текстом и потом сразу отмечаю как сделанное, за это мой мозг даёт какой-никакой дофамин.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё у меня есть &lt;code&gt;.todo&lt;&#x2F;code&gt; файлик для каждого проекта, и я все эти файлики храню в одном месте, ибо коммитить его в проект странно; а хранить его в папке проекта и скрывать через &lt;code&gt;.gitignore&lt;&#x2F;code&gt; — плохо, обязательно потеряется.&lt;&#x2F;p&gt;
&lt;p&gt;У меня даже есть туду-файлы для жизни, для медицины (по каким врачам сходить) и так далее. Очень удобная самоорганизация.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;obychnyi-tsikl-razrabotki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obychnyi-tsikl-razrabotki&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Обычный цикл разработки&lt;&#x2F;h3&gt;
&lt;p&gt;Теперь я выполняю туду-пункты и потихоньку коммичу изменения от них. Пока выполняю одни пункты, в голову могут приходить идеи других, и их тоже заношу в туду. Что-то совсем радикальное заношу в файлик &lt;code&gt;ideas.md&lt;&#x2F;code&gt;, чтобы не забыть, но и не заставлять себя реализовывать.&lt;&#x2F;p&gt;
&lt;p&gt;На таймере чистого времени 21ч 21м и следующий результат:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;760&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;744ca69ca3a9fb6e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;middle-working.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;middle-working.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут уже намного больше фич, и я сам полноценно начал пользоваться программой. Но во время пользования очень много начало болеть и я записал ещё больше туду-пунктов.&lt;&#x2F;p&gt;
&lt;p&gt;На таймере 33ч 23м чистого времени и я публикую &lt;a href=&quot;&#x2F;learn-words-post&quot;&gt;статью про эту програму&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;На моменте 41ч я публикую вторую версию, которая, можно сказать, является финальной версией. Больше от программы мне ничего не нужно, все основные туду-пункты я выполнил.&lt;&#x2F;p&gt;
&lt;p&gt;Программу можно считать завершённой.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kuda-devat-vypolnennye-tudu-punkty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kuda-devat-vypolnennye-tudu-punkty&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Куда девать выполненные туду-пункты&lt;&#x2F;h3&gt;
&lt;p&gt;На данный момент я сделал почти всё, а в файлике с туду-пунктами очень много строк, которые отмечены как выполненные или как отменённые. Когда их становится слишком много, я просто переношу их все вниз в раздел «Архив». Я не удаляю строки, чтобы просто не терять информацию, и просто потому что приятно видеть как много работы я сделал. Конечно, я переношу выполненное вниз не только когда завершаю проект, а когда пунктов становится слишком много, такое периодически происходит в некоторых моих проектах. Посмотреть на текущий туду-файл можно здесь:&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@42b5e72&#x2F;learn_words.todo &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;blob&#x2F;42b5e72ab0f6f587b3b091b04a7d9613f74cb3fe&#x2F;learn_words.todo&#x27;&gt;link&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;общее:
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ для stackplot сделать чтобы самые маленькие по площади были в самом низу, а самые большие в самом вверху
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;статьи:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ рассказать о quad-storage @done (21-08-10 21:52)
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ написать статью о том как сделал эту прогу
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ 1 сентября опубликовать статью по результатам месячного использования этой проги
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;далёкая перспектива:
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;issues&#x2F;595
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ в зависимости от того что выключается в stackplot в легенде, убирать это из вычислений, для этого надо внедрить фичу в egui
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;рефакторинг:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ причесать функцию ui, вынести поля ввода со всеми их фичами в отдельную функцию, чтобы не было этого копипаста, а данные в отдельную структуру @done (21-08-10 19:27)
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ для того чтобы тратилось меньше памяти, и прога работала быстрее за счёт уменьшения числа аллокаций, использовать айдишники строк, а все строки хранить в одной структуре
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ переделать так, чтобы в words хранился не массив, где слово может быть выученным и подлежащем изучению, а чтобы сверху там было (trash, known, (learn, и вот уже внутри learn массив (либо выученное, либо изучаемое))) (сомнительное удобство)
&lt;&#x2F;span&gt;&lt;span&gt;  ☐ попытаться заюзать gat
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;АРХИВ:
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;-------------------------------------------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;общее:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы по интерфейсу написания слова можно было легко перемещаться @done (21-07-29 23:34)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы субтитры могли возвращать ошибку и она показывалась в окне @done (21-07-29 23:41)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ добавить чтобы каждое слово знало свой текущий уровень @done (21-07-30 14:18)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы из файла считывалась комбинация (Words, Settings), и чтобы она же сохранялась @done (21-07-30 14:23)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ замер времени в программе @done (21-07-30 15:01)
&lt;&#x2F;span&gt;&lt;span&gt;    + когда простой мышки или клавиатуры больше 15 секунд, программа переходит в режим паузы, и прекращает замер времени, и это показывается на весь экран
&lt;&#x2F;span&gt;&lt;span&gt;    + время в программе за сегодня показывается снизу
&lt;&#x2F;span&gt;&lt;span&gt;    + каждый день запоминается количество времени в програме
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы перемещение по интерфейсу ввода слова делалось через enter @done (21-07-31 23:24)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать базовое окно about @done (21-07-31 23:35)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ кажется на васме протекает буфер обмена при использовании русских символов. видимо путаются количество чаров и длина в байтах, надо пофиксить @done (21-08-01 00:10)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;раскладка:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать окно для раскладки клавиатуры @done (21-07-30 19:30)
&lt;&#x2F;span&gt;&lt;span&gt;    + галочка &amp;quot;использовать автопереключение раскладки&amp;quot;, и если галочка отмечена, то далее показывается всё что есть
&lt;&#x2F;span&gt;&lt;span&gt;    + введите все свои английские символы
&lt;&#x2F;span&gt;&lt;span&gt;    + введите все свои русские символы
&lt;&#x2F;span&gt;&lt;span&gt;    + если ввести символ не можешь, значит ставить пробел
&lt;&#x2F;span&gt;&lt;span&gt;    + чтобы чекалось если вдруг из двух разных языков находятся одинаковые символы, тогда отвергать такую раскладку
&lt;&#x2F;span&gt;&lt;span&gt;    + можно ставить enter для удобства
&lt;&#x2F;span&gt;&lt;span&gt;    + сравнивалось количество символов без enter, и говорилось когда они совпадают а когда нет
&lt;&#x2F;span&gt;&lt;span&gt;    + кнопка &amp;quot;использовать эту раскладку&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать виджеты поля ввода, которое умеет определять текущую раскладку и язык ответа и автоматически подменять буквы @done (21-07-30 19:30)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ раскладка должна храниться в settings @done (21-07-30 19:30)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;статистика:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ основа для замера каждый день @done (21-07-30 15:34)
&lt;&#x2F;span&gt;&lt;span&gt;    + замерять количество попыток, правильных и неправильных
&lt;&#x2F;span&gt;&lt;span&gt;    + новых неизвестных слов
&lt;&#x2F;span&gt;&lt;span&gt;    + обновляется либо вручную, либо при закрытии программы, либо при открытии окна статистики
&lt;&#x2F;span&gt;&lt;span&gt;    + заодно замерять количество попыток вообще
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ показывать статистику за сегодня внизу @done (21-07-30 15:34)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ запоминание количества слов каждого уровня каждый день @done (21-07-30 15:34)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ статистика количества слов в программе: @done (21-07-30 16:23)
&lt;&#x2F;span&gt;&lt;span&gt;    + известные
&lt;&#x2F;span&gt;&lt;span&gt;    + мусорные
&lt;&#x2F;span&gt;&lt;span&gt;    + изучаемые на каждый уровень
&lt;&#x2F;span&gt;&lt;span&gt;    + изученные полностью
&lt;&#x2F;span&gt;&lt;span&gt;    + вычисляется при вызове программы из words
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ график количества запомненных слов за все дни, условно какую площадь он занимает, со stems, по уровням @done (21-07-30 17:40)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ аналогично верхнему график количества правильных и неправильных попыток @done (21-07-30 17:40)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ плитка как на гитхабе @done (21-07-30 23:36)
&lt;&#x2F;span&gt;&lt;span&gt;    + можно выбирать какой параметр показывать, учитывая всё что известно для текущего дня
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;васм:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ кнопки для считывания и загрузки своих данных в программу в меню в пункте Data -&amp;gt; {Import, Export} @done (21-07-30 18:03)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ заюзать quad_rand @done (21-07-31 14:51)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ хранение в куках @done (21-07-31 22:20)
&lt;&#x2F;span&gt;&lt;span&gt;    + https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;JavaScript&#x2F;Client-side_web_APIs&#x2F;Client-side_storage
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ попробовать скомпилить под васм @done (21-07-31 23:12)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ при закрытии вкладки чтобы автоматически сохранялся прогресс @done (21-07-31 23:12)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;рефакторинг:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать trait ClosableWindow, и функцию process_window, которая обрабатывает окно, которое может закрыться, чтобы не копипастить это постоянно. или лучше структуру, которая оборачивается вокруг структуры окна, умеет закрываться, сама конструирует окно, и сама в функции ui отслеживает когда окно хотят закрыть @done (21-07-30 16:06)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;критичное:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ если просто нажимать кнопку мыши без движения, то выскакивает пауза @done (21-08-02 21:20)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ для того чтобы читать буфер обмена, пользователь должен сам нажать ctrl+v, тогда мб убрать автоматическое считывание буфера обмена, аналогично для ctrl+c @done (21-08-02 21:54)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ подсказки должны даваться с пробелом, а то из-за курсора их не видно @done (21-08-02 21:55)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы автосохранение было после каждого слова @done (21-08-02 21:56)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ если нажать use this text с пустым текстом, то происходит паника, file: &amp;quot;src&#x2F;main.rs&amp;quot;, line: 1185, col: 38 @done (21-08-02 22:01)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ кажется в копипасте нельзя вставить текст длиньше 32768 символов @done (21-08-02 22:37)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ переделать настройки количества изучения, чтобы они не копипастились в каждое слово, а были глобальны @done (21-08-02 23:12)
&lt;&#x2F;span&gt;&lt;span&gt;    + тогда надо чтобы это можно было задавать в окне settings
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;сделать следующим:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ при вводе слова с подсказкой необходимо вводить не только перевод слова, но и его самого. это нужно, потому что я пытаюсь ускориться, и не читаю что за слово с подсказкой я пишу @done (21-08-03 17:22)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ наверное за сессию надо изучать меньше слов, а не все добавленные. сделать настройку, которая позволяет взять N (пусть для начала будет 20) слов в пул, и изучать их, и только когда они кончатся, изучать дальше. @done (21-08-03 17:48)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ окно-редактор-просмотрщик слов, где можно искать слова fuzzy поиском, где сразу отображается внутренность @done (21-08-03 20:20)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ автоматическое открытие окна просмотрщика слов, где фильтрование происходит по текущему добавленному слову @done (21-08-03 20:20)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ окно для редактирования одного слова @done (21-08-03 22:16)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать карандашик напротив слова, которое открывает окно для этого слова и позволяет его редактировать @done (21-08-03 22:16)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ всё-таки добавить фичу, показывающую контекст конкретного слова, заодно показывать частоту его встречи в данном тексте @done (21-08-03 23:02)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ должна быть возможность выбирать количество новых слов, и количество слов для повторения @done (21-08-04 14:57)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ после добавления текста или субтитров должно показываться окно с инфой: @done (21-08-04 17:20)
&lt;&#x2F;span&gt;&lt;span&gt;    + всего слов
&lt;&#x2F;span&gt;&lt;span&gt;    + уникальных слов
&lt;&#x2F;span&gt;&lt;span&gt;    + отфильтровано
&lt;&#x2F;span&gt;&lt;span&gt;      + известные (known, trash, learned)
&lt;&#x2F;span&gt;&lt;span&gt;      + изучаемые (tolearn)
&lt;&#x2F;span&gt;&lt;span&gt;    + неизвестных
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ синхронные субтитры, когда одновременно показывается и русский и английский вариант @done (21-08-04 23:51)
&lt;&#x2F;span&gt;&lt;span&gt;    ✔ разобраться с выделением текста при поиске @done (21-08-04 23:55)
&lt;&#x2F;span&gt;&lt;span&gt;    ✔ чтобы когда в вводе ничего нет, или нашлись новые результаты, скролл улетал на начало @done (21-08-04 23:57)
&lt;&#x2F;span&gt;&lt;span&gt;    ✔ 0 всегда обозначает отсутствие скролла @done (21-08-04 23:57)
&lt;&#x2F;span&gt;&lt;span&gt;    ✔ сделать чтобы скролл целился на лейбл только после нажатия кнопки @done (21-08-04 23:57)
&lt;&#x2F;span&gt;&lt;span&gt;    ✔ убрать массив в поиске слова @done (21-08-05 00:03)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ вынести общую часть в коде find_whole_word @cancelled (21-08-05 00:14)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы нулевой элемент не показывался в кнопочках, и чтобы не выделялся, и чтобы на него нельзя было попасть @done (21-08-05 00:14)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ в окне добавления слова может унести контекст вправо @done (21-08-05 13:52)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ возможность менять масштаб в настройках @done (21-08-05 14:02)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ должна быть галочка, позволяющая двигать график @done (21-08-05 14:19)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ нужна белая тема, ибо на тёмной глазам неприятно @done (21-08-05 14:35)
&lt;&#x2F;span&gt;&lt;span&gt;    + запоминать тему в настройки
&lt;&#x2F;span&gt;&lt;span&gt;    + рисовать всё окно белым или чёрным в зависимости от темы
&lt;&#x2F;span&gt;&lt;span&gt;    + запомнить цвета для всяких штук типо activity в зависимости от темы
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ заюзать нормальный рандом, который инициализируется текущим временем @done (21-08-05 19:22)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ после ввода какого-то слова неправильно, надо его снова ввести с подсказкой, и переходить дальше не разрешит, пока правильно не напишешь @done (21-08-10 16:34)
&lt;&#x2F;span&gt;&lt;span&gt;    + после неправильного ввода слова его надо снова написать даже несколько раз
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ пропускать окно проверки для ввода с подсказкой @done (21-08-10 16:34)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ после ввода слова должна быть возможность инвертировать правильный и неправильный результаты @done (21-08-10 16:34)
&lt;&#x2F;span&gt;&lt;span&gt;    + чтобы там использовалось right_to_left
&lt;&#x2F;span&gt;&lt;span&gt;    + для этого надо регистрировать попытки не после их ввода, а после нажатия кнопки &amp;quot;next&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы если нажимается backspace на пустом поле или кнопке, фокус запрашивался назад @done (21-08-10 17:54)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ перевести Words на хранение двух разных языков, и при выборе слов для набора считать только английские слова @cancelled (21-08-10 18:21)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ сортировать слова для добавления не по их алфавитному написанию, а по порядку как они встречаются в тексте, чтобы лишний раз не читать одни и те же предложения @cancelled (21-08-10 21:51)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ в окне add words должно быть поле где можно добавлять известные переводы этого слова @done (21-08-10 18:12)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать кнопку для скипа добавляемых слов @done (21-08-10 18:12)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ нужна возможность отменить предыдущее нажатие при добавлении слова, а то так можешь быстро нажимать что знаешь слово и раз, пропустил одно @done (21-08-10 18:12)
&lt;&#x2F;span&gt;&lt;span&gt;    + запоминать одно слово, и удалять его из words методом для удаления, если нажалась кнопка back
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы при выборе слов добавлялись сразу переводы, и выбор останавливался когда набиралось больше чем нужное количество, или все слова кончались @done (21-08-10 19:02)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ в первую очередь должны выбираться наиболее старые слова в окне выбора слов @done (21-08-10 19:02)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ писать сколько осталось набрать это слово сегодня @done (21-08-10 19:12)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы на кнопке при нажатии backspace отправляло назад @done (21-08-10 19:16)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ должна быть кнопка отмены текущего набора и выбора количества слов для изучения @done (21-08-10 19:26)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ наверное лучше сначала набрать все слова, которые ты не знаешь с подсказкой, в рандомном порядке, а уже затем набирать все слова которые надо без подсказки набирать причём надо сделать не просто выбор рандома, а чтобы нормально shuffle&amp;#39;ился весь массив, аналогично всё остальное, чтобы подряд не шло два раза одно и то же слово никогда @done (21-08-10 19:46)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы при переименовании перевода, перевод тоже переименовывался нормально @done (21-08-11 18:15)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сохранять всё после изменения слова @done (21-08-11 18:15)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ в окне edit word должна быть возможность удалять конкретный перевод слова, и добавлять новые, в окне выставления дня должно автоматически ставиться сегодняшний день @done (21-08-11 18:25)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы через настройки можно было задавать уровни и количество повторений. @done (21-08-11 18:39)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ сделать чтобы текущий день считался локальным, а то у меня в 0:00 день был не сегодняшний @done (21-08-11 19:04)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ законтрибьютить user_dpi в egui-miniquad @cancelled (21-08-11 19:27)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ мб попробовать отображать панику на экране @cancelled (21-08-11 19:27)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ баг: не все слова выбираются когда выбираешь для повторения то, что не имеет перевода для повторения @done (21-08-11 23:02)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ перейти на egui-web, egui-glium @done (21-08-11 22:25)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ добавить возможность скачивать экспорт как файл @done (21-08-12 14:58)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ добавить кнопку, которая выделяет всё @cancelled (21-08-12 14:58)
&lt;&#x2F;span&gt;&lt;span&gt;  ---
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ оптимизировать цвета в белой теме, мб через отдельное окно @done (21-08-13 19:18)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ заставить в вебе работать изменение масштаба @cancelled (21-08-13 20:24)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;не криитчное:
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ кажется нативное приложение не хочет сохранять статистику в файл @done (21-08-01 23:06)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ кажется окно добавления слов не фильтрует известные слова @done (21-08-01 23:12)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ невозможно нажать пробел из-за замены символов @done (21-08-02 21:06)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ слова должны быть огромными, а не простой label @done (21-08-02 21:06)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ чтобы слова можно было удалять @done (21-08-03 23:15)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ при вводе слова должна быть возможность посмотреть его статистику @cancelled (21-08-03 23:15)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ при вводе в попытках слова должна быть возможность отредактировать это слово (типо иногда оставил лишнее окончание или что-то такое) @cancelled (21-08-03 23:15)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ в окне добавления слов по тексту показывать сколько было уникальных, а сколько отфильтровалось @done (21-08-05 14:35)
&lt;&#x2F;span&gt;&lt;span&gt;  ✔ добавить learned translations в окно добавления слов @done (21-08-05 14:36)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ в github стате затемнять на dim 0 те элементы где 0 @cancelled (21-08-05 14:39)
&lt;&#x2F;span&gt;&lt;span&gt;  ✘ должна быть возможность добавлять алиасы для какого-то слова, типо если ты его ввёл не так, чтобы оно считалось тоже правильным. @cancelled (21-08-11 19:04)
&lt;&#x2F;span&gt;&lt;span&gt;    + тогда должна быть кнопка после ввода слова, которая не только отменяет неверность текущего ответа, но и одновременно добавляет его в алисы
&lt;&#x2F;span&gt;&lt;span&gt;    + это не нужно, так как есть кнопка invert
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;vremia-raboty-nad-etoi-programmoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vremia-raboty-nad-etoi-programmoi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Время работы над этой программой&lt;&#x2F;h2&gt;
&lt;p&gt;Кстати, если вам интересно сколько времени было потрачено на каждый пункт этой программы, то эта информация находится здесь в файле ниже. Замер времени коммитился одновременно с написанием какой-то фичи, так что дополнительную информацию можно отследить по коммитам и blame.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@aba59d5&#x2F;video.md &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;blob&#x2F;aba59d5f15a23ebbce22ca1a6030b703da95396d&#x2F;video.md#%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D1%8F&#x27;&gt;link&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;h1 id=&quot;informatsiia&quot;&gt;информация&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;(во времени не учитывается время на написание статей)&lt;&#x2F;li&gt;
&lt;li&gt;время написания первых идей: 20 минут&lt;&#x2F;li&gt;
&lt;li&gt;время их ситематизации: 20 минут&lt;&#x2F;li&gt;
&lt;li&gt;планирование структур данных, связанных с основной логикой, без учёта интерфейса: 1 час 20 минут&lt;&#x2F;li&gt;
&lt;li&gt;планирование структур и методов интерфейса: 32м (2:32)&lt;&#x2F;li&gt;
&lt;li&gt;написание кода основной логики: 1 час (3:32)&lt;&#x2F;li&gt;
&lt;li&gt;написание кода интерфейса до минимально рабочего состояния: 2ч 45м (6:16)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;6ч 16м&lt;&#x2F;code&gt; -------------------------------------------------- Минимально рабочее состояние&lt;&#x2F;li&gt;
&lt;li&gt;сделал два пункта и распланировал дальнейшие идеи в todo: 45м (7:02)&lt;&#x2F;li&gt;
&lt;li&gt;слетел таймер&lt;&#x2F;li&gt;
&lt;li&gt;три общих пункта: 47м (0:47)&lt;&#x2F;li&gt;
&lt;li&gt;основа статистики: 34м (1:21)&lt;&#x2F;li&gt;
&lt;li&gt;рефакторинг окон: 30м (1:51)&lt;&#x2F;li&gt;
&lt;li&gt;реализация статистики и других мелких улучшений: 1ч 53м (3:44)&lt;&#x2F;li&gt;
&lt;li&gt;раскладка клавиатуры: 1ч 4м (4:48)&lt;&#x2F;li&gt;
&lt;li&gt;github-like плитка: 3ч (7:44)&lt;&#x2F;li&gt;
&lt;li&gt;написал quad-storage: 1ч 49м (9:33)&lt;&#x2F;li&gt;
&lt;li&gt;заставил запускаться в васме, пофиксил баги и небольшие дополнения: 1ч 50м (11:23)&lt;&#x2F;li&gt;
&lt;li&gt;скинул таймер&lt;&#x2F;li&gt;
&lt;li&gt;написание статьи про программу: 2ч 56м&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;21ч 21м&lt;&#x2F;code&gt; -------------------------------------------------- Средне рабочее состояние&lt;&#x2F;li&gt;
&lt;li&gt;закончил править все критичные пункты: 1ч 30м&lt;&#x2F;li&gt;
&lt;li&gt;начал таймер&lt;&#x2F;li&gt;
&lt;li&gt;сделал чтобы можно было выбирать количество слов: 44 минуты (0:44)&lt;&#x2F;li&gt;
&lt;li&gt;сделал чтобы можно было искать по всем словам с fuzzy поиском и это работало при добавлении слова: 1ч 2м (1:46)&lt;&#x2F;li&gt;
&lt;li&gt;сделал окно для редактирования одного слова: 53м (2:39)&lt;&#x2F;li&gt;
&lt;li&gt;добавил показ контекста данного слова из текста: 46м (3:15)&lt;&#x2F;li&gt;
&lt;li&gt;для работы можно выбирать количество новых слов и количество слов для повторения: 21м (3:36)&lt;&#x2F;li&gt;
&lt;li&gt;добавил вывод информации о количестве слов в тексте после добавления: 20м (3:56)&lt;&#x2F;li&gt;
&lt;li&gt;фича синхронных субтитров: 3ч 26м (7:22)&lt;&#x2F;li&gt;
&lt;li&gt;мелкие фичи: 57м (8:19)&lt;&#x2F;li&gt;
&lt;li&gt;переход на другой генератор рандома: 10м (8:29)&lt;&#x2F;li&gt;
&lt;li&gt;сбросил таймер&lt;&#x2F;li&gt;
&lt;li&gt;дописал статью про программу с учётом новых фич и пользования: 2ч 3м&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;33ч 23м&lt;&#x2F;code&gt; -------------------------------------------------- Первый релиз&lt;&#x2F;li&gt;
&lt;li&gt;повторение слов после неправильного ввода и инвертирование результатов: 1ч 48м&lt;&#x2F;li&gt;
&lt;li&gt;улучшения окна add words: 20м&lt;&#x2F;li&gt;
&lt;li&gt;выбор переводов при выборе слов и выбор наиболее задолженных слов: 43м&lt;&#x2F;li&gt;
&lt;li&gt;улучшения набора слова: 45м&lt;&#x2F;li&gt;
&lt;li&gt;улучшения окна edit word: 30м&lt;&#x2F;li&gt;
&lt;li&gt;задание количества повторений в настройках: 11м&lt;&#x2F;li&gt;
&lt;li&gt;чтобы текущий день считался правильно с учётом тайм-зоны: 37м&lt;&#x2F;li&gt;
&lt;li&gt;переехал на egui_template: 2ч 13м&lt;&#x2F;li&gt;
&lt;li&gt;написал про второй релиз: 30м&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;41ч&lt;&#x2F;code&gt; -------------------------------------------------- Второй релиз&lt;&#x2F;li&gt;
&lt;li&gt;добавил скачивание статистики в виде файла: 1ч 15м&lt;&#x2F;li&gt;
&lt;li&gt;оптимизировал цвета в белой теме: 1ч 2м&lt;&#x2F;li&gt;
&lt;li&gt;не смог заставить в вебе работать изменение масштаба: 1ч&lt;&#x2F;li&gt;
&lt;li&gt;написание статьи про imgui: 2ч 44м&lt;&#x2F;li&gt;
&lt;li&gt;написание статьи про то как пишу программы: 1ч&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;
&lt;h2 id=&quot;primer-slozhnoi-fichi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#primer-slozhnoi-fichi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Пример сложной фичи&lt;&#x2F;h2&gt;
&lt;p&gt;В программе была одна очень сложная фича, реализацию которой интересно рассмотреть отдельно. Эта фича синхронных субтитров. Её суть в том чтобы можно было загрузить одновременно русские и английские субтитры, и смотреть их параллельно.&lt;&#x2F;p&gt;
&lt;p&gt;Когда дело доходит до такой сложной фичи, её надо хорошо продумать. &lt;&#x2F;p&gt;
&lt;p&gt;Ещё фичу надо не только хорошо продумать, но и додуматься до того чтобы её внесение в программу давалось минимальными усилиями, чтобы пришлось минимально переделать. Изначально я хотел внести эту фичу как часть окна по добавлению слов из субтитров, но понимал что это будет требовать для каждых английских субтитров иметь русские, что плохо вписывалось. Тогда я додумался просто сделать эту фичу как отделное окно, и всё сразу стало красиво.&lt;&#x2F;p&gt;
&lt;p&gt;Вот результат продумывания в файлике &lt;code&gt;ideas.md&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;@80a5703&#x2F;ideas.md &lt;a class=&#x27;right&#x27; href=&#x27;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&#x2F;commit&#x2F;80a57032f306e558d157de61fb8edf6a7f3923a1&#x27;&gt;diff&lt;&#x2F;a&gt;&lt;&#x2F;summary&gt;
&lt;div class=&quot;details-content&quot;&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sinkhronnye-subtitry&quot;&gt;синхронные субтитры&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;это будет отдельное окно, которому можно указывать конкретное слово, а оно будет их искать все его встречи в первом предоставленном тексте&lt;&#x2F;li&gt;
&lt;li&gt;окно для добавления имеет два поля для ввода текста: Lang 1 (to search words), Lang 2 (translation of Lang 1).&lt;&#x2F;li&gt;
&lt;li&gt;у окна для показывания есть метод, который позволяет ввести в поиск нужное слово, если окно открыто. в отличие от окна поиска, это окно не открывается автоматически&lt;&#x2F;li&gt;
&lt;li&gt;использует &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;blob&#x2F;master&#x2F;egui_demo_lib&#x2F;src&#x2F;apps&#x2F;demo&#x2F;misc_demo_window.rs#L60&quot;&gt;column&lt;&#x2F;a&gt; для окна вставки субтитров&lt;&#x2F;li&gt;
&lt;li&gt;использует &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;blob&#x2F;master&#x2F;egui_demo_lib&#x2F;src&#x2F;apps&#x2F;demo&#x2F;widget_gallery.rs#L60&quot;&gt;grid&lt;&#x2F;a&gt; для показывания параллельно. так как там могут быть пустые места с обоих сторон.&lt;&#x2F;li&gt;
&lt;li&gt;использует код аналогичным &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;blob&#x2F;master&#x2F;egui_demo_lib&#x2F;src&#x2F;apps&#x2F;demo&#x2F;scrolling.rs&quot;&gt;scrolling&lt;&#x2F;a&gt; для выбора элемента скролла&lt;&#x2F;li&gt;
&lt;li&gt;перебирает одновременно оба субтитра и смещает указатель текущего времени, если у текущего времени есть пересечение с тем что на другом языке, связывает их в один &lt;&#x2F;li&gt;
&lt;li&gt;ещё в окне показывается номер элемента слева, то есть grid состоит из 3 элементов&lt;&#x2F;li&gt;
&lt;li&gt;если одна фраза на одном языке пересекается с несколькими на другом языке, то она показывается только для первой&lt;&#x2F;li&gt;
&lt;li&gt;есть галочка искать по словам или по вхождениям&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;...&lt;&#x2F;p&gt;

&lt;&#x2F;div&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;В процессе стало понятно что эта фича больше похожа на олимпиадную задачу, чем на обычный код. Проблема в том, что субтитры не обязаны мне ничего. У меня нет гарантий, что одна реплика идёт за другой, и что в английском и русском фразы обязательно будут иметь одинаковые тайминги. И это надо было учитывать.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала я планировал алгоритм в случае того что субтитры выглядят хорошо. На картинке ниже время идёт справа-налево, снизу русские субтитры, сверху английские.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;602&quot;
    height=&quot;227&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;94d60f493627046c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Затем выбрал худший общий вариант и начал планирвоать алгоритм субтитров как на картинке. Всё аналогично предыдущей, только английский и русский язык разделяет волнистая линия. Видно, что тут нарушается гарантия того что в одном файле субтитров все реплики обязаны идти друг за другом.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;539&quot;
    height=&quot;221&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5b188039381f718a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;2.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;2.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут очень пригождаются навыки олимпиадного программирования, ибо надо:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Рассмотреть крайние случаи.&lt;&#x2F;li&gt;
&lt;li&gt;Узнать какие у тебя есть гарантии от входных данных, увидеть подвох.&lt;&#x2F;li&gt;
&lt;li&gt;Постараться продумать алгоритм без костылей, чтобы на его реализацию не ушло больше часов, чем длится олимпиада.&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы алгоритм работал за приемлемое время.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Но я решил забить на скорость работы алгоритма, ибо у меня не миллиарды реплик, а максимум тысяча. И я искал каждую подходящую реплику тупо линейным поиском. И на практике никаких замедлений при добавлении синхронных субтитров не наблюдается.&lt;&#x2F;p&gt;
&lt;p&gt;Так что крайне советую вам прокачаться в олимпиадном программировании на &lt;a href=&quot;https:&#x2F;&#x2F;codeforces.com&#x2F;&quot;&gt;codeforces&lt;&#x2F;a&gt;. LeetCode фигня, ибо он плохо замеряет время работы программы, и вообще задачки там слабые.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати я использую бумагу только когда надо что-то рисовать или писать математические формулы, в других случаях писать текст на клавиатуре в миллион раз быстрее. Так что лично я советую вам писать идеи и туду-пункты &lt;strong&gt;не на бумаге&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pro-chistoe-vremia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-chistoe-vremia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Про чистое время&lt;&#x2F;h2&gt;
&lt;p&gt;Я замерял время работы и можно увидеть что чистого времени получилось 40 часов, что это значит? Это значит что я бы мог сделать эту программу за рабочую неделю? Нет.&lt;&#x2F;p&gt;
&lt;p&gt;Моё чистое время замерялось только во время работы, перерывы я не засчитывал. Ещё я работал не по 8 часов в день, а меньше: иногда 2, иногда 4. И самое главное — между этими подходами у меня были большие перерывы в виде отдыха и сна. Так что это может быть причиной почему я так эффективно работал.&lt;&#x2F;p&gt;
&lt;p&gt;На работе мы работаем с перерывами, итого за 8 часов рабочего дня, из них по-настоящему рабочими получается всегда меньше. Говорят, 4-6.&lt;&#x2F;p&gt;
&lt;p&gt;Да и даже если захотеть, и каждый день работать по 8 часов идеально, чтобы все эти 8 часов были чистым временем, то так долго не протянешь. Устанешь уже на следующий день. А если не устанешь, то в долговременной перспективе тебя ждёт выгорание и проблемы с психическим здоровьем.&lt;&#x2F;p&gt;
&lt;p&gt;Так что все эти инициативы по переходу на 4-часовой или 6-часовой рабочий день имеют смысл.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;na-primere-fichi-dlia-portal-explorer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#na-primere-fichi-dlia-portal-explorer&quot;&gt;#&lt;&#x2F;a&gt;На примере фичи для Portal Explorer&lt;&#x2F;h1&gt;
&lt;p&gt;Это пример про то как я внёс непростую фичу в другую програму.&lt;&#x2F;p&gt;
&lt;p&gt;У меня стояла задача сделать возможность добавить камере переключение между разными точками, чтобы заранее эти точки можно было задать, а пользователь мог между этим выбором переключаться. Это нужно было для предстоящих сцен.&lt;&#x2F;p&gt;
&lt;p&gt;Эта фича оказалось одной из тех, для которых у меня не было ни малейшего понятия о том как её реализовывать.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому сначала я взял и начал расписывать вопросы и ответы на них. Здесь самое главное — продумать как фича встанет в имеющуюся структуру программы. Я рассуждал в форме текста. Когда появилось первое понимание — накидал struct&#x27;урки и enum&#x27;ы. Наблюдать результат рассуждений и типы можно на скриншоте ниже:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1248&quot;
    height=&quot;1003&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b9bdc7463761eba400.webp&quot; 
    onclick=&quot;full_screen(&#x27;plan.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;plan.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;После этого ещё больше подумал, проработал все непонятные места и разрешил их, в голове сложилась картина, и я решил записать туду-пунктики, которые надо реализовать, чтобы эта фича была полностью сделана — это второй скриншот.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;369&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1776d88ea4aa408300.webp&quot; 
    onclick=&quot;full_screen(&#x27;todo.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;todo.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Теперь, после того как у меня всё чётко и понятно в голове, я мог начать очень эффективно фигачить код,.&lt;&#x2F;p&gt;
&lt;p&gt;И затем код был благополучно реализован. Конечно, пару штук на планировании я забыл, но без этого никуда.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pro-pet-proekty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-pet-proekty&quot;&gt;#&lt;&#x2F;a&gt;Про пет-проекты&lt;&#x2F;h1&gt;
&lt;p&gt;Немного мыслей про то как делать пет-проекты, кажется что они подходят духу статьи.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poisk-analogov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poisk-analogov&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Поиск аналогов&lt;&#x2F;h2&gt;
&lt;p&gt;Моя программа для изучения слов похожа на другую программу — Anki. Я это узнал только после написания своей программы, поэтому хочу чтобы вы не повторяли моих ошибок.&lt;&#x2F;p&gt;
&lt;p&gt;Тщательней ищите аналоги, изучайте их досконально, читайте статьи и пользуйтесь. Ведь, как известно, самый лучший проект — это тот, который не пришлось сделать.&lt;&#x2F;p&gt;
&lt;p&gt;Если бы я удосужился нормально искать программы для изучения слов, а не удовлетвориться неудобством Duolingo и ему подобных, то я бы и не потратил всё это время на написание своей программы, я бы мог написать только отдельный модуль для работы с субтитрами, например.&lt;&#x2F;p&gt;
&lt;p&gt;Ну или если ваша задача в том чтобы научиться какой-то технологии через пет-проект, то этот совет неприменим, тут писать очередной велосипед — святое дело.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vazhnee-chto-to-ne-delat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vazhnee-chto-to-ne-delat&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Важнее что-то не делать&lt;&#x2F;h2&gt;
&lt;p&gt;Просто процитирую tonsky:&lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;telegram.org&#x2F;js&#x2F;telegram-widget.js?15&quot; data-telegram-post=&quot;nikitonsky_pub&amp;#x2F;147&quot; data-width=&quot;100%&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;prototipirovanie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prototipirovanie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Прототипирование&lt;&#x2F;h2&gt;
&lt;p&gt;На первых этапах нужно реализовать как можно меньше фич, чтобы видеть результат и был шанс довести проект до конца, иначе вы выгорите, если для того чтобы увидеть первый результат вам потребуется 40ч чистого времени. Затем надо вносить только самые критичные фичи, чтобы снова видеть результат, и понимать что программа в любой момент времени выполняет максимальное число функций, которые вы от неё хотите.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё крайне важно делать результат быстро и сразу им пользоваться, ибо потребность в некоторых фичах невозможно понять пока не попользуешься.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому ImGui здесь отлично заходит для прототипов или пет-проектов. Он ускоряет разработку.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;srazu-otbrasyvat-slozhnye-fichi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#srazu-otbrasyvat-slozhnye-fichi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Сразу отбрасывать сложные фичи&lt;&#x2F;h2&gt;
&lt;p&gt;Как мне удалось так быстро сделать программу для изучения английских слов?&lt;&#x2F;p&gt;
&lt;p&gt;Потому что на самом начальном этапе я откинул самые сложные фичи:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Иметь встроенный словарь&lt;&#x2F;li&gt;
&lt;li&gt;Нормализация слов (убрать -s, -ing, -ed итд.)&lt;&#x2F;li&gt;
&lt;li&gt;Retained mode интерфейс&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Благодаря этому я тратил время только на войну с собой. Не воюя с другими библиотеками.&lt;&#x2F;p&gt;
&lt;p&gt;Такие вещи надо заранее откидывать, иначе ты никогда не закончишь свой проект. Вначале всё должно быть тупо и вручную.&lt;&#x2F;p&gt;
&lt;p&gt;Если ваш проект предполагает что-то очень сложное, что невозможно выкинуть, то советую подумать о том стоит ли вам браться за этот проект, или прямо сейчас делать что-то попроще.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;avtomatizatsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#avtomatizatsiia&quot;&gt;#&lt;&#x2F;a&gt;Автоматизация&lt;&#x2F;h1&gt;
&lt;p&gt;Щас хайпятся всякие GitHub Copilot, которые типо пишут код за программистов, и типо бу-бу-бу программистов заменят машины.&lt;&#x2F;p&gt;
&lt;p&gt;Посмотрите на эту статью ещё раз. Разве такое можно автоматизировать? Это настоящее мышление, которое требуется для программирования даже джуном. Это нельзя автоматизировать до тех пор, пока не будет создан сильный ИИ. А до тех пор Copilot будет только инструментом, который немного упрощает разработку в руках программиста.&lt;&#x2F;p&gt;
&lt;p&gt;А когда создадут сильный ИИ, то отпадёт смысл в любом человеческом труде на планете Земля, так что нет смысла волноваться конкретно за программистов. Все станем бесполезными вместе.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Этот способ не идеален, это скорее сборник идей, чем инструкция к действию каждый раз. Надеюсь эта статья натолкнёт вас на поиск своего способа планировать программы, который увеличит вашу эффективность.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Как я впервые в жизни начал делать графические приложения: плюсы и минусы ImGui</title>
            <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/imgui/</link>
            <guid>https://testzorax.github.io/p/imgui/</guid>
            <description>&lt;h1 id=&quot;chto-eto-takoe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-eto-takoe&quot;&gt;#&lt;&#x2F;a&gt;Что это такое&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Immediate_mode_GUI&quot;&gt;Immediate Mode Graphical User Interface (ImGui)&lt;&#x2F;a&gt; это паттерн&#x2F;концепция&#x2F;идея того как можно организовать реализовать библиотеку для графического интерфейса. Эту концепцию реализуют библиотеки, которые можно подключить и использовать в коде.&lt;&#x2F;p&gt;
&lt;p&gt;Пример библиотек:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ocornut&#x2F;imgui&quot;&gt;Dear ImGui&lt;&#x2F;a&gt; — самая популярная библиотека. Все называют её просто ImGui 😑, из-за чего возникает много путаницы. Библиотека изначально написана для C++, но существуют биндинги для &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flyover&#x2F;imgui-js&quot;&gt;JS&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hoffstadt&#x2F;DearPyGui&quot;&gt;Python&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;imgui-rs&#x2F;imgui-rs&quot;&gt;Rust&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mellinoe&#x2F;ImGui.NET&quot;&gt;.NET&lt;&#x2F;a&gt;. Я её не использовал.
&lt;ul&gt;
&lt;li&gt;Кстати, существуют две демки по запуску этой библиотеки в браузере через компиляцию C++ в WASM:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;jnmaloney.github.io&#x2F;WebGui&#x2F;imgui.html&quot;&gt;Демка 1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jnmaloney&#x2F;WebGui&quot;&gt;исходники&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pbrfrat.com&#x2F;post&#x2F;imgui_in_browser.html&quot;&gt;Демка 2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&quot;&gt;egui&lt;&#x2F;a&gt; — крайне перспективная библиотека для интерфейса на Rust. Я делал интерфейсы почти только на ней, так что можно считать, что вся данная статья написана под влиянием этой библиотеки. Мне кажется что в Dear ImGui должно быть примерно так же, но это только логичные догадки.
&lt;ul&gt;
&lt;li&gt;А у этой библиотеки официально и из коробки поддерживается запуск в браузере: &lt;a href=&quot;https:&#x2F;&#x2F;emilk.github.io&#x2F;egui&#x2F;#demo&quot;&gt;демка&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Обязательно зайдите в веб-демки и посмотрите как они выглядят.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sut&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sut&quot;&gt;#&lt;&#x2F;a&gt;Суть&lt;&#x2F;h1&gt;
&lt;p&gt;Существуют классические интерфейсы, которые, как я понял, называются &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Retained_mode&quot;&gt;Retained Mode GUI&lt;&#x2F;a&gt;. Я не знаю всех их глубин, и работал только с Delphi много лет назад. Насколько я помню с того опыта, чтобы создать кнопку, нужно:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Заранее сказать что эта кнопка существует, нарисовать её в специальном окошке, выбрать размеры итд.&lt;&#x2F;li&gt;
&lt;li&gt;Поставить коллбэк-функцию с названием вида &lt;code&gt;on_button_click_1337&lt;&#x2F;code&gt;, которая будет вызываться каждый раз когда по кнопке кликают.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В то время как чтобы сделать кнопку в ImGui, нужна всего-лишь одна строка кода:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Next&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;clicked&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; do on click
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Никаких рисований, никаких коллбэков, нажатие кнопки проверяется прямо сейчас, и если прямо сейчас кнопка не нажата, то и ничего не происходит. От этого и получается название Immediate.&lt;&#x2F;p&gt;
&lt;p&gt;Если вы хотите что-то посложнее, то вот пример, взятый из ридмишки egui:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;heading&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;My egui Application&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;horizontal&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ui&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;    ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Your name: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;text_edit_singleline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; name);
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(egui::Slider::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; age, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;age&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Click each year&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;clicked&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;Hello &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;#39;, age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, name, age));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;558&quot;
    height=&quot;204&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2c221cb704b7b8ee00.webp&quot; 
    onclick=&quot;full_screen(&#x27;demo.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;demo.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Если в retained mode вы задаёте для каждого виджета его координаты, то здесь вы описываете каждый виджет сверху-вниз слева-направо. Его соответствующие координаты вычисляются автоматически, всё размещается компактно.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё виджеты можно задавать в цикле или внутри if, и всё будет прекрасно работать:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;horizontal&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ui&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;button&lt;&#x2F;span&gt;&lt;span&gt;(i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;clicked&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;format!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#aeb52b;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt; is clicked&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, i));
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Здесь будет создано 10 кнопок, которые расположены сверху-вниз, и если кликнуть по одной кнопке, то на момент клика справа от кнопки появляется надпись о том что она кликнута.&lt;&#x2F;p&gt;
&lt;p&gt;Можете представить себе такое в retained mode? Такая возможность позволяет отлично абстрагировать и переиспользовать элементы интерфейса без сложных классов, наследований, Dependency Injection итд.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kak-eto-rabotaet&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-eto-rabotaet&quot;&gt;#&lt;&#x2F;a&gt;Как это работает&lt;&#x2F;h1&gt;
&lt;p&gt;Если для retained mode хотя бы приблизительно понятно как он работает, да и мы к нему привыкли, то для immediate mode не очевидно.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Интерфейс ImGui вызывается в цикле, каждая итерация цикла считается одним кадром. &lt;&#x2F;li&gt;
&lt;li&gt;Перед началом кадра библиотека должна получить все данные касательно положения мыши, нажатых клавиш и прочих вводных. &lt;&#x2F;li&gt;
&lt;li&gt;Затем вызывается функция, в которой пользователь библиотеки получает структуру &lt;code&gt;ui&lt;&#x2F;code&gt;, рисует свой интерфейс. В этот момент библиотека в реальном времени формирует все виджеты, для каждого виджета определяет попала ли на него мышь, и формирует вершины и треугольники, которые потом будут рисоваться.&lt;&#x2F;li&gt;
&lt;li&gt;Теперь библиотека возвращает все сформированные mesh&#x27;и и отдаёт их на рисование бэкенду. Он рисует это на экран.&lt;&#x2F;li&gt;
&lt;li&gt;И так повторяется 60 кадров в секунду.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Особенность здесь в том, что мы заранее не знаем будут у нас какие-то виджеты или нет, как бы мы это знали в retained mode, а значит весь интерфейс должен сформировываться полностью заново каждый кадр.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pliusy-i-minusy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pliusy-i-minusy&quot;&gt;#&lt;&#x2F;a&gt;Плюсы и минусы&lt;&#x2F;h1&gt;
&lt;div class=&quot;pros&quot;&gt;
&lt;span style=&quot;color: #090&quot;&gt;&lt;big&gt;&lt;b&gt;Плюсы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Писать интерфейс очень просто&lt;&#x2F;li&gt;
&lt;li&gt;Идеально подходит для заимствований Rust &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;cons&quot;&gt;
&lt;span style=&quot;color: #c00&quot;&gt;&lt;big&gt;&lt;b&gt;Минусы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Жрёт ресурсы компьютера&lt;&#x2F;li&gt;
&lt;li&gt;Невозможность автоматически вычислить layout&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Вообще на тему плюсов и минусов, советую почитать &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui#why-immediate-mode&quot;&gt;ридмишку egui&lt;&#x2F;a&gt;, там хорошо расписывается что и как. Некоторые пункты я лишь пересказываю.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pisat-interfeis-ochen-prosto&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pisat-interfeis-ochen-prosto&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Писать интерфейс очень просто&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Для того чтобы создать кнопку вам нужно всего-лишь написать одну строчку в if&#x27;е.&lt;&#x2F;li&gt;
&lt;li&gt;Вся информация об интерфейсе хранится в одной переменной — &lt;code&gt;ui&lt;&#x2F;code&gt;, которую вам просто нужно таскать в нужные функции.&lt;&#x2F;li&gt;
&lt;li&gt;Можно переиспользовать сложные интерфейсы простым написанием функции, без создания класса, наследования итд.&lt;&#x2F;li&gt;
&lt;li&gt;Нельзя получить рассинхрон интерфейса и данных, так как весь интерфейс существует только сейчас. Можно поддерживать существование интерфейса одновременно с данными.&lt;&#x2F;li&gt;
&lt;li&gt;Не надо думать декларативно или асинхронно, весь код интерфейса пишется императивно сверху-вниз, из прошлого в будущее.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Вообще, просто попробуйте сами. Увидите насколько это просто.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ideal-no-podkhodit-dlia-zaimstvovanii-rust&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ideal-no-podkhodit-dlia-zaimstvovanii-rust&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Идеально подходит для заимствований Rust&lt;&#x2F;h2&gt;
&lt;p&gt;Rust очень строгий к ссылкам, и я даже не представляю как на нём можно написать retained mode без использования &lt;code&gt;Arc&amp;lt;RefCell&amp;lt;_&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. Ведь там надо чтобы одновременно какое-нибудь поле ввода знало куда ему вводить информацию, и одновременно чтобы эта информация хранилась где-то ещё, кроме самого интерфейса.&lt;&#x2F;p&gt;
&lt;p&gt;А в ImGui ничего такого не нужно вообще, так как обращение к данным существует только в сейчас, можно передавать обычные ссылки. Давайте посмотрим на то как работает поле ввода:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;ui.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;text_edit_singleline&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; name);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;В него мы просто кидаем изменяемую ссылку на строку. Если за этот кадр нажались какие-то символы и данная строка изменилась, то она изменится после того как функция завершится.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhriot-resursy-komp-iutera&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zhriot-resursy-komp-iutera&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Жрёт ресурсы компьютера&lt;&#x2F;h2&gt;
&lt;p&gt;Для того чтобы каждый кадр заново вычислять весь интерфейс, требуется много вычислений. В retained mode почти всё можно вычислить заранее, и хранить только вычисленное, в том числе весь массив виджетов, перерисовывать только изменяющиеся части. В ImGui же такое невозможно, всё вычисляется и рисуется заново каждый кадр.&lt;&#x2F;p&gt;
&lt;p&gt;Это значит потребляется:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Оперативная память&lt;&#x2F;li&gt;
&lt;li&gt;Ресурсы процессора&lt;&#x2F;li&gt;
&lt;li&gt;Батарея&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;А ещё это значит что ваша программа не может работать на слабом железе, которое не может совершать такие вычисления 60 раз в секунду. В то время как retained mode на слабом железе работает прекрасно.&lt;&#x2F;p&gt;
&lt;p&gt;Или это значит что ваша программа будет красть ресурсы у других процессов, которые тоже хотят что-то делать каждый кадр, и в целом программа будет работать медленней.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя это не настолько критично на современном железе.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nevozmozhnost-avtomaticheski-vychislit-layout&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nevozmozhnost-avtomaticheski-vychislit-layout&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Невозможность автоматически вычислить layout&lt;&#x2F;h2&gt;
&lt;p&gt;Ещё одна проблема — мы не знаем что будет дальше. Это одновременно и мощь, потому что вы можете рисовать виджеты в цикле или через if, и одновременно вы не знаете какой итоговый размер будет у всего окна. Поэтому размер окна вычисляется пост-фактум.&lt;&#x2F;p&gt;
&lt;p&gt;Первый минус этого — ваше окно будет неадекватно реагировать на ресайзинг. Посмотреть на это можно &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;emilk&#x2F;egui&#x2F;issues&#x2F;94&quot;&gt;здесь (eng.)&lt;&#x2F;a&gt;. Там же есть ответ от создателя библиотеки почему это адекватное поведение для ImGui.&lt;&#x2F;p&gt;
&lt;p&gt;Второй минус — вам будет сложно засунуть виджеты в таблицу или сетку, потому что для нормальной отрисовки сетки нужно изначально знать размер одной ячейки.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще, egui как-то с этим справляется, но я бы не стал надеяться что это будет работать идеально.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nuzhno-priniat-pravila-igry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nuzhno-priniat-pravila-igry&quot;&gt;#&lt;&#x2F;a&gt;Нужно принять правила игры&lt;&#x2F;h1&gt;
&lt;p&gt;Мы очень привыкли к интерфейсам в retained формате. И при использовании ImGui так и хочется сделать интерфейс похожий на то что ты раньше видел.&lt;&#x2F;p&gt;
&lt;p&gt;Или хочется поругаться на ImGui что он отличается.&lt;&#x2F;p&gt;
&lt;p&gt;Но я понял что всё это не нужно, нужно просто принять правила игры. Нужно принять что:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;У вас будет тратиться процессор.&lt;&#x2F;li&gt;
&lt;li&gt;Ваши окна не смогут нормально реагировать на ресайзинг.&lt;&#x2F;li&gt;
&lt;li&gt;Вы будете размещать все виджеты сверху-вниз справа-налево, никакого ручного плейсинга по координатам.&lt;&#x2F;li&gt;
&lt;li&gt;Ваши окошки будут расти в высоту, а не в ширину, из-за того что вы не сможете адекватно использовать пространство сбоку.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Надо с этим просто смириться, и думать об интерфейсах в этих ограничениях. Тогда вы можете максимально эффективно использовать ImGui в своей жизни. Ведь не бывает такой простоты за бесплатно.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zachem-on-nuzhen&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zachem-on-nuzhen&quot;&gt;#&lt;&#x2F;a&gt;Зачем он нужен&lt;&#x2F;h1&gt;
&lt;p&gt;ImGui со всеми его минусами выглядит так, что он не создан для серьёзных интерфейсов по типу Photoshop, браузеров или мессенджеров. Зачем тогда он может быть нужен?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pet-proekty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pet-proekty&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Пет-проекты&lt;&#x2F;h2&gt;
&lt;p&gt;Вы можете писать пет-проект по нескольким причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Для того чтобы научиться какой-то технологии&lt;&#x2F;li&gt;
&lt;li&gt;По приколу&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В первом случае он не подходит, а вот во втором очень даже. Обычно при написании пет-проекта хотелось бы тратить на него как можно меньше времени, чтобы получить результат как можно быстрее, ибо на него нельзя тратить 40 часов в неделю, и надо ещё как-то жить человеческую жизнь.&lt;&#x2F;p&gt;
&lt;p&gt;Вот тут можно прекрасно пойти на компромисс всех минусов ImGui и просто забить на них, делая интерфейс, который просто работает.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programma-na-neskol-ko-chelovek&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#programma-na-neskol-ko-chelovek&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Программа на несколько человек&lt;&#x2F;h2&gt;
&lt;p&gt;Скажем вы работаете в какой-то компании, и у вас есть не-программисты, которым для решения каких-то внутренних процессов нужно написать программу именно с графическим интерфейсом, потому что пользоваться консольными утилитами или программированием они не умеют.&lt;&#x2F;p&gt;
&lt;p&gt;В этом случае понятно что данная программа не будет представлена наружу, она нужна для нескольких человек, и тратить на неё огромные ресурсы для разработки интерфейса в retained mode просто неразумно.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому можно позволить себе написать программу для них на ImGui силами одного-двух разработчиков.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;redkaia-programma&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#redkaia-programma&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Редкая программа&lt;&#x2F;h2&gt;
&lt;p&gt;Скажем, вы делаете свою программу для задания раскладки клавиатуры по типу &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;Microsoft_Keyboard_Layout_Creator&quot;&gt;MSKLC&lt;&#x2F;a&gt;. Сколько в вашей программе суммарно будет сидеть каждый пользователь? Дай бог за всю свою жизнь каждый пользователь просидит в вашей программе 5 часов. Ибо он один-два раза настроит свою раскладку, и успокоится.&lt;&#x2F;p&gt;
&lt;p&gt;Учитывая такое маленькое время использования, можно пойти на очень много жертв, чтобы не тратить слишком много времени на разработку. Тут можно и сделать программу, которая жрёт батарею, выглядит не идеально, не может нормально ресайзиться и так далее.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prototip&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prototip&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Прототип&lt;&#x2F;h2&gt;
&lt;p&gt;Я недавно написал &lt;a href=&quot;&#x2F;learn-words-post&quot;&gt;программу для изучения английских слов&lt;&#x2F;a&gt;, и только после того как я её написал и попопользовался несколько дней, я понял какие фичи прям позарез нужны. И до этих фич я бы не смог додуматься без написания программы, каким умным бы я ни был.&lt;&#x2F;p&gt;
&lt;p&gt;В нашем мире сейчас всё идёт к тому, что истина только в прототипах. Надо как можно раньше выпускать продукт на пользователей и допиливать только после обратной связи.&lt;&#x2F;p&gt;
&lt;p&gt;Это означает что на ImGui можно написать прототип серьёзной программы или какой-то фичи, опробовать её на практике, найти недостающие фичи, и только потом писать серьёзно, на миллионы пользователей, в retained mode.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chto-ia-sdelal-na-imgui&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-ia-sdelal-na-imgui&quot;&gt;#&lt;&#x2F;a&gt;Что я сделал на ImGui&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;the-tenet-of-life&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#the-tenet-of-life&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;The Tenet of Life&lt;&#x2F;h2&gt;
&lt;p&gt;Самый первый проект где я познакомился с ImGui — симулятор обратимых клеточных автоматов. Здесь я просто заюзал ImGui, который шёл внутри библиотеки macroquad, для того чтобы написать текст и сделать пару кнопочек.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1042&quot;
    height=&quot;577&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;175754ce5a69a9e300.webp&quot; 
    onclick=&quot;full_screen(&#x27;critters.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;critters.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Казалось бы такая простота, а это кардинально изменило юзабельность программы, ведь раньше все мои программы с графикой управлялись исключительно через нажатия букв на клавиатуре, которые написаны в текстовом файле &lt;code&gt;help.txt&lt;&#x2F;code&gt;. Например, так было в &lt;a href=&quot;&#x2F;net-creater#%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BE%D0%B9&quot;&gt;моей программе из 2015 года&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;portal-explorer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#portal-explorer&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Portal Explorer&lt;&#x2F;h2&gt;
&lt;p&gt;Я рисовал сцены с порталами через код при помощи рейтрейсинга. Чтобы подвинуть или повернуть что-то мне приходилось редактировать код и перекомпилировать проект. В один момент мне это надело и я захотел поворачивать вещи в реальном времени.&lt;&#x2F;p&gt;
&lt;p&gt;Сделал чтобы через интерфейс можно было вращать матрицы и это отображалось в реальном времени.&lt;&#x2F;p&gt;
&lt;p&gt;Это показалось слишком просто, я почувствовал силушку богатырскую, взял и напилил целый визуальный редактор на ImGui:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Immediate mode GUI is a marvelous thing! I just *did* visual scene editor in a couple of days using megaui from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fedor_games?ref_src=twsrc%5Etfw&quot;&gt;@fedor_games&lt;&#x2F;a&gt; in &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;macroquad?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#macroquad&lt;&#x2F;a&gt;! &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;iWoQeXJYER&quot;&gt;pic.twitter.com&#x2F;iWoQeXJYER&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; ilya sheprut (@optozorax) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1369940146460762112?ref_src=twsrc%5Etfw&quot;&gt;March 11, 2021&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;platform.twitter.com&#x2F;widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;Уже через него можно было редактировать матрицы, объекты и их код в шейдерах. Это на порядок упрощало процесс создания сцен, благодаря чему я стал эффективнее. Главный прикол что я сделал его просто за пару дней и он просто работал. Это самое приятное чувство при использовании ImGui.&lt;&#x2F;p&gt;
&lt;p&gt;Более подробно об этом можно почитать в моём канале в телеграме, начиная отсюда: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;351&quot;&gt;@optozorax_dev&#x2F;351&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А уже потом я ударился во все тяжкие, начал делать сложные интерфейсы, &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;398&quot;&gt;inline элементы&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;358&quot;&gt;формулы&lt;&#x2F;a&gt;, и интерфейс который задаёт другой интерфейс.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще знаете, когда я всё это задумывал, я изначально думал: «Ну сделаю чтобы в структурках на расте можно было писать порталы, и чтобы это потом кодогенерилось. Но, блин, это такой гемор, столько всего надо сделать.», а тут я нафиг сделал не только это, но ещё и сделал ко всему этому интерфейс, я вообще даже не мечтал о таком результате, который есть сейчас.&lt;&#x2F;p&gt;
&lt;p&gt;Настолько великую силу даёт ImGui. От абсолютного нуля до realtime sophisticated визуального редактора 3D сцен за один проект.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;790&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;47f5a66d3251a1bb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;portal_explorer.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;portal_explorer.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;learn-words&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#learn-words&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Learn Words&lt;&#x2F;h2&gt;
&lt;p&gt;Об этом проекте я написал &lt;a href=&quot;&#x2F;learn-words-post&quot;&gt;статью&lt;&#x2F;a&gt;. Его особенность в том, что заодно с написанием продукта, я решил проверить гипотезу о том что с ImGui напишу программу очень быстро. И написал. Быстро. На минимально рабочий прототип ушло 6ч чистого времени, а чтобы полностью завершить проект, ушло 40ч чистого времени. И это при учёте того что программа полностью построена на графическом интерфейсе, и там есть довольно сложные элементы.&lt;&#x2F;p&gt;
&lt;p&gt;Я бы такую программу с retained mode не написал бы никогда.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;748&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;28af5f083c672dfa00.webp&quot; 
    onclick=&quot;full_screen(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;full.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;..&amp;#x2F;learn-words-post&amp;#x2F;full.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;skhozhest-s-konsol-nymi-utilitami&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skhozhest-s-konsol-nymi-utilitami&quot;&gt;#&lt;&#x2F;a&gt;Схожесть с консольными утилитами&lt;&#x2F;h1&gt;
&lt;p&gt;Обычно люди в качестве пет-проектов, или просто начинающие программисты пишут консольные утилиты, потому что они проще, потому что они не требуют слишком много разбираться и ломать голову.&lt;&#x2F;p&gt;
&lt;p&gt;ImGui предоставляет точно такие же преимущества. И если раньше школьники начинали с консольных приложений, потому что они проще, то сейчас они могут начинать с ImGui.&lt;&#x2F;p&gt;
&lt;p&gt;Я уверен, что если школьник сразу начнёт делать свои программы и видеть результат в ImGui, то весь процесс будет для него в 10 раз интересней, чем когда он вводит данные из файла или в консоли. Это увеличивает вовлечённость и потенциал обучения программированию.&lt;&#x2F;p&gt;
&lt;p&gt;Надеюсь образовательные программы возьмут это на вооружение и будут школьников с первых уроков обучать ImGui.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;ImGui позволил мне впервые в жизни создать графические интерфейсы. Причём эти интерфейсы не просто делают программу чуть удобнее, чем нажимать буквы на клавиатуре, а кардинально меняют и моё взаимодействие со своим продуктом (визуальный редактор).&lt;&#x2F;p&gt;
&lt;p&gt;У этого вида интерфейсов есть свои плюсы и минусы. Нужно просто понимать когда его можно использовать, а когда нет; нужно принять все его ограничения, и тогда вы получите максимальные дивиденды.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Программа для изучения английских слов</title>
            <pubDate>Sun, 01 Aug 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/learn-words-post/</link>
            <guid>https://testzorax.github.io/p/learn-words-post/</guid>
            <description>&lt;h1 id=&quot;pro-moi-angliiskii&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-moi-angliiskii&quot;&gt;#&lt;&#x2F;a&gt;Про мой английский&lt;&#x2F;h1&gt;
&lt;p&gt;Вообще в школе и университете английскому меня толком не научили: я делал все задания, но сейчас написание и чтение текстов мне даётся с большим трудом. Пару лет назад пришло понимнаие, что если &lt;em&gt;самому&lt;&#x2F;em&gt; ничего не делать делать, то мой английский так и останется на очень низком уровне. &lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я пообещал себе смотреть &lt;strong&gt;всё&lt;&#x2F;strong&gt; с английской озвучкой и русскими субтитрами, если исходник изначально на английском. В оригинале сериалы и фильмы звучат намного лучше, я приноровился видеть одновременно экран и читать текст, плюс запомнил много выражений, и неожиданных смыслов у слов (например при общении по рации «copy that» = «принял»). Можно сказать что мой уровень вырос от этого действия. Но через год почувствовал что началась стагнация.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я перешёл на следующий шаг и пробовал смотреть Футураму на английских субтитрах. Я даже в целом понимал что происходит, но много предложений ускользало от меня. Так посмотрел около 4 сезонов, и не сказал бы что хоть как-то прокачался. Недавно посмотрел 2 сезона сериала «Агенты Щ.И.Т.» на английских субтитрах, и уже понимал больше. Но ничего не училось. Я понял что без активных действий нельзя научиться с таким просмотром. Да и качество удовольствия страдает от непонимания.&lt;&#x2F;p&gt;
&lt;p&gt;Из всех щелей доносится мысль что в первую очередь нужно знать слова, а понимание всего остального само придёт. И действительно, когда в сериале известные слова использовались в каких угодно комбинациях, я это понимал; но не понимал когда были неизвестные слова в простейших конструкциях.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Поэтому я принял решение что надо активно учить слова.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;al-ternativy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#al-ternativy&quot;&gt;#&lt;&#x2F;a&gt;Альтернативы&lt;&#x2F;h1&gt;
&lt;p&gt;Я попробовал разные приложения для телефона для изучения английского, и у них наблюдаются следующие &lt;strong&gt;проблемы&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Для проверки знания слова используется тест, где это слово находится рядом с 4 другими, разные значения слова не проверяются&lt;&#x2F;li&gt;
&lt;li&gt;Проверка слов начинается с самых простых&lt;&#x2F;li&gt;
&lt;li&gt;Нельзя сказать «я знаю это слово, убери»&lt;&#x2F;li&gt;
&lt;li&gt;Нельзя добавить своё слово&lt;&#x2F;li&gt;
&lt;li&gt;Нет статистики&lt;&#x2F;li&gt;
&lt;li&gt;Нельзя автоматически выбрать неизвестные мне слова из текста или видео&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Замечание:&lt;&#x2F;em&gt; до написания своей программы и черновика этой статьи я не знал про Anki. Не знаю какой конкретно набор фич у этой программы, так что пожалуйста расскажите в комментариях что есть в Anki, чего нет у меня и наоборот.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;proshlye-popytki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#proshlye-popytki&quot;&gt;#&lt;&#x2F;a&gt;Прошлые попытки&lt;&#x2F;h1&gt;
&lt;p&gt;Поэтому я ещё много лет назад хотел написать свою программу для изучения слов, где бы решил эти проблемы по-своему. Тогда я знал только C++, и не умел программировать ничего сложнее базовых вещей на WinAPI. Я пытался тогда написать такую программу, но у меня только на самую простейшую часть интерфейса ушло неимоверное число усилий. В итоге этот проект был заброшен. Кому интересно, вот ссылки: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;slovo-gonka&quot;&gt;1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;slovo_gonki2&quot;&gt;2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;450&quot;
    height=&quot;400&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a1506237a001f7e100.webp&quot; 
    onclick=&quot;full_screen(&#x27;old.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;old.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;segodniashnii-rezul-tat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#segodniashnii-rezul-tat&quot;&gt;#&lt;&#x2F;a&gt;Сегодняшний результат&lt;&#x2F;h1&gt;
&lt;p&gt;А сейчас я умею программировать очень сложные интерфейсы используя &lt;code&gt;ImGUI&lt;&#x2F;code&gt;, поэтому я решил попробовать снова написать эту программу, но только в этот раз в форме хакатона, замеряя время и стараясь сделать как можно быстрее.&lt;&#x2F;p&gt;
&lt;p&gt;И в результате у меня получилась программа, которая работает в браузере по следующему адресу: &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;learn_words&#x2F;&quot;&gt;optozorax.github.io&#x2F;learn_words&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А её исходники и бинари лежат здесь: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;learn_words&quot;&gt;github.com&#x2F;optozorax&#x2F;learn_words&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Вот скриншот с почти всеми окнами этой программы, так сказать, «для привлечения внимания»:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;748&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eb948192e153473300.webp&quot; 
    onclick=&quot;full_screen(&#x27;full.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;full.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;sposob-proverki-slova&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sposob-proverki-slova&quot;&gt;#&lt;&#x2F;a&gt;Способ проверки слова&lt;&#x2F;h1&gt;
&lt;p&gt;Мне кажется что учить слова при помощи тестов, где нужный перевод уже написан и его можно найти методом исключения — гиблое дело. Перевод должен активно доставаться из памяти. Я знаю это, так как моя первая программа работала именно таким образом, и это было ужасно, я не запоминал ничего. Да и подбирать соседние слова, чтобы не дать слишком много подсказок, — та ещё заморочка.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я решил что слова надо учить печатью на клавиатуре. То есть тебе показывается слово, а ты должен ввести все его переводы вручную.&lt;&#x2F;p&gt;
&lt;p&gt;Слово нельзя в один день несколько раз отпечатать и потом запомнить навсегда, запоминание должно проихсодить через интервалы времени. После добавления слова есть особый порядок когда его надо ввести снова:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;В первый день с подсказкой 2 раза, подсказка нужна чтобы запомнить слово.&lt;&#x2F;li&gt;
&lt;li&gt;В первый день без подсказки 3 раза, далее всё будет без подсказки.&lt;&#x2F;li&gt;
&lt;li&gt;Через день 3 раза&lt;&#x2F;li&gt;
&lt;li&gt;Через неделю 2 раза&lt;&#x2F;li&gt;
&lt;li&gt;Через 20 дней 2 раза&lt;&#x2F;li&gt;
&lt;li&gt;После всего этого слово будет считаться выученным&lt;&#x2F;li&gt;
&lt;li&gt;В промежутках слово не предлагается для ввода.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Эти числа взяты с потолка, я планирую вывести это в настройки, чтобы можно было делать режимы самому, и даже имитировать карточки для запоминания, где слово может повторяться всего 1 раз с подсказкой целую неделю каждый день. Я не знаю какой подход эффективнее, эту тему надо ресёрчить.&lt;&#x2F;p&gt;
&lt;p&gt;Ниже показано как вводится несколько разных переводов одного слова «mean».&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;468&quot;
    height=&quot;294&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8a1cee7767a398e400.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Когда происходит ввод с подсказкой, надо ввести слово на английском и на русском, ибо я заметил за собой что на скорости ввожу только русскую подсказку.&lt;&#x2F;p&gt;
&lt;p&gt;Первый перевод «означать» мы уже выучили и нам его не нужно вводить, второй перевод «смысл» надо ввести с подсказкой, так как мы его только недавно добавили, а третий перевод «грубый» мы уже вводили с подсказками, а теперь надо активно доставать из памяти. То есть в этой программе учитывается что слово может иметь много разных смыслов.&lt;&#x2F;p&gt;
&lt;p&gt;По этим полям можно перемещаться при помощи Enter.&lt;&#x2F;p&gt;
&lt;p&gt;После ввода можно нажать кнопку «Next» и посмотреть насколько правильно мы ввели.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;472&quot;
    height=&quot;265&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7a28576739d46feb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В данном окне предлагаются как английкие слова где надо ввести русский перевод, так и наоборот. Я считаю что такое чередование очень важно, потому что я заметил на себе что некоторые слова легче вспоминать, когда видишь конкретный язык, а наоборот очень трудно.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом я решаю 1 проблему из введения.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;sposob-dobavleniia-slov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sposob-dobavleniia-slov&quot;&gt;#&lt;&#x2F;a&gt;Способ добавления слов&lt;&#x2F;h1&gt;
&lt;p&gt;Во всех программах для изучения английских слов, обычно все их переводы и значения уже добавлены в программу, поэтому ты запускаешь и начинаешь работать. Я не мега-корпорация, и я делаю программу в первую очередь для себя, и хочу получить результат как можно быстрее, поэтому решил с этим не заморачиваться. Я выбрал путь ручного добавления.&lt;&#x2F;p&gt;
&lt;p&gt;Слово вместе со всеми его переводами можно добавить вручную. Это означает что ты сам должен знать какое слово тебе надо выучить и сам искать ему переводы.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;563&quot;
    height=&quot;556&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;67678f2ba051419100.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Этим мы решаем 2, 3, 4 проблемы из введения.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dobavlenie-cherez-tekst-i-subtitry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dobavlenie-cherez-tekst-i-subtitry&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Добавление через текст и субтитры&lt;&#x2F;h2&gt;
&lt;p&gt;Для этого есть специальное окошко для экспорта из субтитров формата &lt;code&gt;srt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;574&quot;
    height=&quot;617&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2555a4501a18abad00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw4.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Затем можно нажать кнопку «Use this text».&lt;&#x2F;p&gt;
&lt;p&gt;Программа говорит нам сколько различных видов слов в этом тексте нашлось. Мне кажется это крайне эффективный способ искать неизвестные и известные слова.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;305&quot;
    height=&quot;239&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3bb96404558c37f700.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw2.5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw2.5.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ещё мы получаем окошко, которое разобрало все эти слова и предлагает ввести информацию для каждого слова.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;946&quot;
    height=&quot;444&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;739053e3c2ee80d200.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw5.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;После добавления информации об одном слове, автоматически происходит переход к следующему слову.&lt;&#x2F;p&gt;
&lt;p&gt;Здесь есть кнопка для «мусорных» слов. Это слова-артефакты парсинга субтитров, например &lt;code&gt;&amp;lt;i&amp;gt;&lt;&#x2F;code&gt;, &lt;code&gt;Mack:&lt;&#x2F;code&gt;, &lt;code&gt;O-o-o-okay&lt;&#x2F;code&gt;. Они записываются в программу только чтобы в будущем фильтроваться и не мешать. Не знаю в чём принципиальное различие между «Known this word» и «Trash word» с программистской точки зрения, но пусть будет.&lt;&#x2F;p&gt;
&lt;p&gt;Видим что из данных субтитров вышло 531 уникальных слов. Не волнуйтесь, так не будет каждый раз, это только в первые разы надо для кучи слов сказать что вы их знаете, а затем будет проще, все добавленные слова будут фильтроваться в следующих текстах и субтитрах. В итоге программа будет у вас спрашивать только то что вы действительно не знаете, или что она не знает.&lt;&#x2F;p&gt;
&lt;p&gt;В окне «Add words» справа показан контекст данного слова, чтобы можно было лучше понять какой именно перевод выбрать для изучения. И есть отдельное окошко, которое ищет данное слово в базе уже имеющихся слов. В окошке поиска, строка автоматически обновляется при выборе следующего слова.&lt;&#x2F;p&gt;
&lt;p&gt;Аналогично можно добавить слова из обычного текста. Можно перед прочтением статьи просто скопировать её в буфер обмена, вставить в программу и узнать все неизвестные слова.&lt;&#x2F;p&gt;
&lt;p&gt;Правда тут есть проблема, что у меня не происходит никакой нормализации слов, то есть слова с &lt;code&gt;-s&lt;&#x2F;code&gt;, &lt;code&gt;-ing&lt;&#x2F;code&gt; считаются разными, и вам для всех слов придётся вручную говорить «да, я это слово знаю». Ну и из-за этого размер базы должен быть в N раз больше, чем если бы слова нормализовывались. Я не делал это во имя простоты, и потому что обычно инструменты для нормализации распространяются как &lt;code&gt;.exe&lt;&#x2F;code&gt; или очень сложные для использования библиотеки. Или на базы для нормализации вообще наложены лицензионные ограничения.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё фразеологизмы, идиомы и прочие штуки через пробел, не детектятся автоматически, только разделение пробелом. Так что если хотите выучить что-то такое, вам придётся добавлять это вручную.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, &lt;strong&gt;наверное&lt;&#x2F;strong&gt;, скачивание субтитров из интернета даже не считается пиратством, поэтому вот вам несколько полезных ссылок:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.movavi.ru&#x2F;learning-portal&#x2F;best-subtitle-download-sites.html&quot;&gt;Про сайты для скачивания субтитров на сайте Movavi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;subtitleseeker.in&#x2F;&quot;&gt;Subtitle Seeker&lt;&#x2F;a&gt; — субтитры на английском языке.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.opensubtitles.org&#x2F;ru&#x2F;ssearch&#x2F;sublanguageid-rus&#x2F;idmovie-158962&quot;&gt;opensubtitles.org&lt;&#x2F;a&gt; — тут есть русские субтитры, но сомнительного качества. Так что лучше брать субтитры, которые идут вместе с фильмом или сериалом на сами знаете каком сайте.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Этим мы решаем 6 проблему из введения.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sinkhronnye-subtitry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sinkhronnye-subtitry&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Синхронные субтитры&lt;&#x2F;h2&gt;
&lt;p&gt;Во время добавления слов я понял что одного контекста на английском языке недостаточно, иногда встречаются такие слова, которые я никак не могу понять. И тут бы очень пригодился труд профессионалов, которые уже перевели данные субтитры на русский язык.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому у меня есть окошко, в котором можно вставить два разных файла субтитров: английские и русские, субтитры должны быть от одной серии или одного фильма.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;468&quot;
    height=&quot;355&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;80b9158827ea750a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw101.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw101.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И затем при добавлении слова, скролл автоматически прыгает на пару рус-англ для данного слова в субтитрах. Конечно, алгоритм расстановки субтитров рядом не идеален, но он ошибается всего на 1-2 позиции, что не очень критично.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;956&quot;
    height=&quot;793&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e30d47fe656e209000.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw100.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw100.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;С такой фичей добавлять слова невероятно удобно. Вы не знаете, есть ли такая фича где-нибудь ещё?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;statistika&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#statistika&quot;&gt;#&lt;&#x2F;a&gt;Статистика&lt;&#x2F;h1&gt;
&lt;p&gt;Программа для изучения этих слов подразумевает что в ней надо будет работать регулярно, что в ней будет тратиться какое-то значительное время. И раз происходят такие затраты, хотелось бы видеть какие именно у них результаты. Поэтому отсутствие нормальной статистики может дизморалить заниматься любым делом.&lt;&#x2F;p&gt;
&lt;p&gt;В первую очередь внизу есть панель, которая показывает статистику за текущий день. Такую панель я видел в программе VerseQ для обучения слепой печати, и мне это очень понравилось. Очень приятно видеть что сегодня я сделал столько-то работы за столько-то времени, так же это позволяет хорошо себя контролировать.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1046&quot;
    height=&quot;74&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e4d402f2ac8437cf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw6.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw6.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Есть полная статистика:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;254&quot;
    height=&quot;366&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c09d2f6b46063a2a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw7.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw7.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Можно посмотреть статистику по дням: количество слов по категориям, время работы, количество попыток.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;333&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1fb417a105ea1f9a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw8.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw8.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;334&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3aaeec649a71446100.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw9.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw9.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;330&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f399f5587d63f09e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw10.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw10.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Кстати, так как время замеряется и потом отражается в статистике, то может произойти ситуация что вы отошли, а программа продолжает замерять. И не хочется в статистике видеть такие мусорные данные. Поэтому после 15 секунд бездействия время перестаёт замеряться и весь экран осветляется с характерной иконкой паузы.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;361&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d2d4fe7c9992dee200.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw12.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw12.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;github-like&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#github-like&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;GitHub-like&lt;&#x2F;h2&gt;
&lt;p&gt;График активности в GitHub это просто гениальная вещь. У этой визуализации просто должен быть отдельный термин, потому что она должна быть в любом сервисе и программе, где что-то можно делать регулярно. Такая визуализация работы побуждает тебя работать лучше сейчас, потому что ты раньше хорошо работал, позволяет тебе окинуть взглядом всю твою работу, побуждает заниматься каждый день.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1132&quot;
    height=&quot;304&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;390c18bd53fe36b600.webp&quot; 
    onclick=&quot;full_screen(&#x27;github.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;github.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому я просто не мог не сделать свою программу без такой фичи.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;831&quot;
    height=&quot;307&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6594cee3e2ca4cb700.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw11.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw11.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И я сделал даже лучше: у меня можно крутить этот график, а ещё можно выбирать визуализацию трёх разных параметров, месяцы и года разделены линиями, а самое главное — неделя начинается с понедельника.&lt;&#x2F;p&gt;
&lt;img
    class=&quot;not-default img-one&quot;
    width=&quot;844&quot;
    height=&quot;274&quot;
    src=&quot;&amp;#x2F;p&amp;#x2F;learn-words-post&amp;#x2F;lw13.gif&quot;&gt;
&lt;p&gt;Это окно всегда автоматически открывается при открытии программы, чтобы сразу при открытии было видно сколько ты работал и чтобы это придавало мотивации работать сейчас.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;avtomaticheskoe-perekliuchenie-raskladki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#avtomaticheskoe-perekliuchenie-raskladki&quot;&gt;#&lt;&#x2F;a&gt;Автоматическое переключение раскладки&lt;&#x2F;h1&gt;
&lt;p&gt;У меня русские и английские переводы даются в случайном порядке. Поэтому может требоваться постоянно переключать раскладку. При вводе перевода программа точно знает на каком языке это должно быть, поэтому можно сделать чтобы язык переключался автоматически.&lt;&#x2F;p&gt;
&lt;p&gt;У меня это реализовано таким образом, что просто имеется хэш-мапа, которая для каждой английской буквы знает какая должная быть русская и наоборот. То есть когда вам надо набрать русское слово, вы просто печатаете его как будто сейчас включена русская раскладка, а программа автоматически сама всё исправит. Этот подход хорош тем, что не требует особых прав от программы по переключению раскладки. Например, в браузере через WASM переключить раскладку точно невозможно в целях безопасности. Но этот подход плох тем, что не будет работать для языков, где используются одинаковые символы с обеих сторон, например английский-немецкий. Если вдруг этой программой будет пользоваться больше чем 2 человека, я подумаю насчёт решения этой проблемы.&lt;&#x2F;p&gt;
&lt;p&gt;В настройках можно указать вашу раскладку, введя в одном поле все русские буквы, а в другом поле все английские в том же порядке. Символ новой строки игнорируется, а пробел может быть использован когда у вас невозможно набрать нужный символ. Этот подход хорош тем, что у вас могут быть самые упоротые раскладки клавиатуры типо Дворака и Диктора, а автопереключение раскладки всё-равно будет работать.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;477&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6b1799b6fd74ce8a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw14.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw14.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я туда вставил свою раскладку и у меня для переключения раскладки в голове тратится 0 времени, хотя я слышал что кому-то это может быть сложно. Тоже есть простор для фич.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;platforma&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#platforma&quot;&gt;#&lt;&#x2F;a&gt;Платформа&lt;&#x2F;h1&gt;
&lt;p&gt;Программа может запускаться как в браузере, так и как нативное приложение. &lt;&#x2F;p&gt;
&lt;p&gt;В браузере она запускается исключительно локально у вас, я не покупал никаких серверов, все вычисления происходят у вас. И я люблю такой подход, WASM это прекрасно. Получается это просто приложение, которое можно открыть в браузере без скачивания, и которое будет существовать независимо от меня.&lt;&#x2F;p&gt;
&lt;p&gt;А разница между браузерной и нативной программой только в том как будут храниться ваши данные. Для браузера они хранятся через &lt;a href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;API&#x2F;Web_Storage_API&quot;&gt;Web Storage API&lt;&#x2F;a&gt;, который сохраняется между закрытием вкладок или браузера, и вроде как даже может работать между разными браузерами для одного компьютера.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;eksport-dannykh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#eksport-dannykh&quot;&gt;#&lt;&#x2F;a&gt;Экспорт данных&lt;&#x2F;h1&gt;
&lt;p&gt;Если для локального приложения все ваши данные и статистика лежат в одном файле &lt;code&gt;local.data&lt;&#x2F;code&gt; рядом с программой, то непонятно что делать с браузерными данными. А что если я хочу переустановить систему, как мне достать данные?&lt;&#x2F;p&gt;
&lt;p&gt;Специально для решения таких вопросов я сделал возможность экспортировать и импортировать всю статистику через буфер обмена. Пользователю просто передаётся эта информация и он может хранить её как ему вздумается.&lt;&#x2F;p&gt;
&lt;p&gt;Я считаю это очень важная возможность для вообще всех программ. Я не особо доверяю всем этим облачным программам, которые хранят мои вещи где-то там, и у меня нет возможности скачать все мои данные, или вставить их в другой аккаунт.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;727&quot;
    height=&quot;394&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;449bc1b00b98732500.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw200.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw200.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так что вы сможете пользоваться этой программой даже если github умрёт или я заброшу её.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pochti-liuboi-iazyk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pochti-liuboi-iazyk&quot;&gt;#&lt;&#x2F;a&gt;Почти любой язык&lt;&#x2F;h1&gt;
&lt;p&gt;Я называю это программой для изучения английских слов, но по факту она может использоваться для изучения любых слов на любых двух языках. Весь дизайн программы сделан язык-agnostic, будь то добавление слов или автопереключение раскладки.&lt;&#x2F;p&gt;
&lt;p&gt;Пока что не поддерживаются языки с направлением письма справа-налево, и иероглифы. Ибо используемые библиотеки пока не настолько сильны. Так что можно сказать что в программе можно учить &lt;em&gt;*почти&lt;&#x2F;em&gt; любой язык.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;open-source&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#open-source&quot;&gt;#&lt;&#x2F;a&gt;Open-source&lt;&#x2F;h1&gt;
&lt;p&gt;Это open-source программа на 3.5к строк, что значит что вы вполне сможете внести сюда свои изменения, если будете в этом заинтересованы. Что хорошо по сравнению с программами, которые слишком велики для осознания.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wip&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#wip&quot;&gt;#&lt;&#x2F;a&gt;WIP&lt;&#x2F;h1&gt;
&lt;p&gt;Но данная программа находится в состоянии WIP (Work In Progress), что означает что лично вам некоторых фич может не хватать. Если вы будете пользоваться этой программой, пишите мне про баги или фичи, которые вам нужны, буду думать.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pol-zovanie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pol-zovanie&quot;&gt;#&lt;&#x2F;a&gt;Пользование&lt;&#x2F;h1&gt;
&lt;p&gt;Я уже пользовался этой программой 5 дней, и за время пользования обнаружилось очень много дыр, для которых были нужны фичи, которые я успешно пофиксил, но других, менее критичных дыр, осталось прилично.&lt;&#x2F;p&gt;
&lt;p&gt;В первый день я потратил очень много времени на добавление слов из самой первой серии «Агентов Щ.И.Т.»: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Вышло 900 уникальных слов.&lt;&#x2F;li&gt;
&lt;li&gt;Из них 70 слов я не знаю.&lt;&#x2F;li&gt;
&lt;li&gt;На отфильтровывание этого и перевод этих 70 я потратил 50 минут.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;И это для серии, которая длится 40 минут. Так что смотрите как бы не потратить слишком много времени на добавление слов. Разбивайте это на короткие эпизоды, чтобы ежедневно не тратить слишком много времени. Или заранее добавьте много слов, а затем каждый день выбирайте из них нужное количество для выучивания.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я постарался выучить все эти 70 слов за один день. А что, немного слов, по идее должно быть быстро. В итоге:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;На самом деле слов ~140, потому что добавляется рус-англ и англ-рус.&lt;&#x2F;li&gt;
&lt;li&gt;Если каждую пару надо ввести 5 раз за первый день, то это итого 700 попыток минимум.&lt;&#x2F;li&gt;
&lt;li&gt;У меня ушло 762 попытки: 681 правильная и 81 неправильная.&lt;&#x2F;li&gt;
&lt;li&gt;И всё это 55 минут непрерывного времени.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так много неправильных попыток, потому что в 140 словах сложно ориентироваться, часто забывал.&lt;&#x2F;p&gt;
&lt;p&gt;Так что моё желание учить все слова из одной серии перед её просмотров провалились, это слишком много для одного раза. Мне кажется можно попытаться выучить все слова какого-то сериала или фильма перед его просмотром, причём только по субтитрам спойлеры не должны быть особо критичны, так как ничего не понятно, и это должно забыться.&lt;&#x2F;p&gt;
&lt;p&gt;Мне кажется оптимально учить в день 10-20 слов, чтобы максимум выходило 20-30 минут в день, но делать это прям каждый день. Ещё слишком много слов в день не надо учить, потому что сегодня надо набирать не только новые слова, но и ещё слова, выученные 2, 9, 29 дней назад.&lt;&#x2F;p&gt;
&lt;p&gt;В программе можно выбирать сколько новых слов взять для сегодняшней тренировки:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;314&quot;
    height=&quot;186&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eefca4c8537cfbc200.webp&quot; 
    onclick=&quot;full_screen(&#x27;lw300.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lw300.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Теперь я занимаюсь изучением слов через свою программу. Я обязательно опубликую свои результаты и мысли через месяц и больше.&lt;&#x2F;p&gt;
&lt;p&gt;Я реализовал эту программу в полном соответствии со своим мировоззрением, видением обязательных фич и отношению к целесообразности переусложнений. И мне это нравится, потому что по моему мнению много программ делают неправильно, и я могу точно сказать что в них надо дополнить или как их сделать по-другому, чтобы они стали лучше. Кстати, на эту тему можно почитать мою страницу &lt;a href=&quot;&#x2F;ideas&quot;&gt;Идеи&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Но с другой стороны я поступил неправильно что недостаточно хорошо изучил рынок подобных программ, в частности нахваливаемую Anki. И получается, опять я занимался велосипедостроением. От губительного перфекционизма вылечился: не рефакторю код по 10 раз, теперь осталось вылечиться от велосипедостроения.&lt;&#x2F;p&gt;
&lt;p&gt;Я сделал эту программу со первичными фичами за 18 часов чистого времени, что невероятно быстро для программы с интерфейсом. Минимально рабочая версия была готова за 6 часов. За это спасибо концепции &lt;code&gt;ImGUI&lt;&#x2F;code&gt;, на которой невероятно просто и быстро можно делать интерфейсы, а ещё моему умению планировать программу и статической типизации Rust. Я полностью задокументировал процесс планирования этой программы, и каждого этапа её написания, так что скоро выйдет статья о том как она была написана и о том как я собираю идеи и организовываю себя для написания программ. Статья может быть полезна как новичкам, так и с точки зрения того как её откритикуют более опытные и умные люди.&lt;&#x2F;p&gt;
&lt;p&gt;Так что подписывайтесь на канал в телеграме, если ещё не: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&quot;&gt;@optozorax_dev&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h1 id=&quot;upd-obnovlenie-0-2-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#upd-obnovlenie-0-2-1&quot;&gt;#&lt;&#x2F;a&gt;UPD: обновление 0.2.1&lt;&#x2F;h1&gt;
&lt;p&gt;Сейчас 11 августа 2021г. и я выпускаю версию &lt;code&gt;0.2.1&lt;&#x2F;code&gt; со следующими фичами:&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pereezd-na-egui-web&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pereezd-na-egui-web&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Переезд на &lt;code&gt;egui-web&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;С телефона теперь в принципе возможно пользоваться программой.&lt;&#x2F;li&gt;
&lt;li&gt;Работает IME для ввода иероглифов и нестандартных символов.&lt;&#x2F;li&gt;
&lt;li&gt;Белая тема выглядит лучше. Правда там некоторые цвета требуют доработок, это будет исправлено в следующих версиях.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;okno-learn-words&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#okno-learn-words&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Окно «Learn Words»&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;506&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;30167fb13ef1802c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;up2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;up2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;Можно инвертировать результат набора. Например, если вы ошиблись в одной букве или набрали абсолютно эквивалентный синоним.&lt;&#x2F;li&gt;
&lt;li&gt;Если слово было набрано неправильно, то дальше нельзя идти пока это слово не будет набрано с подсказкой.&lt;&#x2F;li&gt;
&lt;li&gt;Улучшено поле ввода с подсказкой. Теперь оно просто не пускает дальше, пока подсказка не будет введена правильно, и светится зелёным когда подсказка введена правильно.&lt;&#x2F;li&gt;
&lt;li&gt;Теперь по полям можно передвигаться не только с помощью &lt;code&gt;Enter&lt;&#x2F;code&gt;, но и с помощью &lt;code&gt;Backspace&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Теперь в очередь для изучения на текущую сессию для каждого слова добавляются его переводы. Раньше в один день вы могли изучать рус-англ пару, а в другой день англ-рус, в зависимости от того как рандом повезёт, и это оказалось неудобным на практике.&lt;&#x2F;li&gt;
&lt;li&gt;Теперь для повторения выбираются в первую очередь наиболее старые слова, а не в порядке рандома.&lt;&#x2F;li&gt;
&lt;li&gt;Теперь сначала набираются все слова с подказкой, а затем все слова без подсказок. Раньше они давались вперемешку и могло оказаться так что под конец набора всех слов вам даётся новое слово. Мне кажется лучше сначала набрать все новые слова, а потом доставать их из памяти вместе с повторяемыми.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;okno-add-subtitles-from&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#okno-add-subtitles-from&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Окно «Add subtitles from ...»&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;470&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d24c1c8ed0a0266800.webp&quot; 
    onclick=&quot;full_screen(&#x27;up3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;up3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;Можно добавлять известные переводы для данного слова.&lt;&#x2F;li&gt;
&lt;li&gt;Можно скипать слова. Это может быть удобно чтобы из текста добавить только известные слова, а неизвестные скипнуть и оставить на будущее, или если вы не хотите прямо щас разбираться с очень сложным словом.&lt;&#x2F;li&gt;
&lt;li&gt;Появилась возможность вернуться к предыдущему слову.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;okno-edit-word&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#okno-edit-word&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Окно «Edit word»&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;308&quot;
    height=&quot;426&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1eb102ca33d2bb3500.webp&quot; 
    onclick=&quot;full_screen(&#x27;up4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;up4.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;Пофикшены баги.&lt;&#x2F;li&gt;
&lt;li&gt;Можно добавлять и удалять элементы перевода.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;okno-nastroek&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#okno-nastroek&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Окно настроек&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;464&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9b2aa5263eb3756200.webp&quot; 
    onclick=&quot;full_screen(&#x27;up5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;up5.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;Теперь можно задавать количество повторений через день, и вообще настроить поведение программы как захочется, чтобы оно было как в Anki, или как вам нравится. Например, кто-то советует изучать слова следующим образом: первую неделю каждый день повторять данное слово по одному разу. Вы можете настроить и это.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;prochee&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prochee&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Прочее&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Пофикшено измерение текущего дня.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Свойства обратимых 1D автоматов</title>
            <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/invertible-1d-automata/</link>
            <guid>https://testzorax.github.io/p/invertible-1d-automata/</guid>
            <description>&lt;style&gt;
.container { 
  display: flex; 
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  width: 90%;
  border: 1px solid gray;
  padding: 10px;
  margin: 5px;
}
.automata-col {
  border: 1px solid rgba(39,41,43,0.1); 
  background-color: rgba(39,41,43,0.03);
  padding: 10px;
  margin: 5px;
  min-width: 110px;
  flex: 1 0 0%;
}
.pixelated {
  -ms-interpolation-mode: nearest-neighbor;
  image-rendering: crisp-edges;
  image-rendering: pixelated;
}

.skip-img {
  display: none;
}

.skip-img, .both-img, .any-img {
  width: 150px;
  margin: 2px;
  border-radius: 0px;
}
.automata-name {
  font-size: 12pt;
  font-family: monospace;
}
.svg {
}
&lt;&#x2F;style&gt;
&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Предполагается что перед чтением этой статьи вы уже знакомы с тем что такое Клеточный автомат, и знакомы с правилом &lt;code&gt;110&lt;&#x2F;code&gt; или правилом &lt;code&gt;30&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Если нет, то рекомендуется прочитать эти две статьи:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;273393&#x2F;&quot;&gt;Простейшие клеточные автоматы и их практическое применение&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;company&#x2F;wolfram&#x2F;blog&#x2F;470425&#x2F;&quot;&gt;30.000$ за решение задач о Правиле 30 для клеточных автоматов — конкурс от Стивена Вольфрама&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ещё предполагается что вы знакомы с тем что такое &lt;strong&gt;обратимый&lt;&#x2F;strong&gt; клеточный автомат. Если нет, то рекомендуется прочитать эту статью на Википедии:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9A%D1%80%D0%B8%D1%82%D1%82%D0%B5%D1%80%D1%8B&quot;&gt;Криттеры&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так же я писал про обратимые автоматы в своём телеграм канале начиная отсюда: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;235&quot;&gt;optozorax_dev&#x2F;235&lt;&#x2F;a&gt; на 7 постов.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tablitsa-avtomatov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tablitsa-avtomatov&quot;&gt;#&lt;&#x2F;a&gt;Таблица автоматов&lt;&#x2F;h1&gt;
&lt;p&gt;В данной статье я хочу аналогично предыдущим рассмотреть одномерные обратимые клеточные автоматы и выяснить их свойства.&lt;&#x2F;p&gt;
&lt;p&gt;Обратимые клеточные автоматы можно получить множеством способов, но я выберу именно тот, которым сконструированы Криттеры, а именно — соседство Марголуса. В одномерном случае оно будет иметь размер 2 бита, поэтому количество возможных состояний будет равно 2² = 4, а количество возможных правил равно 2²! = 24.&lt;&#x2F;p&gt;
&lt;p&gt;Все эти автоматы можно посмотреть в таблице ниже. Здесь всё начинается со случайной строки из нулей и единиц, конец которой замкнут на начало. Затем к ней применяются правила данного автомата, и каждая получающаяся строка прибавляется вниз картинки. То есть на картинках время идёт вниз, а направление вправо или влево. Сверху подписан номер автомата (число от 0 до 23), а снизу подписано правило этого автомата, то есть перестановка чисел &lt;code&gt;[0, 1, 2, 3]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col trivial trivial_two time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;0&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;0_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;0_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 1 2 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;1_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 1 3 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;2_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;2_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 2 1 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;3&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;3_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;3_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 2 3 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;4&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;4_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;4_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 3 1 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;5&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;5_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;5_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 3 2 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;6&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;6_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;6_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 0 2 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial_two time_symmetricale anti_time_symmetricale self_inverse&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;7&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;7_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;7_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 0 3 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;8&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;8_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;8_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 2 0 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;9&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;9_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;9_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 2 3 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;10&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;10_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;10_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 3 0 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;11&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;11_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;11_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 3 2 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;12&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;12_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;12_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 0 1 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;13&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;13_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;13_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 0 3 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;14&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;14_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;14_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 1 0 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;15&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;15_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;15_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 1 3 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial_two time_symmetricale anti_time_symmetricale self_inverse&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;16&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;16_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;16_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 3 0 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;17&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;17_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;17_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 3 1 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;18&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;18_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;18_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 0 1 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;19&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;19_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;19_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 0 2 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;20&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;20_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;20_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 1 0 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;21_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 1 2 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;22&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;22_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;22_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 2 0 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial trivial_two time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;23&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;23_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;23_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 2 1 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Так как соседство Марголуса требует на чётных шагах применять правила, начиная с чётных ячеек, а на нечётных шагах применять правила для нечётных ячеек, я добавил возможность включать и выключать показ нечётных шагов. Некоторые автоматы ведут себя одинаково для чётных шагов, например &lt;code&gt;0&lt;&#x2F;code&gt; ~ &lt;code&gt;23&lt;&#x2F;code&gt;, &lt;code&gt;2&lt;&#x2F;code&gt; ~ &lt;code&gt;10&lt;&#x2F;code&gt; ~ &lt;code&gt;13&lt;&#x2F;code&gt; ~ &lt;code&gt;21&lt;&#x2F;code&gt;. Это можно настраивать здесь:&lt;br&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;img_intermediate&quot; name=&quot;img_intermediate&quot; checked&gt; Показывать нечётные шаги&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;razlichnye-svoistva&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#razlichnye-svoistva&quot;&gt;#&lt;&#x2F;a&gt;Различные свойства&lt;&#x2F;h1&gt;
&lt;p&gt;Ещё в данной таблице можно показать различные свойства автоматов. Можете выбирать конкретное свойство и пролистать вверх, автоматы обладающие им, подсветятся красным цветом.&lt;&#x2F;p&gt;
&lt;form name=&quot;properties_radio&quot;&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;all&quot; checked &gt; Убрать свойства&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;trivial&quot; &#x2F;&gt; Сохраняют текущее состояние&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;trivial_two&quot; &#x2F;&gt; Сохраняют через два состояния&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;self_mirror&quot; &#x2F;&gt; Зеркалирование правил приводит к самому себе&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;save_count&quot; &#x2F;&gt; Сохраняют количество закрашенных клеток&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;time_symmetricale&quot; &#x2F;&gt; Одинаковые законы для симуляции назад и вперёд во времени&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;anti_time_symmetricale&quot; &#x2F;&gt; Правило для симуляции назад во времени равно текущему с инвертированными цветами&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;self_inverse&quot; &#x2F;&gt; Инвертирование цвета правил приводит к самому себе&lt;&#x2F;label&gt;&lt;br&gt;
&lt;&#x2F;form&gt;
&lt;p&gt;Все свойства вычисляются для автоматов через 2 шага, то есть после чётного и нечётного хода. Мне кажется оценивать свойства автомата после 1 шага, не зная какой был до этого: чётный или нечётный не очень полезно, потому что вариантов становится слишком много, и свойств практически не остаётся. Некоторые свойства я объясню далее:&lt;&#x2F;p&gt;
&lt;p&gt;Самые скучные автоматы - &lt;strong&gt;сохраняющие текущее состояние&lt;&#x2F;strong&gt;. Это автоматы &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt;. Они не делают ничего.&lt;&#x2F;p&gt;
&lt;p&gt;Чуть менее скучные автоматы — &lt;strong&gt;сохраняющие через два состояния&lt;&#x2F;strong&gt;. Относительно данного шага, их шаг в прошлое и шаг в будущее должны быть одинаковы. В итоге это выливается в то, что они приходят к изначальному состоянию максимум через 4 шага. Тут добавляется ещё два автомата: &lt;code&gt;7&lt;&#x2F;code&gt; и &lt;code&gt;16&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё чуть менее-скучные автоматы — &lt;strong&gt;при зеркалировании приводящие сами в себя&lt;&#x2F;strong&gt;. То есть они не способны различать где лево, а где право. Тут к тривиальным &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt; добавляются &lt;code&gt;2 и 21&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Одинаковые законы для симуляции назад и вперёд во времени&lt;&#x2F;strong&gt; — мне кажется это свойство аналогично &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;T-%D1%81%D0%B8%D0%BC%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%8F&quot;&gt;T-симметрии&lt;&#x2F;a&gt;, хотя я не знаю насколько справедливо проводить такие аналогии. К ним относится треугольный &lt;code&gt;1&lt;&#x2F;code&gt; и порождаемые им (далее мы увидим это).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Правило для симуляции назад во времени равно текущему с инвертированными цветами&lt;&#x2F;strong&gt; — то же самое, что и предыдущее, только инвертированное. Это свойство интересно, ведь Криттеры именно такими и являются. То есть если в криттерах инвертировать всё поле, то там будут возникать глайдеры, состоящие не из заполненных клеток, а из пустых клеток, и эти глайдеры будут двигаться назад во времени, а не вперёд.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Инвертирование цвета правил приводит к самому себе&lt;&#x2F;strong&gt; — тут интересны автоматы &lt;code&gt;10&lt;&#x2F;code&gt; и &lt;code&gt;13&lt;&#x2F;code&gt;, потому что другими особыми свойствами они не обладают.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте соберём список нетривиальных автоматов, которые обладают своим уникальным свойством:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{1, 5, 6, 14}&lt;&#x2F;code&gt; не различают направление времени.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{9, 17, 18, 22}&lt;&#x2F;code&gt; двигаются назад во времени для инвертированных цветов.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{2, 21}&lt;&#x2F;code&gt; не различают лево и право.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{10, 13}&lt;&#x2F;code&gt; не различают белый и чёрный.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;krasivye-avtomaty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#krasivye-avtomaty&quot;&gt;#&lt;&#x2F;a&gt;Красивые автоматы&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;&#x2F;code&gt; похож на правило &lt;code&gt;30&lt;&#x2F;code&gt; для обычных автоматов, тоже формирует треугольники, только повёрнутые на 90°.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; похож на узор для рубашки.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;21&lt;&#x2F;code&gt; похож на &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Block_cellular_automaton#Tron&quot;&gt;правило Tron&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;2_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;h1 id=&quot;porozhdenie-pravil&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#porozhdenie-pravil&quot;&gt;#&lt;&#x2F;a&gt;Порождение правил&lt;&#x2F;h1&gt;
&lt;p&gt;Если вернуться в начало и посмотреть на все автоматы, то можно заметить, что для автомата &lt;code&gt;1&lt;&#x2F;code&gt;, &lt;code&gt;5&lt;&#x2F;code&gt; является его зеркальным отражением, &lt;code&gt;6&lt;&#x2F;code&gt; его инверсией, а &lt;code&gt;14&lt;&#x2F;code&gt; одновременно инверсией и зеркальным отражением.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;5&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;5_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;6&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;6_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;14&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;14_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Поэтому можно задаться вопросом: а какие автоматы можно вывести из каких при помощи различных операций над правилами?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trivial-nye-porozhdeniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#trivial-nye-porozhdeniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Тривиальные порождения&lt;&#x2F;h2&gt;
&lt;p&gt;Возьмём преобразования правил, для которых мы можем точно сказать: да, это одно и то же правило, только немного-по другому.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Поменять местами лево и право. Будет обозначаться &lt;span style=&quot;color: green; font-weight: bold;&quot;&gt;Зелёным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Инвертировать белый на чёрный. Будет обозначаться &lt;span style=&quot;color: red; font-weight: bold;&quot;&gt;Красным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Инвертировать правила на симуляцию назад во времени. Будет обозначаться &lt;span style=&quot;font-weight: bold;&quot;&gt;Чёрным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Тогда все правила будут иметь такие связи:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;3.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;4.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;5.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;6.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;7.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;8.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут что-то не так. Почему-то &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt; никак не связаны, как не связаны &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;21&lt;&#x2F;code&gt;, а ведь они одинаковы если пропустить нечётные шаги:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;0&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;0_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;23&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;23_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Зато автоматы &lt;code&gt;1&lt;&#x2F;code&gt;, &lt;code&gt;5&lt;&#x2F;code&gt;, &lt;code&gt;6&lt;&#x2F;code&gt;, &lt;code&gt;14&lt;&#x2F;code&gt; связаны между собой, и это радует:&lt;&#x2F;p&gt;
&lt;p&gt;Значит нам нужно придумать ещё какое-то правило для порождения нового правила, чтобы другие можно было связать.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poluinversiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poluinversiia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Полуинверсия&lt;&#x2F;h2&gt;
&lt;p&gt;Давайте добавим правило, которое реализуется полу-инверсией. Если правило можно представить в следующем виде: &lt;code&gt;[00, 01, 10, 11] → [11, 01, 0, 10]&lt;&#x2F;code&gt;, то обычная инверсия инвертирует биты с двух сторон, а полу-инверсия только с правой стороны. Будем обозначать её &lt;span style=&quot;color: purple; font-weight: bold;&quot;&gt;Фиолетовым цветом&lt;&#x2F;span&gt;. Тогда наши графы будут выглядеть следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;9.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;10.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;11.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;12.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут интересная особенность. Кластер правил, порождённых от &lt;code&gt;1&lt;&#x2F;code&gt;, связался с кластером правил, порождённых от &lt;code&gt;22&lt;&#x2F;code&gt;. Ну и они довольно похожи:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;22&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;22_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;А кластер правил, порождённых от &lt;code&gt;3&lt;&#x2F;code&gt;, связался с кластером от &lt;code&gt;20&lt;&#x2F;code&gt;. Они выглядят похожим образом при пропуске нечётных шагов:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;3&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;3_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;20&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;20_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Если посмотреть на то как новая операция связывает правила, то можно сказать что она просто делает &lt;code&gt;23-x&lt;&#x2F;code&gt;. То есть с этой операцией мы можем получить любое правило с &lt;code&gt;12&lt;&#x2F;code&gt; включительно, если нам известны все правила до 11. Это хорошо, потому что можно выкинуть половину правил и знать что она будет симметрична первой половине относительно полу-инверсии.&lt;&#x2F;p&gt;
&lt;p&gt;Но у нас всё ещё не связаны правила &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;10&lt;&#x2F;code&gt;, которые просто идентичны без нечётных шагов:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;2_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;10&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;10_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;strannaia-operatsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#strannaia-operatsiia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Странная операция&lt;&#x2F;h2&gt;
&lt;p&gt;Я не смог найти комбинацию из обращения времени, отзеркаливания, инверсии, их половинок и всех их комбинаций, чтобы связать &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;10&lt;&#x2F;code&gt; правило. Единственное что я нашёл, это операцию: поменять местами 0 и 1 элемент, и поменять местами 2 и 3 элемент в массиве правила (обозначается квадратными скобками в таблице). Назовём это &lt;strong&gt;странной операцией&lt;&#x2F;strong&gt;, и будем обозначать &lt;span style=&quot;color: cyan; font-weight: bold;&quot;&gt;Циановым цветом&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Тогда у нас получается следующий набор графов:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;13.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;14.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;15.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;16.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ура! Теперь у нас связаны тривиальные автоматы &lt;code&gt;{0, 7, 16, 23}&lt;&#x2F;code&gt; и чуть более сложные, но тоже очень простые &lt;code&gt;{2, 10, 13, 21}&lt;&#x2F;code&gt;. А что касается остальных автоматов, с ними не произошло ничего особенного. Что уже было связано прежними операциями, так и осталось связано ими.&lt;&#x2F;p&gt;
&lt;p&gt;Итого у нас получается 4 группы автоматов, которые можно получить довольно простыми операциями, которые не очень сильно меняют поведение автомата. Можно сказать что если мы изучим свойства автомата &lt;code&gt;1&lt;&#x2F;code&gt;, то по идее можем эктраполировать его свойства с учётом полу-инверсии на &lt;code&gt;22&lt;&#x2F;code&gt; автомат.&lt;&#x2F;p&gt;
&lt;p&gt;Правда мне эта &lt;strong&gt;странная операция&lt;&#x2F;strong&gt; не нравится совсем. Ведь я не понимаю что будет если её обобщить на:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Автоматы с большим размером блока (от 3 и больше)&lt;&#x2F;li&gt;
&lt;li&gt;Автоматы с большим числом цветов (от 3 и больше)&lt;&#x2F;li&gt;
&lt;li&gt;Автоматы с большей размерностью (от 2 и больше)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Поэтому если у вас есть идеи что с этим можно сделать — пишите.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2d-vremia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2d-vremia&quot;&gt;#&lt;&#x2F;a&gt;2D время&lt;&#x2F;h1&gt;
&lt;p&gt;Следующее исследование свойств вдохновлено статьёй о том как создать 2D время для необратимых клеточных автоматов:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dmishin.blogspot.com&#x2F;2014&#x2F;06&#x2F;cellular-automata-with-2-temporal.html&quot;&gt;CELLULAR AUTOMATA WITH 2 TEMPORAL DIMENSIONS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Там автор предлагает идею 2D времени, которая требует иметь две функции \(f, g\), которые дают одинаковый результат независимо от порядка их применения \(f(g(x)) = g(f(x))\). Поэтому можно проверить все автоматы и узнать кто с кем коммутирует. Прежде всего надо сказать что автоматы &lt;code&gt;{0, 23, 7, 16}&lt;&#x2F;code&gt; коммутируют со всеми, а они совсем тривиальны и не интересны, поэтому я исключил их из графа. И у меня получился следующим результат:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute0.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute1.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute2.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут задействованы правила только из групп, порождённых &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;3&lt;&#x2F;code&gt;, но нет автоматов, порождённых от треугольной &lt;code&gt;1&lt;&#x2F;code&gt;, что довольно печально.&lt;&#x2F;p&gt;
&lt;p&gt;Получается примерно тот же результат, как и в той статье, что между собой коммутируют только довольно скучные автоматы, не считая тривиальных.&lt;&#x2F;p&gt;
&lt;p&gt;То что можно рисовать графы между правилами было вдохновлено этой статьёй:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dmishin.blogspot.com&#x2F;2016&#x2F;01&#x2F;graph-of-commuting-elementary-cellular.html&quot;&gt;GRAPH OF COMMUTING ELEMENTARY CELLULAR AUTOMATA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Для вычисления того коммутируют два правила или нет, я просто беру очень длинную строку на 10к бит, и проверяю формулу &lt;code&gt;f(g(x)) = g(f(x))&lt;&#x2F;code&gt; на ней одной. Так что мои результаты не идеальны, но вероятность ошибки крайне мала.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;iskhodniki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#iskhodniki&quot;&gt;#&lt;&#x2F;a&gt;Исходники&lt;&#x2F;h1&gt;
&lt;p&gt;Исходники для вычисления картинок, свойств и графов для этой статьи находятся в репозитории: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;time_2d_inversible_automata&quot;&gt;optozorax&#x2F;time_2d_inversible_automata&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dal-neishaia-rabota&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dal-neishaia-rabota&quot;&gt;#&lt;&#x2F;a&gt;Дальнейшая работа&lt;&#x2F;h1&gt;
&lt;p&gt;Мне кажется должны найтись очень интересные правила для:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Обратимых одномерных автоматов с &lt;strong&gt;3&lt;&#x2F;strong&gt; цветами и размером блока &lt;strong&gt;2&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Обратимых одномерных автоматов с &lt;strong&gt;2&lt;&#x2F;strong&gt; цветами и размером блока &lt;strong&gt;3&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В первом случае получается 3²! = 362_880, а во втором 2³! = 40_320 автоматов, что тоже очень много...&lt;&#x2F;p&gt;
&lt;p&gt;Тут придётся уже писать софт, чтобы в графах искать компоненты связности. И больше раскидывать мозгами. Но думаю что количество групп, из которых можно вывести всё остальное, должно быть не таким большим. А далее уже можно исследовать группы на коммутативность. Может среди этих вариантов найдутся интересные правила, для которых можно образовать двумерное время.&lt;&#x2F;p&gt;
&lt;script&gt;
function highlight(name) {
  let elements = document.getElementsByClassName(name);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style[&quot;background-color&quot;] = &#x27;rgba(255,41,43,0.20)&#x27;;
  }
}
function leave(name) {
  let elements = document.getElementsByClassName(name);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style[&quot;background-color&quot;] = &quot;rgba(39,41,43,0.03)&quot;;
  }
}
function show(skip_img, both_img) {
  let elements = document.getElementsByClassName(&quot;skip-img&quot;);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style.display = skip_img;
  }

  elements = document.getElementsByClassName(&quot;both-img&quot;);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style.display = both_img;
  }
}

show(&quot;none&quot;, &quot;block&quot;);

let rad = document.properties_radio.prop;
let prev = { value: &#x27;all&#x27; };
for (var i = 0; i &lt; rad.length; i++) {
    rad[i].addEventListener(&#x27;change&#x27;, function() {
        if (this !== prev) {
            leave(prev.value);
            highlight(this.value);
        }
        prev = this;
    });
}

document.getElementById(&#x27;img_intermediate&#x27;).addEventListener(&#x27;change&#x27;, function() {
    if (this.checked) {
      show(&quot;none&quot;, &quot;block&quot;);
    } else {
      show(&quot;block&quot;, &quot;none&quot;);
    }
});
&lt;&#x2F;script&gt;
</description>
        </item>
        <item>
            <title>Двойки не существует</title>
            <pubDate>Sun, 06 Jun 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/two-doesnt-exists/</link>
            <guid>https://testzorax.github.io/p/two-doesnt-exists/</guid>
            <description>&lt;p&gt;У людей есть такое когнитивное искажение, которое мешает им принимать абстрактные концепции только из-за того что реализации этих концепций нет в реальном мире.&lt;&#x2F;p&gt;
&lt;p&gt;Примеры фраз: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;4D не существует потому что мы живём в трёхмерном мире.&lt;&#x2F;li&gt;
&lt;li&gt;Не может быть геометрического 4D пространства, потому что существует только пространство-время.&lt;&#x2F;li&gt;
&lt;li&gt;Порталы не могут двигаться, потому что они обязательно червоточины, которые типо могут существовать.&lt;&#x2F;li&gt;
&lt;li&gt;Отрицательных чисел не существует, потому что мы не можем насыпать в мешок -3 камня. (особо запущенный случай)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Самое интересное из этих утверждений это второе. Оно как бы показывает что собеседник осведомлён о текущем состоянии науки, но в то же время подвергается этому искажению. Потому что говорить что 4D — это исключительно пространство-время, такое же бессмысленное утверждение, как говорить что число 2 обозначает только те 2 камня, но не 2 джоуля, не 2 фотона, не 2 бита, не 2 икса. Число 2 — куда более широкое понятие, чем его конкретная реализация в виде двух конкретных объектов.&lt;&#x2F;p&gt;
&lt;p&gt;А утверждать, что 4D не существует, настолько же бессмысленно, как и утверждать что числа 2 не существует. 4D — абстрактная концепция, которая не зависит от нашего мира.&lt;&#x2F;p&gt;
&lt;p&gt;Надо принять что бывает полезно рассуждать об абстрактных вещах, которые никак не могут существовать в нашем мире.&lt;&#x2F;p&gt;
&lt;p&gt;Тогда где граница существования абстрактных объектов, если они все и существуют и не существуют?&lt;&#x2F;p&gt;
&lt;p&gt;Возьмём i² = -1. Оно существует? Нет, если мы хотим найти его в множестве ℝ. А если мы вводим его как новый объект, то вполне себе красиво и существует.&lt;&#x2F;p&gt;
&lt;p&gt;А может ли новый объект не существовать в математике? Да, если они приводит к противоречиям. Например, машина из &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D1%80%D0%BE%D0%B1%D0%BB%D0%B5%D0%BC%D0%B0_%D0%BE%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B8&quot;&gt;проблемы останова&lt;&#x2F;a&gt; не существует математически, потому что она сама себе противоречит. Аналогично с &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D0%B0%D1%80%D0%B0%D0%B4%D0%BE%D0%BA%D1%81_%D0%A0%D0%B0%D1%81%D1%81%D0%B5%D0%BB%D0%B0#%D0%9F%D0%B0%D1%80%D0%B0%D0%B4%D0%BE%D0%BA%D1%81_%D0%B1%D1%80%D0%B0%D0%B4%D0%BE%D0%B1%D1%80%D0%B5%D1%8F.&quot;&gt;парадоксом Брадобрея&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Слово «существовать» можно определить следующим списком:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Либо имеет конкретную реализацию в физическом мире.&lt;&#x2F;li&gt;
&lt;li&gt;Либо не противодит к противоречиям.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так что если вам говорят что что-то абстрактное не существует, напомните им что и двойки тоже не существует.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;720&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;616cbcd31c929d2100.webp&quot; 
    onclick=&quot;full_screen(&#x27;two-doesnt-exists.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;two-doesnt-exists.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
</description>
        </item>
        <item>
            <title>Мы не должны делать никаких выводов касательно своей бытовой жизни на основании генетических исследований</title>
            <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/genes/</link>
            <guid>https://testzorax.github.io/p/genes/</guid>
            <description>&lt;p&gt;Скажем, вы видите статью что наличие какого-то гена, который отвечает за то что вы раньше ложитесь, коррелирует с сниженным риском депрессии. Можно ли из этого сделать вывод что если вы будете раньше ложиться спать, то у вас тоже будет меньше вероятность депрессии? Нет.&lt;&#x2F;p&gt;
&lt;p&gt;Если вы видите статью, которая говорит что интеллект сильно обусловлен генетикой, должны ли вы сдаться если вам кажется что у вас не получается? Или должны ли вы забить на образование своих детей? Нет.&lt;&#x2F;p&gt;
&lt;p&gt;Все эти исследования, которые говорят что что-то зависит от генов, не должно оказывать никакое влияние на вашу обычную жизнь. Вы в первую очередь — универсальное вычислительное устройство, которое при желании может всё. А если не может, значит надо искать свой путь.&lt;&#x2F;p&gt;
&lt;p&gt;Даже на кухонных посиделках не стоит упоминать зависимость чего-то от генов. Ибо тогда сразу разговор дойдёт до того кто на что способен, а на что не способен, и это без секвенирования ДНК! Даже гороскопы будут точнее таких посиделок.&lt;&#x2F;p&gt;
&lt;p&gt;Единственная полезная генетическая вещь для вас — это знать предпрасположенность к некоторым болезням (например: наркомании или алкоголизм), или непереносимость лактозы.&lt;&#x2F;p&gt;
&lt;p&gt;Оставьте остальную генетическую информацию социологам и генным инженерам, а обычным людям это знать не то что не нужно, а ещё и вредно.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;На эту тему есть хорошее видео, подтверждающее эту точку зрения: гены и окружение очень сильно влияют, но вы должны считать себя способным на всё, иначе успеха достичь невозможно:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;3LopI4YeC4I&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Ещё, на самом деле генетическая информация может быть полезна в случае если девушка хочет родить особо хорошее потомство, и готова ради этого искать мужчину с конкретно нужными генами.&lt;&#x2F;p&gt;
&lt;p&gt;Например, в одном подкасте с Асей Казанцевой, она говорила что хочет жениться на человеке, у которого есть PhD, ибо согласно генетическим исследованиям долгосрочный интеллект (ваша возможность дойти до PhD и защитить её, а не ваш интеллект в принципе) очень сильно зависит от генов.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому она считает, что если найдёт мужчину с PhD, то её дети вероятно тоже смогут в долгосрочной перспективе быть более умными, чем если рожать от рандомного человека.&lt;&#x2F;p&gt;
&lt;p&gt;Да, тут полезно знать и делать выводы, но это какой-то экстренный случай. Скорее мы доживём до официальной генной инженерии, чем до того момента, когда подобное поведение будет массовым.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Папки «Спам» быть не должно</title>
            <pubDate>Tue, 09 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/spam/</link>
            <guid>https://testzorax.github.io/p/spam/</guid>
            <description>&lt;p&gt;При регистрации на каком-то сайте очень часто используется электронная почта в качестве способа активации. И практически на любом сайте после отправки письма пишут: «Проверьте папку &amp;quot;Спам&amp;quot;, письмо может случайно попасть туда». В этом главная проблема. Данную папку нам навязывает любой почтовый сервис, письма складываются туда по каким-то магическим алгоритмам, главное свойство которых в том, что они ошибаются.&lt;&#x2F;p&gt;
&lt;p&gt;Из-за того алгоритмы определения спама всегда ошибаются и работают чёрт знает как, у нас развивается паранойя, из-за которой мы постоянно смотрим в эту папку, тратя драгоценные секунды. А если мы её не проверяем, можем иногда потерять важную почту.&lt;&#x2F;p&gt;
&lt;p&gt;Я считаю что папка «Спам» должна отсутствовать по умолчанию. Всё должно делаться на основе фильтров, и для фильтров должны быть жирные кнопки и более удобный и доступный интерфейс.&lt;&#x2F;p&gt;
&lt;p&gt;За всё время пользования почтой я понял самую главную вещь: если какая-то почта начала спамить вам один раз, и от этого нельзя отписаться, значит она вам будет спамить всегда. И аналогично, если какая-то почта присылает важные письма, значит она никогда не пришёт спам, а если и пришлёт, то там будет кнопочка «Отписаться». Этим свойством и будем пользоваться далее.&lt;&#x2F;p&gt;
&lt;p&gt;Вот, например, пришло вам письмо во входящие, а вы видите что это спам. Как с ним бороться, если такой папки нет? Для этого придумана концепция фильтров. Можно вручную поставить фильтр на автоматическое удаление подобных писем. В обычных почтовых сервисах для этого надо заходить в настройки и разбираться в том как работают фильтры, и смотреть на кучу полей, поэтому так никто не делает, и всем лень. Поэтому нужно упрощать интерфейс, например вместо кнопки «Пометить как спам» можно поставить кнопку для самого частого кейса создания фильтра: «Удалять все письма от этой почты». Ну и конечно, после нажатия этой кнопки все письма от данной почты тоже должны автоматически удалиться, потому что никто не полезет в настройки чтобы сделать это вручную, и потому что вспоминаем свойство. Отлично, теперь 90% кейсов использования папки «Спам» уничтожено.&lt;&#x2F;p&gt;
&lt;p&gt;Другой кейс спама — это когда человеку каждый день пишут самые разные почтовые ящики, и он просто физически не сможет фильтровать их все самостоятельно. Мне кажется только в таком случае должна быть кнопка «А давайте вы мне дадите папку спам, и заюзаете ваши магические алгоритмы». Хотя даже для этого случая я бы не стал доверять алгоритмам, и сделал по-другому. В данном случае можно создать концепцию «Доверенных почт&#x2F;доменов почт». При данной концепции должны быть две папки входящих: неизвестные и известные. Все письма от неизвестных почтовых ящиков должны складываться в соответствующую папку, аналогично известные. Должен быть список всех известных почт, который можно настроить и посмотреть в настройках. И снова, при встрече соответствующего письма, в настройки никто лезть не будет, поэтому чтобы сделать какую-то почту доверенной, в каждом письме просто должна быть кнопка «Сделать доверенной почту, отправившую это письмо», аналогично наоборот. И сразу после этого все письма от этой почты должны переместиться из папки неизвестных в папку известных, потому что свойство. Таким образом, человеку могут писать хоть тысячи разных спамовых почт ежедневно, но он никогда не пропустит важную почту, и никакие папки «Спам» не нужны.&lt;&#x2F;p&gt;
&lt;p&gt;Вот и всё, теперь мы не только избавились от идиотской концепции папки со спамом, но ещё и создали в сотню раз более мощный, удобный и полезный интерфейс, который усиливает своего пользователя, а не ослабляет.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Жаль, что в Gmail отключить эту папку невозможно. &lt;&#x2F;p&gt;
&lt;p&gt;Недавно, кстати, у меня письмо для активации Твиттера улетело в спам, а я думал почему так долго не приходит письмо :).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Раскладка Ильи Шепрута</title>
            <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/my-keyboard-layout/</link>
            <guid>https://testzorax.github.io/p/my-keyboard-layout/</guid>
            <description>&lt;h1 id=&quot;raskladka-il-i-shepruta&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#raskladka-il-i-shepruta&quot;&gt;#&lt;&#x2F;a&gt;Раскладка Ильи Шепрута&lt;&#x2F;h1&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eec1891cb40991cb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;moonlander_start.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;moonlander_start.jpg&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;720&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;jpg&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;337191ca7166c6cb93781f50f71181ca&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;587889bda6737cb400.webp&quot; 
    onclick=&quot;full_screen(&#x27;zones.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;zones.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;9a4b993ea6bff1ff0f9b7a33bc755623&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8e1ec181f20b0e1300.webp&quot; 
    onclick=&quot;full_screen(&#x27;base.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_3&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;4 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;2c45a0b833ca272d7b94fdc66a668af7&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.058207123098201946&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;afc07f285c1396b200.webp&quot; 
    onclick=&quot;full_screen(&#x27;chords.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;chords.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;583&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.058207123098201946&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_4&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;5 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;91178524f9e3273d73aec89aefab0ab0&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;de5622e2715de18400.webp&quot; 
    onclick=&quot;full_screen(&#x27;english.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;english.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_5&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;6 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;07c65db22ed9614664a2eb42cf88ef1f&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;87e5a6c5084b732a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;russian.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;russian.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_6&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;7 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;2e94ef1a8f6616e655bfc218fcda885e&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;56f54c10956a9c5100.webp&quot; 
    onclick=&quot;full_screen(&#x27;red.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_7&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;8 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;0611ab0f9b2546eb385ccd9c35e18782&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1fe5680432af0ba600.webp&quot; 
    onclick=&quot;full_screen(&#x27;green.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;green.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_8&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;9 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;b6323946c89a4dd6b0c5c29c0531132a&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f13231d3bd5863cf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;violet.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;violet.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_9&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;10 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;266a463f773aeb71fdd808377a9ea597&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c52985d303a764a400.webp&quot; 
    onclick=&quot;full_screen(&#x27;yellow.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;yellow.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_10&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;11 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;d119e7590b585c0c3a8706e953f40745&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8d6a0a5e5c917d7000.webp&quot; 
    onclick=&quot;full_screen(&#x27;game.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;game.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_11&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;12 &#x2F; 12&lt;hr style=&quot;margin: 2px;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;5a6a1244d0f353c495d5aa0f3065d2c1&quot;&gt;KLE&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;061e8b0dc4d7dbac00.webp&quot; 
    onclick=&quot;full_screen(&#x27;nuclear_war_case_layer.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;nuclear_war_case_layer.png&#x27;)&quot;
    width=&quot;1280&quot; height=&quot;530&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(1, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(1, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;eec1891cb40991cb00.webp&quot; 
      id=&quot;demo_1_0&quot; 
      onclick=&quot;gallery_set(1, 0)&quot;
      width=&quot;1280&quot; height=&quot;720&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;587889bda6737cb400.webp&quot; 
      id=&quot;demo_1_1&quot; 
      onclick=&quot;gallery_set(1, 1)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;8e1ec181f20b0e1300.webp&quot; 
      id=&quot;demo_1_2&quot; 
      onclick=&quot;gallery_set(1, 2)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.058207123098201946&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;afc07f285c1396b200.webp&quot; 
      id=&quot;demo_1_3&quot; 
      onclick=&quot;gallery_set(1, 3)&quot;
      width=&quot;1280&quot; height=&quot;583&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.058207123098201946&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;de5622e2715de18400.webp&quot; 
      id=&quot;demo_1_4&quot; 
      onclick=&quot;gallery_set(1, 4)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;87e5a6c5084b732a00.webp&quot; 
      id=&quot;demo_1_5&quot; 
      onclick=&quot;gallery_set(1, 5)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;56f54c10956a9c5100.webp&quot; 
      id=&quot;demo_1_6&quot; 
      onclick=&quot;gallery_set(1, 6)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;1fe5680432af0ba600.webp&quot; 
      id=&quot;demo_1_7&quot; 
      onclick=&quot;gallery_set(1, 7)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;f13231d3bd5863cf00.webp&quot; 
      id=&quot;demo_1_8&quot; 
      onclick=&quot;gallery_set(1, 8)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;c52985d303a764a400.webp&quot; 
      id=&quot;demo_1_9&quot; 
      onclick=&quot;gallery_set(1, 9)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;8d6a0a5e5c917d7000.webp&quot; 
      id=&quot;demo_1_10&quot; 
      onclick=&quot;gallery_set(1, 10)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 8.333333333333334%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;061e8b0dc4d7dbac00.webp&quot; 
      id=&quot;demo_1_11&quot; 
      onclick=&quot;gallery_set(1, 11)&quot;
      width=&quot;1280&quot; height=&quot;530&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.07895401106500691&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[1] = 0;
slide_count[1] = 12;
&lt;&#x2F;script&gt;
&lt;h1 id=&quot;o-chiom-eta-stat-ia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#o-chiom-eta-stat-ia&quot;&gt;#&lt;&#x2F;a&gt;О чём эта статья&lt;&#x2F;h1&gt;
&lt;p&gt;Это статья о моей раскладке и всём что с ней связано.&lt;&#x2F;p&gt;
&lt;p&gt;Для вас эта статья может быть полезна по следующим причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Вы хотите узнать про десятипальцевый метод печати и какие клавиатуры для него идеально подходят.&lt;&#x2F;li&gt;
&lt;li&gt;Вы хотите узнать что вообще можно сделать с программируемой клавиатурой.&lt;&#x2F;li&gt;
&lt;li&gt;Вы уже имеете программируемую клавиатуру, и хотите начать проектировать собственную раскладку, и пришли чтобы &lt;a href=&quot;https:&#x2F;&#x2F;www.chitai-gorod.ru&#x2F;catalog&#x2F;book&#x2F;391987&#x2F;&quot;&gt;воровать идеи&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Данная статья рассказывает про раскладку, которую я создавал для себя, и все удобства будут рассмотрены с моей точки зрения. Очевидно, что для людей с отличающимся воркфлоу будут подходить совершенно другие раскладки. Так же предупреждаю что в данной статье много субъективщины.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vvodnaia-informatsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvodnaia-informatsiia&quot;&gt;#&lt;&#x2F;a&gt;Вводная информация&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;terminy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#terminy&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Термины 🛠&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Раскладка&lt;&#x2F;strong&gt; — способ организации клавиш на клавиатуре: положение букв, стрелок, F-клавиш, модификаторов, макросов итд.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;СК&lt;&#x2F;strong&gt; — стандартная клавиатура, или набор клише, которым следуют производители почти всех клавиатур. 99% клавиатур, продаваемых у вас в магазине являются СК, и возможно вы никогда вживую не видели клавиатуру, которая не является СК. На всех ноутбуках стоит СК. Далее будет считаться что частью СК так же является и стандартная раскладка — набор клише по размещению определённых клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Смещение рядов&lt;&#x2F;strong&gt; aka &lt;strong&gt;горизонтальный стаггер&lt;&#x2F;strong&gt; — горизонтальное смещение следующей строки клавиш на клавиатуре относительно предыдущей. Является одним из базовых клише СК.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Десятипал&lt;&#x2F;strong&gt; — сокращение для фразы: метод слепой десятипальцевой печати на клавиатуре™.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Программируемая&lt;&#x2F;strong&gt; клавиатура — такая клавиатура, внутрь которой можно поместить нестандартную раскладку.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Правильная&lt;&#x2F;strong&gt; клавиатура — клавиатура, которая адекватна для десятипала; или можно сказать, что правильная клавиатура не следует клише СК. Измеримые критерии правильной клавиатуры будут даны далее.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&quot;&gt;&lt;strong&gt;Клавогонки&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; — тренажёр для печати на клавиатуре, где можно хорошо развивать скорость уже после освоения навыка десятипала. Обладает элементами социальной сети, соответственно там можно познакомиться и пообщаться с множеством крутых наборщиков.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Препинак&lt;&#x2F;strong&gt; — сокращение от «знак препинания». Здесь, для краткости, будет считаться, что к препинакам относится любой символ, который можно напечатать на клавиатуре, но который не является буквой или цифрой, например: &lt;code&gt;&#x27;&amp;quot;+-*&#x2F;^@#&amp;amp;|$~&lt;&#x2F;code&gt; являются препинаками. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Слой&lt;&#x2F;strong&gt; — абстракция в раскладке, которая позволяет при нажатии определённой клавиши иметь клавиши, отличные от текущих. Например клавиши &lt;kbd&gt;Fn&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; активируют слои:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Зажатие &lt;kbd&gt;Fn&lt;&#x2F;kbd&gt; активирует слой, на котором в определённых местах есть клавиши управления звуком, музыкой и прочим. &lt;&#x2F;li&gt;
&lt;li&gt;Зажатие &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; позволяет вместо цифр набирать препинаки, а вместо букв большие буквы. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Слоефикатор&lt;&#x2F;strong&gt; — клавиша, которая активирует слой. Образовано от слой + модификатор.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;зн&#x2F;мин&lt;&#x2F;strong&gt; — сокращение для фразы «знаков в минуту». Используется для обозначения скорости печати.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Неизвестная необходимость&lt;&#x2F;strong&gt; — предмет или концепция, которая обладает следующими свойствами:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Если у тебя нету этого, и ты об этом даже не знаешь, то ты живёшь без этого, и тебе вроде как нормально. &lt;&#x2F;li&gt;
&lt;li&gt;Если ты узнаёшь об этом, то всё-равно кажется, что без этого можно прожить, и не так уж это и нужно. &lt;&#x2F;li&gt;
&lt;li&gt;Но когда ты начинаешь этим пользоваться, то понимаешь, что это тебе необходимо.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;У меня в раскладке очень много вещей являются неизвестной необходимостью.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chto-za-moonlander&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-za-moonlander&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Что за Moonlander&lt;&#x2F;h2&gt;
&lt;p&gt;Это &lt;strong&gt;правильная&lt;&#x2F;strong&gt;&#x2F;эргономичная&#x2F;ортолинейная &lt;strong&gt;программируемая&lt;&#x2F;strong&gt; клавиатура, которую можно купить и получить работающий продукт из коробки. Обычно правильные клавиатуры люди паяют и собирают самостоятельно. Так как я не люблю паять, то для меня это идеальный вариант. В данной статье будет представлена раскладка именно для этой клавиатуры, хотя, в целом, ничего не мешает, использовать все эти идеи и даже код на любых абсолютно других клавиатурах.&lt;&#x2F;p&gt;
&lt;p&gt;Я его называю не совсем по транскрипции «мунляндер», потому что люблю коверкать слова.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zsa.io&#x2F;moonlander&#x2F;&quot;&gt;Официальный сайт.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Моя клавиатура на данный момент выглядит так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;64a2f3bae78d210500.webp&quot; 
    onclick=&quot;full_screen(&#x27;keyboard_irl.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;keyboard_irl.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;sviaz-mezhdu-klaviaturoi-i-raskladkoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sviaz-mezhdu-klaviaturoi-i-raskladkoi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Связь между клавиатурой и раскладкой&lt;&#x2F;h2&gt;
&lt;p&gt;Данная клавиатура является программируемой, то есть она обладает микроконтоллером, в который можно зашить программу (которая называется &lt;strong&gt;прошивка&lt;&#x2F;strong&gt;), которая работает со считыванием нажатых клавиш, и посылает на компьютер результат нажатия. Эта программа реализует некоторую раскладку.&lt;&#x2F;p&gt;
&lt;p&gt;Кажется, как будто клавиатура — это очень тупая вещь, и она не должна содержать у себя вообще никакого вида процессора, а отдавать полностью всю информацию на компьютер, и получать тоже всё от компьютера (чтобы, например, подсветку нарисовать). Но это не так, и внутрь клавиатуры можно и нужно засунуть много чего интересного.&lt;&#x2F;p&gt;
&lt;p&gt;Благодаря тому, что на клавиатуру можно залить произвольную программу, прямо на клавиатуре можно задавать произвольную раскладку с любой степенью автоматизации и кастомизации (если, конечно, уметь программировать), будь то автозамены или автоматический пробел после препинаков. Что хорошо, всё это реализуется при помощи самого стандартного протокола USB HID, так что такая программируемая клавиатура будет работать на любом компьютере (и даже телефоне) без установки драйверов.&lt;&#x2F;p&gt;
&lt;p&gt;Возможности настолько велики, что кто-то &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danamlund&#x2F;meckb_tetris&quot;&gt;даже сделал тетрис на клавиатуре&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;Благодаря программируемости клавиатуры, стандартная раскладка СК может быть полностью переосмыслена, и воплощена в совершенно в другом, более удобном виде. Этим переосмыслением я и занимался с самого начала.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qmk&#x2F;qmk_firmware&quot;&gt;QMK&lt;&#x2F;a&gt; — одна из библиотек на языке программирования Си, для написания прошивки клавиатуры. Данная библиотека на данный момент является лучшей библиотекой, которую поддерживают практически все программируемые клавиатуры. Главное её свойство для данной статьи — можно писать собственные расширения на Си, без погружения в низкоуровневые детали протокола или сканирования матрицы.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pravil-naia-klaviatura&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pravil-naia-klaviatura&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;«Правильная» клавиатура&lt;&#x2F;h2&gt;
&lt;p&gt;Как я уже говорил, правильная клавиатура адекватна для десятипала. Я считаю что клавиатура должна соответствовать следующим критериям, чтобы считаться правильной:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Не обладает горизонтальным стаггером вида &lt;code&gt;\\\\&lt;&#x2F;code&gt;, и является симметричной.&lt;&#x2F;li&gt;
&lt;li&gt;Обладает как минимум тремя клавишами для каждого большого пальца.&lt;&#x2F;li&gt;
&lt;li&gt;Является программируемой, чтобы была возможность поместить все клавиши как можно ближе к пальцам, через слои, не раздувая клавиатуру до огромных размеров, и минимизируя движения кистей.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Все эти пункты подробно и будут рассмотрены далее.&lt;&#x2F;p&gt;
&lt;p&gt;Я предпочитаю такой своего рода «субъективный» термин вместо термина &lt;strong&gt;эргономичная&lt;&#x2F;strong&gt; клавиатура, потому что эргономика не обязана содержать в себе описанные пункты. А эти пункты по моему мнению важнее эргономики. Плюс, существуют просто &lt;strong&gt;ортолинейные&lt;&#x2F;strong&gt; клавиатуры, типо &lt;a href=&quot;https:&#x2F;&#x2F;drop.com&#x2F;buy&#x2F;planck-mechanical-keyboard&quot;&gt;Planck&lt;&#x2F;a&gt;, которые являются правильными, но не эргономичными. Вот как выглядит Planck:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1009&quot;
    height=&quot;395&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eba5edf6e8d2056100.webp&quot; 
    onclick=&quot;full_screen(&#x27;planck.jpeg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;planck.jpeg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так же я не хочу вдаваться в споры об эргономике, про которую я ничего не знаю, и которая меня не интересует.&lt;&#x2F;p&gt;
&lt;p&gt;Но, в любом случае, у любой правильной клавиатуры шансов быть эргономичной намного больше, чем у любой СК. А принципы «правильности» в целом достаточно универсальны и для других видов печати.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;otkaz-ot-sk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#otkaz-ot-sk&quot;&gt;#&lt;&#x2F;a&gt;Отказ от СК&lt;&#x2F;h1&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я не делаю свою раскладку такой, чтобы потом было удобнее работать на СК.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;СК содержит очень много плохих решений и из-за них она неадекватна для десятипала и вообще. Поэтому я использую термин «правильные» клавиатуры, потому что он означает, что СК неверна, и что данные «правильные» клавиатуры исправляют все самые критичные проблемы.&lt;&#x2F;p&gt;
&lt;p&gt;Я враждебно отношусь к СК, и враждебно отношусь к самому явлению, что настолько плохие дизайнерские решения дожили до 21 века, являются стандартом, и всё это не замечается миллиардами людей.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я не пользуюсь СК, я не тренирую свои навыки на ней. Я отказался от неё ещё в первый день обучения десятипалу.&lt;&#x2F;p&gt;
&lt;p&gt;И это побудило меня полностью переосмыслить всю раскладку СК от начала и до конца, и сделать свой стандарт.&lt;&#x2F;p&gt;
&lt;p&gt;За счёт этого я живу с максимальным удобством для себя, но это приносит другие неудобства: я не могу работать за чужим компом без своей клавиатуры, и в случае покупки ноутбука буду не так мобилен, как все остальные. Свою клавиатуру мне необходимо таскать везде, где я потенциально буду долго работать.&lt;&#x2F;p&gt;
&lt;p&gt;А если мне и придётся пользоваться СК где-то, то я буду сильно страдать из-за максимальной непривычности и неудобства. Так же я не могу печатать на своей клавиатуре на олимпиадах по программированию: они запрещают пользоваться своей клавиатурой по правилам, особенно если там есть микроконтроллер.&lt;&#x2F;p&gt;
&lt;p&gt;Кто-то не может себе позволить такую роскошь, как отказ от СК. Ну ок, значит вся эта тема не для них.&lt;&#x2F;p&gt;
&lt;p&gt;Это самый базовый принцип, и без него перейти на следующие уровни кастомизации раскладки нельзя.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chto-takoe-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-takoe-sloi&quot;&gt;#&lt;&#x2F;a&gt;Что такое слой&lt;&#x2F;h1&gt;
&lt;p&gt;Напоминаю, что &lt;strong&gt;слой&lt;&#x2F;strong&gt; — абстракция в раскладке, которая позволяет при нажатии определённой клавиши иметь клавиши, отличные от текущих.&lt;&#x2F;p&gt;
&lt;p&gt;Слой является важнейшей абстракцией в программируемых клавиатурах, и далее он будет использоваться неоднократно.&lt;&#x2F;p&gt;
&lt;p&gt;Предположим, что у вас имеется обычная клавиатура, на которой имеется клавиша &lt;kbd&gt;Fn&lt;&#x2F;kbd&gt;, при зажатии которой вместо некоторых клавиш появляются клавиши управления звуком и ещё что-то. То есть как-то так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;383&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;545555b880d5010000.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_weak_layers.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_weak_layers.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.9&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;То что активируется и называется слоём. При этом &lt;kbd&gt;Fn&lt;&#x2F;kbd&gt; называется слоефикатором.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;При этом видно, что, помимо клавиш управления звуком и прочего, на этом слое могло бы быть очень много полезных вещей. Либо далёкие клавиши могли бы быть просто ближе благодаря нему. Так что, формально, СК и использует слои, но делает это очень плохо.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Обычно, когда программируют слой, то делают так, что если вы нажимаете другие символы, которые никак не обозначены в слое, то они остаются собой.&lt;&#x2F;p&gt;
&lt;p&gt;Слой можно включить двумя способами: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Чтобы он работал при зажатии клавиши — по аналогии с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;. Далее этот вид слоефикатора будет обозначаться как &lt;code&gt;MO&lt;&#x2F;code&gt; слоефикатор, потому что так он записывается в QMK.&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы он включался и выключался как тумблер по нажатию определённой клавиши — по аналогии с &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;. Аналогично он будет обозначаться как &lt;code&gt;TG&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;beta.docs.qmk.fm&#x2F;using-qmk&#x2F;software-features&#x2F;feature_layers&quot;&gt;Страница документации QMK про слои.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Вообще сама по себе клавиша &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; тоже в какой-то степени слоефикатор. При этом клавиши &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; нельзя назвать слоефикаторами, потому что они в каждой программе обрабатываются по-своему, а вот &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; можно, потому что обработка того как он меняет символы происходит на уровне ОС.&lt;&#x2F;p&gt;
&lt;p&gt;Аналогично, переключение языка в какой-то степени переключение слоя по &lt;code&gt;TG&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;С точки зрения терминологии операционной системы слой может обзываться как «3-й уровень клавиатуры». А реализовываться слой может через клавишу &lt;kbd&gt;AltGr&lt;&#x2F;kbd&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;419687&#x2F;&quot;&gt;Статья, рассказывающая об этом.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Но мне не нравится сочетание «3-й уровень», и в статье о нём не говорится можно ли туда поставить стрелочки или F-клавиши. Воспользуюсь моим пессимизмом по поводу клавиатур, и предположу, что нельзя. А со слоями можно любую клавишу поместить в слой. Так же в статье говорится что слоефикатор должен ставиться на модификатор, но не говорится есть ли чистый слоефикатор, который не даёт примеси &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; или &lt;kbd&gt;Win&lt;&#x2F;kbd&gt;.  Поэтому концепция слоя куда более абстрактная и чистая.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, разработчики операционных систем не очень далеко продвинулись в раскладкостроении, поэтому вряд ли у вас получится, так просто, через официальные инструменты, создать себе слой.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому, в основном, все самые продвинутые люди хранят свои слои и вообще раскладки полностью внутри клавиатуры. Там это и легче сделается, и вообще это кросс-платформенно.&lt;&#x2F;p&gt;
&lt;p&gt;Далее будет очень подробно раскрыто чего крутого можно сделать со слоями, и почему это настолько важно.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pro-slepuiu-desiatipal-tsevuiu-pechat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-slepuiu-desiatipal-tsevuiu-pechat&quot;&gt;#&lt;&#x2F;a&gt;Про слепую десятипальцевую печать&lt;&#x2F;h1&gt;
&lt;p&gt;Это важный пункт, потому что на основании того как работает этот метод печати, будет зависеть &lt;em&gt;очень&lt;&#x2F;em&gt; много дизайнерских решений. Да и вообще, сам термин &lt;strong&gt;правильная&lt;&#x2F;strong&gt; клавиатура, завязан на этом методе.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Моя раскладка проектируется с учётом того что её пользователь владеет десятипалом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Итак, &lt;strong&gt;слепая десятипальцевая печать на клавиатуре™&lt;&#x2F;strong&gt; — это особая техника печати, при которой:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Пальцы стоят на &lt;strong&gt;домашней&lt;&#x2F;strong&gt; позиции &lt;code&gt;ФЫВА ОЛДЖ&lt;&#x2F;code&gt; или &lt;code&gt;ASDF JKL;&lt;&#x2F;code&gt;, при этом на большинстве клавиатур для указательных есть рисочки на клавишах &lt;kbd&gt;F&lt;&#x2F;kbd&gt; и &lt;kbd&gt;J&lt;&#x2F;kbd&gt;, чтобы проще было целиться вслепую.&lt;&#x2F;li&gt;
&lt;li&gt;Используется 9-10 пальцев обеих рук (и мизинцы тоже).&lt;&#x2F;li&gt;
&lt;li&gt;У каждого пальца есть строго свои зоны, и каждый палец имеет право нажимать только клавиши из своих зон. Это называется &lt;strong&gt;статические зоны&lt;&#x2F;strong&gt;. Когда каждый палец нажимает какую придётся клавишу — это называется &lt;strong&gt;динамические зоны&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Печать происходит без подсматривания на клавиатуру, ведь все клавиши выучены на уровне рефлексов. Отсюда и слово «слепая».&lt;&#x2F;li&gt;
&lt;li&gt;Это не тоже самое, что просто «печатать вслепую», ведь обычно печать вслепую не подразумевает статические зоны.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так же иногда к десятипалу относят «правило &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов» и «правило пробелов», но я считаю эти правила бесполезными и вредными, поэтому не отношу сюда. Далее эта тема будет раскрыта.&lt;&#x2F;p&gt;
&lt;p&gt;Десятипалом специально овладевают люди, которые профессионально пользуются компьютером и клавиатурой, например: программисты, транскрибаторы, рерайтеры, бухгалтеры итд. К сожалению у нас в школе не обучают десятипалу, а должны, ибо это навык, который пригодится всем нам в этой жизни, учитывая темпы цифровизации. Да и в школе его выучить в сотню раз проще, чем во взрослой жизни.&lt;&#x2F;p&gt;
&lt;div class=&quot;pros&quot;&gt;
&lt;span style=&quot;color: #090&quot;&gt;&lt;big&gt;&lt;b&gt;Плюсы десятипала:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Совершается меньше ошибок, так как у пальцев строго определённое множество клавиш, которые они нажимают, в строго определённых позициях. Для динамических зон такое не выполняется по очевидным причинам.&lt;&#x2F;li&gt;
&lt;li&gt;После определённого уровня практики нету необходимости смотреть на клавиатуру вообще. Соответственно меньше 
устают глаза от смены фокуса клавиатура-экран-клавиатура-экран, или меньше болит шея.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Согласно моей внутренней статистике большинство людей:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Никогда не слышали про десятипал.&lt;&#x2F;li&gt;
&lt;li&gt;Печатают достаточно давно на клавиатуре, поэтому практически на неё не подглядывают.&lt;&#x2F;li&gt;
&lt;li&gt;Практически не используют мизинцы, и делают в основном всё указательными, редко средними, и редко безымянными пальцами.&lt;&#x2F;li&gt;
&lt;li&gt;Печатают достаточно быстро, чтобы их это устраивало.&lt;&#x2F;li&gt;
&lt;li&gt;Печатают по динамическим зонами.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zony&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zony&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Зоны&lt;&#x2F;h2&gt;
&lt;p&gt;Если погуглить и почитать литературу, то везде вам скажут что вот так выглядят зоны для десятипала на СК:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;446&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b675dfa68a16e60f00.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_default_zones.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_default_zones.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Цветом обозначается какой палец нажимает какую клавишу:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Белый — не специфицировано, и обычно эту клавишу нажимает любой палец, иногда зряче.&lt;&#x2F;li&gt;
&lt;li&gt;Розовый, Фиолетовый — указательный.&lt;&#x2F;li&gt;
&lt;li&gt;Зелёный — средний.&lt;&#x2F;li&gt;
&lt;li&gt;Синий — безымянный.&lt;&#x2F;li&gt;
&lt;li&gt;Жёлтый — мизинец.&lt;&#x2F;li&gt;
&lt;li&gt;Оранжевый — большой палец.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Давайте взглянем на них в более чистом виде:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;409&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d27a54e09711182300.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_default_zones_clear.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_default_zones_clear.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Можно заметить, что левой руке должно быть неудобно. Некоторые люди это замечают сразу, и делают &lt;a href=&quot;https:&#x2F;&#x2F;kennetchaz.github.io&#x2F;symmetric-typing&#x2F;&quot;&gt;костыли в виде таких зон&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;446&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c7e1c87b697d3af400.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_advanced_zones.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_advanced_zones.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Которые в чистом виде выглядят так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;340&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9b8820b6c303dd5700.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_advanced_zones_clear.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_advanced_zones_clear.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Они уже получше, но тоже довольно кривоваты. Они делают получше печать для левой руки. Но к сожаленю до них не все додумываются (я, например, не додумался), и о них не все знают. Поэтому большинство обучающихся десятипалу страдают на оригинальных зонах, которые пишут во всех учебниках и обучающих материалах. Конечно, эти зоны нельзя назвать идеалом, и нельзя сказать, что используя их, можно забыть о том что СК неадекватна для десятипала.&lt;&#x2F;p&gt;
&lt;p&gt;Пример людей на клавогонках, с необычными зонами: &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;389432&#x2F;&quot;&gt;_VR_&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;314554&#x2F;&quot;&gt;Alkhor&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;191670&#x2F;journal&#x2F;52be892d7bf62d073991bc69&quot;&gt;Переборыч&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Существуют ещё большие костыли, которые не только делают другие зоны, но ещё и другую постановку — &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;wiki&#x2F;%D0%AB%D0%B2%D0%B0%D0%BC-%D1%82%D0%BE%D0%BB%D0%B4&quot;&gt;&lt;code&gt;ЫВАМ ТОЛД&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Данная постановка значительно переделывает раскладку ЙЦУКЕН, и ещё делает положение рук немного более эргономичным. Вот как она выглядит:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;446&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5045550be29eec5500.webp&quot; 
    onclick=&quot;full_screen(&#x27;ЫВАМ_ТОЛД.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;ЫВАМ_ТОЛД.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Вот &lt;code&gt;ЫВАМ ТОЛД&lt;&#x2F;code&gt; — уже странная концепция, и я бы не стал её советовать, тут на свой страх и риск.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;По зонами видно почему СК неадекватна. Происходит это именно из-за горизонтального стаггера, который направлен в одну сторону, и находится на клавиатуре из-за печатных машинок. Обозначить этот стаггер можно как и стандартные зоны: &lt;code&gt;\\\\&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Более подробно узнать про тему горизонтального стаггера можно в статье: &lt;a href=&quot;http:&#x2F;&#x2F;ibnteo.klava.org&#x2F;keyboard&#x2F;standard&quot;&gt;Генетические недостатки стандартной клавиатуры&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Так же стаггер &lt;code&gt;\\\\&lt;&#x2F;code&gt; можно очень хорошо увидеть на этой фотографии, которая взята &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;MechanicalKeyboards&#x2F;comments&#x2F;ac6k1b&#x2F;big_boi&#x2F;&quot;&gt;отсюда&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;845&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a05e1f64e38cda4200.webp&quot; 
    onclick=&quot;full_screen(&#x27;wrong_planck.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;wrong_planck.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Но этот стаггер не точно такой же как и на СК. Давайте сравним насколько смещается каждый новый ряд относительно предыдущего на СК:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;480&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;82140178b9a7712200.webp&quot; 
    onclick=&quot;full_screen(&#x27;offset.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;offset.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Видно, что первое смещение равно 1&#x2F;2 клавиши, а вот уже второе 1&#x2F;4 клавиши, а затем снова 1&#x2F;2. Такое странное изменение смещения приходит к нам из-за особенностей печатных машинок, и хуже варианта с постоянным смещением 1&#x2F;4. Далее это будет раскрыто в истории.&lt;&#x2F;p&gt;
&lt;p&gt;Можно сказать что правильным и адекватным стаггером будет &lt;code&gt;||||&lt;&#x2F;code&gt; или &lt;code&gt;&#x2F;&#x2F;\\&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Пример стаггера &lt;code&gt;&#x2F;&#x2F;\\&lt;&#x2F;code&gt; с постоянным смещением в 1&#x2F;4:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1122&quot;
    height=&quot;722&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;49b7cab2d69df47200.webp&quot; 
    onclick=&quot;full_screen(&#x27;katana.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;katana.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так же можно сделать &lt;code&gt;&#x2F;&#x2F;\\&lt;&#x2F;code&gt;, но с адекватным неравномерным смещением рядов, например: 0, 0, 1&#x2F;4, как на клавиатуре &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bouncepaw&#x2F;sagaris&quot;&gt;Сагарис&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;ccc0fc198756fb7300.webp&quot; 
    onclick=&quot;full_screen(&#x27;sagaris.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sagaris.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×3.2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Теперь взглянем какие можно сделать зоны для моей клавиатуры с смещением &lt;code&gt;||||&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;587889bda6737cb400.webp&quot; 
    onclick=&quot;full_screen(&#x27;zones.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;zones.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Здесь зоны прямые и симметричные для обеих рук, не нужно выворачиваться наизнанку.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smeshchenie-kisti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smeshchenie-kisti&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Смещение кисти&lt;&#x2F;h2&gt;
&lt;p&gt;Десятипал строится на том, что основную часть времени можно не смотреть на клавиатуру, и что можно всё нажимать вслепую. Но это удовольствие ломается, когда нужно нажимать далёкие клавиши, до которых нельзя дотянуться из домашней позиции.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте взглянем а как вообще у нас располагаются клавиши на клавиатуре относительно домашней позиции. Я беру следующую иллюстрацию из статьи &lt;a href=&quot;https:&#x2F;&#x2F;tonsky.livejournal.com&#x2F;321097.html&quot;&gt;Клавиатуры и дизайн&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;381&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9bf7a3707f1db9ec00.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_distance_tonsky.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_distance_tonsky.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Зелёным обозначена домашняя позиция, светло-зелёным расстояние в 1 клавишу от домашней позиции, оранжевым расстояние в 2 клавиши итд.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Частые и полезные клавиши размещаются далеко, из-за чего приходится часто смещать кисть с домашней позиции.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Возьмём, например, &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;. Он находится настолько далеко, что даже не помещается в самые дальние клавиши для правого мизинца. И чем его нажимать? Да чем хочешь! Кажется что к нему ближе всего мизинец, но его проще и удобнее нажимать безымянным пальцем. Кисть всё-равно смещать с домашней позиции. А раз она будет смещаться, то потом она должна вернуться обратно чтобы нажать следующие клавиши. А вот это уже представляет проблемы, особенно на скорости. Возвратить кисть обратно не так-то легко, плюс если делать это быстро, и при этом ещё хотеть нажать какую-то клавишу, то высока вероятность промахнуться. И снова придётся смещать кисть и снова нажимать &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;. Замкнуный круг :)&lt;&#x2F;p&gt;
&lt;p&gt;А обучаться возвращаться в домашнюю позицию из далёких мест — это практика. А зачем эта практика нужна, если теоретически можно без неё? Просто поставив &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; поближе, например, на большой палец:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;446&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0690eebbcf1452ca00.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_split_space.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_split_space.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;550&quot;
    height=&quot;384&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;aa781892a4a2d65000.webp&quot; 
    onclick=&quot;full_screen(&#x27;а_чё_так_можно_было_чтоли.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;а_чё_так_можно_было_чтоли.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Очевидно, что для десятипала лучше будет, если все клавиши будут в шаговой доступности от домашней позиции, без сильных смещений руки.&lt;&#x2F;p&gt;
&lt;p&gt;Положение &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; не так печально, как положение стрелок. Стрелки находятся на два порядка дальше, чем &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;. А всяким программистам, и писателям статей приходится использовать стрелки во время написания текста &lt;strong&gt;очень&lt;&#x2F;strong&gt; часто. И вот скакать рукой туда-сюда только чтобы переместиться на пару символов просто невыносимо.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, именно из-за этого всякие vim&#x27;ы и придумали свои режимы, где стрелки находятся сразу на домашней позиции. То же самое относится и к нумпаду и тому что над стрелками: всё это можно засунуть под домашнюю позицию, через слои.&lt;&#x2F;p&gt;
&lt;p&gt;А такие клавиши как &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; можно без всяких слоёв разместить поближе просто использовав большой палец.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bol-shoi-palets&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bol-shoi-palets&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Большой палец&lt;&#x2F;h2&gt;
&lt;p&gt;Это удивительно, но в СК большой палец не используется ни для чего, кроме пробела. Большой палец — один из самых подвижных пальцев. Да на телефонах люди печатают очень много текста одним или двумя большими пальцами. И такой мощный палец обойдён стороной.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;СК не использует большой палец, хотя никаких причин для этого нет, и это неадекватно не только для десятипала, а и само по себе.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Большой палец силён, поэтому правильная клавиатура имеет под каждый большой палец как минимум три кнопки. А на эти три кнопки далее уже можно повесить много чего полезного.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skorost-i-somneniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skorost-i-somneniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скорость и сомнения&lt;&#x2F;h2&gt;
&lt;p&gt;Очень часто говорят, что «изучив десятипал, вы начнёте быстрее печатать». Если посмотреть на практику, то есть причины сомневаться в этом.&lt;&#x2F;p&gt;
&lt;p&gt;Например, я наблюдал много примеров школьников, которые без всякого обучения десятипала приходили на клавогонки и быстро достигали самых высоких скоростей 800-900 зн&#x2F;мин, печатая динамикой. Ещё больше я наблюдал примеров тех, кто быстро достигал 500-700 зн&#x2F;мин.&lt;&#x2F;p&gt;
&lt;p&gt;При этом самый быстрый печатальщик на планете — Шон Врона, печатает по динамическим зонам, и достигает на английском языке около 1200 зн&#x2F;мин. Тоже самое относится и к альтернативным раскладкам. Объективного практического преимущества у них нет.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Но настоящие преимущество есть у &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=JsRTTD9k2ME&quot;&gt;стенографической машины&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;А что тем временем десятипал? У меня ушло больше года, чтобы достичь скорости 500 зн&#x2F;мин. И я при этом очень много тренировался, и начал в 17 лет. Сейчас моя максимальная скорость на клавогонках — 700 зн&#x2F;мин.&lt;&#x2F;p&gt;
&lt;p&gt;Так что если ваша цель — скорость, то придётся ресёрчить дальше, всё не так просто.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому неизвестно, является ли десятипал истинным методом взаимодействия с клавиатурой, чтобы под него они оптимизировались.&lt;&#x2F;p&gt;
&lt;p&gt;Как пример, можно придумать что-то лучше. Например, на клавогонках &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;82885&#x2F;journal&#x2F;52beafae7bf62df3458b7833&quot;&gt;Fenex обучился ограниченной динамике&lt;&#x2F;a&gt; на указательных пальцах для раскладки ЙЦУКЕН. В случае когда ему попадается две последовательные клавиши в зоне указательного, он нажимает их не одним пальцем, а указательным и средним. Таким образом он уменьшает нагрузку на указательные, и повышает свою скорость, за счёт сокращения нажатий одним пальцем, и увеличением числа перекатов. И этот подход не является чистым десятипалом, и чистой динамикой.&lt;&#x2F;p&gt;
&lt;p&gt;Так что я не уверен, что истина в последней инстанции стоит за десятипалом, и что после его изучения вы станете гарантированно быстрее печатать. Но десятипал очень близок к истине, и обучение ему должно привнести хотя бы каплю, но удобства.&lt;&#x2F;p&gt;
&lt;p&gt;Так же нужно отметить, что приобретая правильную клавиатуру, скорее всего придётся переучиваться под десятипал, потому что если на СК привыкнуть печатать динамикой, то она не будет работать на правильной клавиатуре из-за совсем другого положения клавиш. А динамику переучить намного сложнее, чем статику.&lt;&#x2F;p&gt;
&lt;p&gt;Далее будет раскрыто в каких ещё местах СК неадекватна для десятипала, и как эту проблему можно решить на правильной клавиатуре.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;istoriia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#istoriia&quot;&gt;#&lt;&#x2F;a&gt;История&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;doistoricheskie-vremena-predposylki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#doistoricheskie-vremena-predposylki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Доисторические времена, предпосылки&lt;&#x2F;h2&gt;
&lt;p&gt;Изначально я печатал на клавиатуре так же как и печатают все:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Иногда смотрел, иногда не смотрел на клавиатуру.&lt;&#x2F;li&gt;
&lt;li&gt;Нажимал клавиши какими попало пальцами, практически не использовав мизинцы.&lt;&#x2F;li&gt;
&lt;li&gt;Печатал вроде как быстро, и с большим числом опечаток.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Что является набором по динамическим зонам с элементами слепоты.&lt;&#x2F;p&gt;
&lt;p&gt;Идею о том что нужно научиться десятипалу, в меня заложили независимо три блоггера:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Сначала Денис Борисов выпускает видео о том как он проводит свой день, и там говорит что научился десятипалу чтобы проще и быстрее печатать статьи.&lt;&#x2F;li&gt;
&lt;li&gt;Затем Константин Кадавр между делом, в рандомном месте, упоминает что считает тех, кто печатает за 300 зн&#x2F;мин уже сверхлюдьми.&lt;&#x2F;li&gt;
&lt;li&gt;И наконец видео от Sorax&#x27;а о том &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;YirgDp-zlkM&quot;&gt;«Как освоить слепой набор?»&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;600&quot;
    height=&quot;257&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e6d896bec9c507ee00.webp&quot; 
    onclick=&quot;full_screen(&#x27;ди-каприо-щурится.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;ди-каприо-щурится.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это как в стакан наливают воду, и вот они наливали, и после одного момента она вылилась.&lt;&#x2F;p&gt;
&lt;p&gt;Я не уверен, что стал бы этим заниматься, прочитав одну статью в интернете, или послушав одного человека. К сожалению так просто человека не переубедить и не заставить менять привычку. Это к слову о том, что я пытался объяснить своим друзьям чтобы они научились десятипалу, или чтобы они пересели на правильные клавиатуры, но ничего не выходило.&lt;&#x2F;p&gt;
&lt;p&gt;Ближе к концу 11 класса школы (2016 год) я начал копать о том как стартануть в этой теме. &lt;&#x2F;p&gt;
&lt;p&gt;Я начал учиться такой печати именно после 11 класса, а не раньше, потому что я считал что так как я пойду учиться в университет, то я буду записывать все лекции, и лучше это делать на клавиатуре, потому что это быстрее ручной записи. Плюс, было лето, а летом ничего особо делать не надо, можно и скорость печати сломать.&lt;&#x2F;p&gt;
&lt;p&gt;Такая идея пришла мне в голову ещё потому что у меня был положительный опыт на уроках истории, когда нам диктовали очень много материала под запись (подготовка к ЕНТ), и я не успевал писать всё ручкой, и вообще у меня был отвратительный почерк, из-за чего я не мог потом это читать. Поэтому я как-то раз притащил свою огромную беспроводную клавиатуру на урок, вставил свисток в телефон через переходник и начал печатать в телефон. Мы же это для себя делали, для подготовки к ЕНТ, так что мне никто ничего не сказал, все просто удивились. Потом учительница попросила меня скинуть все мои записи в электронном виде, чтобы она могла это немного подредачить и распечатать всем. &lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;То есть я делал это для себя, а получилось для всех. &lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Вот такое важнейшее свойство цифровой записи. Кстати, это ещё один плюс в копилку почему я не люблю писать ручкой.&lt;&#x2F;p&gt;
&lt;p&gt;Так вот, я хотел научиться слепой печати, чтобы (!) записывать лекции в университете. Сейчас вспоминаю эту причину, и смешно становится. Такая идиотская причина, чтобы сделать такую долгую и тяжёлую вещь. Если кратко, то во-первых лекции чаще всего полный отстой, и их можно заменить качественной методичкой. А во-вторых если на данном предмете нету методички, и тебе надо что-то записывать, что скорее всего что-то не так. Особенно если это предмет, который читается испокон веков, как, например, математический анализ, теория вероятности, история.&lt;&#x2F;p&gt;
&lt;p&gt;Лекции хорошо заходят, когда ты можешь в записанном виде смотреть их на скорости 2. Лекции хороши тем, что на скорости они пассивно загоняют в тебя информацию, не нужно принимать усилия чтобы читать.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так, из-за боязни неизвестного пришлось научиться сложному навыку.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nachalo-kastomizatsii-winapi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nachalo-kastomizatsii-winapi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Начало кастомизации, WinAPI&lt;&#x2F;h2&gt;
&lt;p&gt;Так же когда-то я наткнулся на &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;company&#x2F;crowdtoolz&#x2F;blog&#x2F;385943&#x2F;&quot;&gt;статью про клавиатуру UHK&lt;&#x2F;a&gt; на тогдашнем GeekTimes. И после неё я понял, что хочу эту клаву, а пока этой клавы нету, хочу иметь стрелки так же как и на ней, а именно подобным образом:&lt;&#x2F;p&gt;
&lt;img
    class=&quot;not-default img-one&quot;
    width=&quot;471&quot;
    height=&quot;1024&quot;
    src=&quot;&amp;#x2F;p&amp;#x2F;my-keyboard-layout&amp;#x2F;uhk.svg&quot;&gt;
&lt;p&gt;Сейчас я понимаю, что эта клавиатура не такая уж и классная, и самое главное — неправильная. Хотя статье стоит отдать должное, она очень глубоко во мне посеяла эту идею, и вообще идеи о том, что можно сделать, имея программируемую клавиатуру.&lt;&#x2F;p&gt;
&lt;p&gt;Возвращаясь к теме, я решил прежде чем научиться печатать, сделать себе такие же стрелки, чтобы вместо &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;&#x27;а у меня была какая-то такая магическая клавиша, при зажатии которой другие клавиши работают по-другом (как мы уже знаем, это называется &lt;strong&gt;слой&lt;&#x2F;strong&gt;). Для начала я попытался сделать такое через &lt;a href=&quot;https:&#x2F;&#x2F;www.autohotkey.com&quot;&gt;AutoHotKey&lt;&#x2F;a&gt;, но когда я это сделал, стрелки работали &lt;strong&gt;слишком&lt;&#x2F;strong&gt; медленно, и этим невозможно было пользоваться. Это даже вылилось в тему на CyberForum, на которую мне &lt;em&gt;никто&lt;&#x2F;em&gt; не ответил. Вот эта тема, там же находится исходный скрипт: &lt;a href=&quot;https:&#x2F;&#x2F;www.cyberforum.ru&#x2F;keyboards&#x2F;thread1761049.html&quot;&gt;Как добиться использования стрелок на буквенной части клавиатуры?&lt;&#x2F;a&gt;. В те времена я не знал такого термина как «слой», поэтому и не гуглилось ничего разумного.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Сейчас для решения этой проблемы я могу посоветовать программу &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;enhanced-keyboard&quot;&gt;Enhanced Keyboard&lt;&#x2F;a&gt;, которая, к сожалению, работает только на винде. Ещё есть &lt;a href=&quot;https:&#x2F;&#x2F;karabiner-elements.pqrs.org&quot;&gt;Karabiner-Elements&lt;&#x2F;a&gt; для MacOS.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;А в те времена единственный вариант что у меня остался — использовать WinAPI, с которым я уже значительно поигрался, чтобы рисовать окошки и делать простенькие программы. С помощью него я решил сделать перехват всех клавиш, и соответственно их изменение. Назвал я такую программу ModBind, где &lt;kbd&gt;Mod&lt;&#x2F;kbd&gt; обозначает клавишу для включения слоя, а «Bind» обозначает «забиндить» (слово взято из CS 1.6).&lt;&#x2F;p&gt;
&lt;p&gt;Исходники этой программы лежат здесь: &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;my-keyboard-layout&#x2F;modbind&quot;&gt;modbind&lt;&#x2F;a&gt; (хотя они никому не нужны, пусть лежат для истории). &lt;&#x2F;p&gt;
&lt;p&gt;Моя раскладка после завершения этой программы выглядела следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;800&quot;
    height=&quot;828&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9e80f486823c1a0600.webp&quot; 
    onclick=&quot;full_screen(&#x27;dvorak_russian_and_special.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;dvorak_russian_and_special.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Как видно, здесь появилось намного больше, чем просто стрелки в слою. Здесь я:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Назначил &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на левый &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;.&lt;&#x2F;strong&gt; Из-за этого мне пришлось переучиваться нажимать пробел с левой руки на правую.
&lt;ul&gt;
&lt;li&gt;Тут нужно сказать что на самом деле для тамба &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; довольно далёк, и неудобно выгибать так палец. Да, неудобно, но терпимо, и это намного лучше, чем нажимать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; мизинцами.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Сделал стрелки плоскими.&lt;&#x2F;strong&gt; Потому что где-то слышал, что в каком-то vim&#x27;е стрелки сделаны подобным образом.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Добавил отдельную клавишу для запятой.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Перетащил &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; на место &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Выделил отдельную клавишу для переключения языка.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Enter поближе.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Все эти идеи до сих пор со мной, более подробно и с широкими объяснениями я их рассмотрю далее.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Здесь в английском находится раскладка «Дворак для программистов», и её главной особенностью является то, что основные символы для программирования нажимаются без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, а цифры нажимаются с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом. Так же цифры расположены в нестандартном порядке, а полезные в программировании препинаки расположены максимально близко (а не на мизинце, как на СК 😑).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Если вы хотите себе препинаки как в раскладке «Дворак для программистов», то не обязательно ставить именно эту раскладку, и переучиваться под новое положение букв. Можно сделать себе раскладку «qwerty для программистов» в специальных программах, и свести переобучение к минимуму, получив максимум результата. Если вы программист, то это сделает вашу жизнь значительно лучше.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Затем, когда я сделал эту идеальную раскладку, я наконец начал обучаться десятипалу через тренажёр VerseQ. После него я перешёл на &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&quot;&gt;Клавогонки&lt;&#x2F;a&gt;, и катал с такой модификацией раскладки долгое время под аккаунтом &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;451401&#x2F;&quot;&gt;optozorax&lt;&#x2F;a&gt;. Там же можно более подробно прочитать про эту раскладку.&lt;&#x2F;p&gt;
&lt;p&gt;Видно, что я отказался от СК и начал переосмысливать её ещё в самом начале.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nachalo-obucheniia-desiatipalu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nachalo-obucheniia-desiatipalu&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Начало обучения десятипалу&lt;&#x2F;h2&gt;
&lt;p&gt;Тут хочу остановиться по поводу VerseQ. Я случайно наткнулся на этот тренажёр, но влюбился в него за тот текст, что написан в справке, которая всплывает при его старте. А ещё в нём очень приятно печатать, как эстетически: внешний вид клавиатуры, и звук щелчка, так и концептуально: там очень короткие тексты, и они с первого запуска тренируют все буквы сразу.&lt;&#x2F;p&gt;
&lt;p&gt;И хочется покритиковать тренажёры «Соло на Клавиатуре», «Стамина», и словари «ва ол» на Клавогонках. Там от вас требуют печатать сначала сто раз букву &lt;kbd&gt;А&lt;&#x2F;kbd&gt;, затем сто раз букву &lt;kbd&gt;О&lt;&#x2F;kbd&gt;, и так все буквы потихоньку. Я считаю такой подход тупостью, и нужно сразу печатать реальные сочетания, запоминать все буквы сразу, и в реальной обстановке. Ничего в этом сложного нету. Плюс в тренажёре «Соло на Клавиатуре» к печатающему предъявляются очень высокие требования в плане безошибочности, поэтому некоторые люди забрасывают обучение десятипалу вообще. В VerseQ нету такого большого количества стресса.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;А сейчас для старта печати советую &lt;a href=&quot;https:&#x2F;&#x2F;klava.org&quot;&gt;klava.org&lt;&#x2F;a&gt;, он бесплатный, и там есть много функций.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Из-за видео Sorax&#x27;а я узнал что на английский лучше поставить раскладку «Дворак для программистов». Затем подумал что неплохо бы найти подобную раскладку для русского, но к сожалению &lt;code&gt;Диктор&lt;&#x2F;code&gt; и &lt;code&gt;раскладка Зубачёва&lt;&#x2F;code&gt; не нагуглились.&lt;&#x2F;p&gt;
&lt;p&gt;При обучении десятипалу я столкнулся с проблемой, что мои пальцы нажимали клавиши не из своих зон, и мне очень сложно было себя контролировать. Поэтому я сделал такие штуки из бумаги:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;724&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;bd01d17536ad1b5500.webp&quot; 
    onclick=&quot;full_screen(&#x27;paper_zones1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;paper_zones1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;724&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5f6d6743e351bd3800.webp&quot; 
    onclick=&quot;full_screen(&#x27;paper_zones2.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;paper_zones2.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ох, это были очень сложные в создании штуки. Первая их проблема, что из обычной бумаги это не сделаешь — она помнётся. Надо из твёрдой. Следующая проблема была в том, что эти бумажки падали, поэтому пришлось их клеить на бумажные стенки. А еще на этих бумажках пришлось вырезать некоторые участки, чтобы пальцы могли двигаться без помех.&lt;&#x2F;p&gt;
&lt;p&gt;У меня ушло очень много времени на создание такого чудовища, и в итоге, когда я начал печатать, понял что это полная фигня. Весь труд того не стоил, уж лучше я буду контроллировать себя не физически, а умственно. &lt;&#x2F;p&gt;
&lt;p&gt;Затем я столкнулся с проблемой, что у меня подглядывание на клавиатуру зашито уже на подкорку, и я &lt;em&gt;постоянно&lt;&#x2F;em&gt; смотрел на клавиатуру, поэтому скрафтил такое:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;724&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6cbeeb06ef64e65800.webp&quot; 
    onclick=&quot;full_screen(&#x27;paper_anti_spy.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;paper_anti_spy.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;С этой штукой захотел посмотреть на клавиатуру — смотришь, и ничего не видишь. Profit 👍.&lt;&#x2F;p&gt;
&lt;p&gt;Но потом и эта штука оказалась неудобной из-за необходимости её надевать, снимать. &lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Затем в голову пришла гениальная мысль, что подсматривание на клавиатуру не будет иметь смысла, если надписи на клавиатуре не будут иметь смысла, поэтому я вытащил все клавиши и расставил их в рандомном порядке. Это наиболее дешёвый и действенный метод борьбы с подглядыванием. Его можно увидеть на картинке ниже.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;В итоге мой воркфлоу по печати выглядел как-то так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;724&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dde768936013e73c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;how_i_type.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;how_i_type.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Распечатать свою раскладку и повесить рядом с монитором — удобно! Лучше искать нужный символ на бумажке и соответственно лучше запоминать раскладку, чем расслаблять мозг и давать компьютеру подсказывать где находится следующий символ.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;А после достижения 150-200 зн&#x2F;мин в этом тренажёре советую вам уйти на клавогонки, начать читать форум, и смотреть как развивались другие люди. 300 зн&#x2F;мин дадутся легко. А уже дальше могут начаться проблемы.&lt;&#x2F;p&gt;
&lt;p&gt;Возвращаясь обратно, когда я печатал десятипалом, я заметил что левой руке как-то неудобно нажимать клавишу &lt;kbd&gt;С&lt;&#x2F;kbd&gt; на русском языке, надо двигать палец в неестественном направлении. Затем я посмотрел на клавиатуру, и осознал что всю жизнь был слеп, оказывается клавиатура кривая.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Ну она же кривая!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Клавиатура кривая. И моя любимая на тот момент UHK тоже оказывается кривая! Поэтому я погуглил и узнал об ErgoDox EZ, и пометил себе в голове обязательно купить эту клавиатуру, когда у меня появятся деньги.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pervaia-slim-klaviatura&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pervaia-slim-klaviatura&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Первая слим клавиатура&lt;&#x2F;h2&gt;
&lt;p&gt;До этого я печатал на мембранной клавиатуре с высокими клавишами. И хейтил плоские клавиатуры, потому что они на ощущение были отвратительны. Плюс меня бесила тенденция всё делать сенсорным и плоским, убирая тактильные ощущения. Да и сейчас бесит. Ненавижу создателя сенсорной плитки, которая стоит в снимаемой мною квартире. Минусы сенсорных штук — ложные срабатывания от пролившейся воды, и иногда просто не срабатывания.&lt;&#x2F;p&gt;
&lt;p&gt;Но почему-то на клавогонках все писали что лучшая клавиатура для быстрой печати — слим-клавиатура. То есть такая, у которой плоские клавиши, ножничный механизм. И это писали даже лучшие из лучших. Особенно это актуально для русской раскладки ЙЦУКЕН, где очень много букв нажимаются указательными пальцами, и чтобы это быстрее печатать десятипалом, нужно использовать &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;wiki&#x2F;%D0%A1%D0%BA%D0%BE%D0%BB%D1%8C%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5&quot;&gt;скольжение&lt;&#x2F;a&gt;. А такое удобно только на плоской клаве. Это стало сильным ударом для меня, и поводом проверить это на истинность.&lt;&#x2F;p&gt;
&lt;p&gt;Когда я стал достигать скоростей (400 зн&#x2F;мин), я заметил, что задеваю клавиши, и виной этому их высокость, и наконец понял почему люди рекомендуют плоские клавиатуры.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я купил дешёвую слим-клавиатуру Rapoo E9070. Первое время было неприятно и неудобно, я частенько промахивался из-за отсутствия хоть какого-то разделения между клавишами, но на 400 зн&#x2F;мин я уже на уровне рефлексов знаю где какая клавиша, поэтому быстро привык. Вам могу посоветовать слим-клавиатуры, где между клавишами есть хоть какое-то расстояние, с ним приятней.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;800&quot;
    height=&quot;355&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;67db596dd362544c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;rapoo.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;rapoo.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И вот когда я привык к ней и начал печатать быстро, я понял что всё это было правдой. Плоская клавиатура действительно удобна именно для &lt;em&gt;быстрого&lt;&#x2F;em&gt; десятипала.&lt;&#x2F;p&gt;
&lt;p&gt;Вот так я из хейтера плоских клав превратился в их любителя.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pokupka-ergodox-ez&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pokupka-ergodox-ez&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Покупка ErgoDox EZ&lt;&#x2F;h2&gt;
&lt;p&gt;Параллельно я продолжил заниматься десятипалом на клавогонках, и к покупке эргодокса научился печатать со максимальной скоростью ≈550 зн&#x2F;мин.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы не засорять статистику переучиваниями на клавогонках, сразу после покупки я создал новый аккаунт: &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;517589&#x2F;&quot;&gt;ergozorax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Когда я был студентом 2-го курса, и у меня появилась стипендия и маленькие заработки на написании работ в универе другим людям, я смог себе купить б&#x2F;у ErgoDox EZ.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;766&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;78ffad330de45e7e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;ergodox.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;ergodox.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;19 февраля 2018 получил ErgoDox. Только в этот момент узнал что, оказывается, существует визуальный конфигуратор и прошивка написана на Си. До этого я покупал эргодокс только из-за его физического расположения кнопок, и из-за того, что на нём есть много клавиш для большого пальца.&lt;&#x2F;p&gt;
&lt;p&gt;20 дней спустя запрограммировал следующую раскладку и прошил её в клавиатуру:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1020&quot;
    height=&quot;711&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;83b56ea1d3279d5200.webp&quot; 
    onclick=&quot;full_screen(&#x27;first_ergodox_layout.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;first_ergodox_layout.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Картинку нарисовал в фотошопе :D.&lt;&#x2F;p&gt;
&lt;p&gt;Уже тогда эта раскладка работала без всяких драйверов, и настройки софта, и единственное, что ей было нужно — это чтобы на компе были самые обычные раскладки QWERTY и ЙЦУКЕН.&lt;&#x2F;p&gt;
&lt;p&gt;Когда я наконец сделал эту раскладку, можно было возвращаться на клавогонки, и бить рекорды.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;privykanie-k-priamym-riadam&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#privykanie-k-priamym-riadam&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Привыкание к прямым рядам&lt;&#x2F;h2&gt;
&lt;p&gt;Но для начала нужно рассказать про привыкание к клавиатуре. Это важная тема для тех, кто переходит на подобную клавиатуру.&lt;&#x2F;p&gt;
&lt;p&gt;На привыкание к прямым рядам (орто) у меня ушло две недели. Частенько не попадал, но в итоге привык, и затем понял что на прямых рядах я даже совершаю меньше ошибок, за счёт того что удобнее печатать. Явный пример: существует &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;vocs&#x2F;13663&#x2F;&quot;&gt;12 упражнение Хруста&lt;&#x2F;a&gt;, которое выглядит следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;Упражнение 12&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;по-любому облюбовать облюбовал любовь любой любая любви полюбив любое любимое любимая любой Любляна любая любой любви любимый любойы&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Это упражнение надо тренировать и набирать на скорость. Будучи на обычной клавиатуре, для меня это упражнение представляло трудности, и мои максимальные скорости в нём были обычными для всех. Но при переходе на прямые ряды это упражнение стало печататься &lt;em&gt;намного&lt;&#x2F;em&gt; проще, чем раньше, и я начал в нём совершать невероятные для своего уровня рекорды.&lt;&#x2F;p&gt;
&lt;p&gt;И это при том, что упражнение в основном на правую руку, для которой СК вроде как предоставляет удобное смещение рядов. Вспоминаем как выглядит смещение рядов на СК:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;480&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;82140178b9a7712200.webp&quot; 
    onclick=&quot;full_screen(&#x27;offset.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;offset.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И тут видно, что для части где нахдоятся буквы &lt;kbd&gt;Ю&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Б&lt;&#x2F;kbd&gt; смещение рядов 1&#x2F;2 клавиши. Из чего делаем вывод что меня тормозило и запутывало именно смещение 1&#x2F;2. Не уверен, было бы мне так же сложно набирать, будь там смещение 1&#x2F;4, но вот про 1&#x2F;2 я могу сказать точно, что оно неудобно.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Странное изменение смещения рядов и вообще смещение 1&#x2F;2.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;privykanie-k-vysokim-klavisham&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#privykanie-k-vysokim-klavisham&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Привыкание к высоким клавишам&lt;&#x2F;h2&gt;
&lt;p&gt;Но, оказывается, переучивание под прямые ряды было не главной проблемой на эргодоксе! Судя по тому что я писал в мессенджерах, самую большую проблему для меня составил переход на высокие клавиши, с низких.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Прямые ряды не главная проблема при переходе!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так что если вы считаете высокую механику манной небесной, то по сравнению со мной, для вас переход на прямые ряды будет проще.&lt;&#x2F;p&gt;
&lt;p&gt;А знаете почему правильные клавиатуры поголовно механические? А потому что механические переключатели позволяют собрать клавиатуру по одной клавише, и тебе не нужно идти ни на какие заводы чтобы напечатать мембранную клавиатуру твоего формата. Да и не напечатают они, судя по тому, что на рынке исчезающе мало мембранных правильных клавиатур. Поэтому на механике я не по собственной воле, и до сих пор скучаю по плоским клавишам.&lt;&#x2F;p&gt;
&lt;p&gt;(Конечно, есть низкопрофильные свитчи, но там надо паять, а я тратить время на обучение паянию не собираюсь.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prodolzhenie-istorii-s-ergodox-ez&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prodolzhenie-istorii-s-ergodox-ez&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Продолжение истории с Ergodox EZ&lt;&#x2F;h2&gt;
&lt;p&gt;Итак, через 4 дня после введения этой раскладки я побил свой рекорд и в обычном режиме на Клавогонках сделал 559 зн&#x2F;мин. А потом сделал и 570.&lt;&#x2F;p&gt;
&lt;p&gt;Затем через 15 дней я реализовал залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; — это такой &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, который при обычном зажатии работает как обычный, а при единоразовом нажатии и отпускании автоматически применится к следующей клавише.&lt;&#x2F;p&gt;
&lt;p&gt;А уже через месяц, 20 апреля 2018 я пришёл в чат &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&quot;&gt;@klavaorgwork&lt;&#x2F;a&gt;, где находятся люди, так же как и я, увлечённые созданием раскладок и клавиатур. В частности там был &lt;a href=&quot;http:&#x2F;&#x2F;ibnteo.klava.org&quot;&gt;Волька ibnteo&lt;&#x2F;a&gt; — он одним из первых в русскоязычном сообществе создал правильную клавиатуру — &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;en&#x2F;post&#x2F;185500&#x2F;&quot;&gt;Кошкоклаву&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Уже когда я пришёл в это сообщество в телеграме, у меня была примерно такая раскладка, описание которой сейчас находится здесь &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;keyboard_layout&quot;&gt;optozorax&#x2F;keyboard_layout&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Она выглядела именно так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;809&quot;
    height=&quot;1280&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;054a8aa59935d70d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;ergodox.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;ergodox.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;perestanovka-bukv&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#perestanovka-bukv&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Перестановка букв&lt;&#x2F;h2&gt;
&lt;p&gt;Я всегда понимал, что ЙЦУКЕН — не предел мечтаний, и на нём не очень удобно печатать, и всегда предпринимал попытки создать &lt;em&gt;Идеальную Скоростную Раскладку&lt;&#x2F;em&gt;, но это не очень получалось.&lt;&#x2F;p&gt;
&lt;p&gt;В сообществе создателей клавиатур я познакомился с &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;439088&#x2F;&quot;&gt;Kanazei&lt;&#x2F;a&gt;&#x27;ем, который постоянно модифицировал свою раскладку тем, что переставлял пару букв, и переучивался. Он больше опирался на собственные ощущения при переделки раскладки, чем на всякие программы, и не старался сразу создать идеал. Соответственно в ходе таких ручных действий он научился многому, и благодаря этому, мне кажется, сейчас он — главный эксперт по буквенным раскладкам во всём нашем сообществе.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Перекат&lt;&#x2F;strong&gt; — &lt;em&gt;не хочу дублироваться, лучше прочитать в теме о&lt;&#x2F;em&gt; &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;forum&#x2F;academy&#x2F;15353&#x2F;&quot;&gt;перекатах на клавогонках&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Вдохновившись его примером, я решился тоже немного переставить буквы. А именно, я поменял местами Щ⬌Н, Ш⬌Т. Такая перестановка должна была ввести в игру самое частое двубуквенное сочетание: &lt;code&gt;ТО&lt;&#x2F;code&gt; в виде удобного и быстрого переката. Да и в целом увеличить число перекатов.&lt;&#x2F;p&gt;
&lt;p&gt;Это было 9 мая 2018 года. Спустя 2 дня удалось добиться скорости 400. Спустя 8 дней от перестановки — скорость 500. Спустя три недели от перестановки — старая скорость восстановлена.&lt;&#x2F;p&gt;
&lt;p&gt;Только после трёх недель привыкания смог нормально печатать, хотя даже спустя месяцы бывали такие моменты, когда во время печати отключаю разум, и руки сами неправильно нажимают на старое место буквы Ш, Т, Н, Щ.&lt;&#x2F;p&gt;
&lt;p&gt;Я не ожидал, что привыкнуть будет так сложно. Даже когда я привыкал к прямым рядам на эргодоксе, было намного легче.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё же главная проблема старых рефлексов по нажатиям клавиш в том, что руки привыкают не столько к нажатию отдельных букв, сколько к нажатию сочетаний. Например, &lt;code&gt;ТЬ&lt;&#x2F;code&gt;, на скорости руки это уже не воспринимают как две буквы, а как одно действие как одну новую букву. И поэтому, даже если научиться нажимать &lt;code&gt;Т&lt;&#x2F;code&gt; в новом месте, это не значит, что все такие действия переучатся автоматически. И вот с каждой клавишей таких сочетаний связано очень много, и всех их надо переучивать. Именно по этой причине я считаю «Соло на клавиатуре» и подобные тренажёры неудачными: потому что они не учат сочетаниям.&lt;&#x2F;p&gt;
&lt;p&gt;По ощущениям печатать с &lt;code&gt;ТО&lt;&#x2F;code&gt; на перекате было шикарно, мой потенциал скорости увеличился.&lt;&#x2F;p&gt;
&lt;p&gt;Где-то в сентябре я продолжил перестановки, и сделал К⬌Е и М⬌И, а затем Ф⬌К и Ы⬌М. То есть украл ещё две буквы с указательных, и поближе подвинул частые гласные. Количество перекатов у меня стало ещё больше.&lt;&#x2F;p&gt;
&lt;p&gt;Для этой перестановки я уже не помню как долго переучивался, но вроде было не так сложно, потому что это не такие частотные буквы как Н и Т.&lt;&#x2F;p&gt;
&lt;p&gt;Тут я не учитываю всякие редкие буквы типо &lt;code&gt;Х&lt;&#x2F;code&gt;, &lt;code&gt;Ъ&lt;&#x2F;code&gt;, ибо они переставлялись много.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dvoeniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dvoeniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Двоения&lt;&#x2F;h2&gt;
&lt;p&gt;Примерно где-то в это время, через год очень активного пользования, у меня в клавиатуре начались двоения наиболее частых букв: &lt;kbd&gt;Р&lt;&#x2F;kbd&gt;, &lt;kbd&gt;В&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;. Виной тому думаю б&#x2F;у&#x27;шность изначальной клавиатуры и плохое качество свитчей Gateron Clear. К сожалению у меня не получилось выпять двоящие свитчи и поменять местами их с менее редкими клавишами.&lt;&#x2F;p&gt;
&lt;p&gt;Но проблему немного удалось победить костылями в програмной оболочке. &lt;&#x2F;p&gt;
&lt;p&gt;К сожалению в моей версии клавиатуры ещё не было Hot-Swap&#x27;а.&lt;&#x2F;p&gt;
&lt;p&gt;И где-то в этот момент я начал подумывать о том чтобы купить новую клавиатуру, где будет Hot-Swap.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;heatmap&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#heatmap&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Heatmap&lt;&#x2F;h2&gt;
&lt;p&gt;8 апреля 2019 узнал что из клавиатуры можно делать &lt;code&gt;printf&lt;&#x2F;code&gt;, никак не влияющий на печатаемый текст. И на основе этого решил наконец реализовать свою идею о том, чтобы собирать статистику нажатий с клавиатуры.&lt;&#x2F;p&gt;
&lt;p&gt;Более подробно это можно прочитать под хэштэгом &lt;code&gt;#heatmap&lt;&#x2F;code&gt; в чатике в телеграме: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&quot;&gt;@klavaorgwork&lt;&#x2F;a&gt;, либо в ридмишке проекта &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;heatmap&quot;&gt;klavarog&#x2F;heatmap&lt;&#x2F;a&gt;. Благодаря этой возможности делать &lt;code&gt;printf&lt;&#x2F;code&gt; внутри клавиатуры можно не только замерять статистику нажатий, но и проводить дебаг.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы данная возможность работала, необходимо всего-лишь вставить одну строку кода в код своей раскладки.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я сделал что-то типо слабого консольного TypingStatistics на основе этого:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;663&quot;
    height=&quot;447&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b4e59b0a51fbc8c500.webp&quot; 
    onclick=&quot;full_screen(&#x27;heatmap.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;heatmap.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В итоге, пройдя извилистый путь, 13 августа 2019 закончил делать программу и всю сопутствующую машинерию, и опубликовал результат в репозитории &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;heatmap&quot;&gt;klavarog&#x2F;heatmap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я поставил эту программу в автозапуск, чтобы она собирала статистику пока я работаю. Начиная с какого-то момента я перестал это делать, так что статистика есть только старая, без новой. Думаю надо бы переписать этот проект на Rust, и сделать его так, чтобы можно было и для СК замерять всю аналогичную статистику.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я публиковал свою статистику на основании 1.5 миллиона нажатий в том же чатике под хэштэгом &lt;code&gt;#частотность&lt;&#x2F;code&gt;. Если не хотите заходить в чат, то вот прямые ссылки: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;154628&quot;&gt;раз&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;39849&quot;&gt;два&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Далее в этой статье я буду использовать результаты этой статистики в демонстративных целях.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kladenets&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kladenets&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Кладенец&lt;&#x2F;h2&gt;
&lt;p&gt;7 сентября 2019 проходил Moscow Maker Faire, где Волька вместе с Suenot&#x27;ом представляли свои клавиатуры. Так как мне в тот момент повезло находится в Москве, я решил не упускать такой шанс и пришёл наконец встретиться вживую. Заодно потыкался в тогдашнюю Волькину новую клавиатуру &lt;a href=&quot;https:&#x2F;&#x2F;ibnteo.github.io&#x2F;kladenets&#x2F;README-RU&quot;&gt;Кладенец&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;563&quot;
    height=&quot;1000&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;46a628085607c3ee00.webp&quot; 
    onclick=&quot;full_screen(&#x27;kladenets_first_time.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;kladenets_first_time.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;До этого, в чатике, было сложно воспринимать как работает Кладенец и что это вообще такое. А после живого сеанса стало понятнее, и очень понравилось.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я пришёл к мысли, что хочу попробовать научиться печатать на Кладенце. И 15 сентября Волька подарил мне самый первый экземпляр, и я начал учиться:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;393db2077b5808bf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;kladenets.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;kladenets.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Очень подробно обо всём процессе обучения, мыслях и информации можно почитать в канале в телеграме &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;kladenets_zorax&quot;&gt;@kladenets_zorax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Когда я начал учиться, мне показалась гениальной идея полисимвольности и то как возможно работать полностью одной рукой.&lt;&#x2F;p&gt;
&lt;p&gt;Потихоньку, помаленьку, я стал печатать дальше. Обучение Кладенцу шло намного сложнее, чем обучение десятипалу, аккорды и двукнопия было нажимать сложно и очень мучительно для мозга. Так же я создал отдельный аккаунт для обучения Кладенцу: &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;567009&#x2F;&quot;&gt;kladozorax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Кладенец был больше экспериментом, чем попыткой пересесть на новую платформу печати.&lt;&#x2F;p&gt;
&lt;p&gt;Через 15 дней, 30 сентября 2019 на Кладенце достиг скорости 100 зн&#x2F;мин в обычном режиме на клавогонках, одной рукой!&lt;&#x2F;p&gt;
&lt;p&gt;Вот видео, в котором я набираю простой текст одной рукой, и где можно увидеть как именно происходит печать на Кладенце:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;tRhdZPuxcyI&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Так как Кладенец — очень интересная и сложная клавиатура, ко мне начало приходить много идей как его раскладку можно визуализировать.&lt;&#x2F;p&gt;
&lt;p&gt;Вот уже результат тогдашних экспериментов по визуализации: (можно не читать, а просто насладиться красивыми сложными картинками)&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1017&quot;
    height=&quot;1280&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3eb06a4bda97eaa400.webp&quot; 
    onclick=&quot;full_screen(&#x27;kladenets_explanation_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;kladenets_explanation_1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×3.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;1213&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c2c5eda48cf965ce00.webp&quot; 
    onclick=&quot;full_screen(&#x27;kladenets_explanation_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;kladenets_explanation_2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×3.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ещё я придумал аккордовую клавиатуру, которая состоит из 5 клавиш, но при этом реализует полноценный нумпад — Нумкорд:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;591&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9fa12e8c846d0e8400.webp&quot; 
    onclick=&quot;full_screen(&#x27;numcord.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;numcord.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И ещё придумал визуализацию аккордов:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;719&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;843a88a62cfb8a2d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;chords_ways.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;chords_ways.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.7&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;В итоге я достиг скорости почти 300 зн&#x2F;мин в словаре «Соточка» на Кладенце одной рукой, и сейчас уже на нём печатаю очень редко.&lt;&#x2F;p&gt;
&lt;p&gt;Это был очень интересный опыт, после которого стали понятны ошибки Кладенца, и благодаря которому я открылся аккордам, и придумал очень много способов как их можно визуализировать. В частности идеи визуализации аккордов я использую в своей раскладке на основом слое.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pokupka-moonlander&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pokupka-moonlander&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Покупка Moonlander&lt;&#x2F;h2&gt;
&lt;p&gt;В июле 2020 года через неофициальные источники, ещё до официального объявления, я узнал что ZSA выпустили эту новую клавиаутуру. Почитав и подумав, я решил заказать. Клавиатура была намного лучше Ergodox и я наконец смог избавиться от проблемы двоения клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;Мне повезло: я стал одним из первых, и 3 сентября 🍁 2020 года клавиатура была уже у меня. Это стало вдохновением чтобы взять и переделать всю мою раскладку с учётом кучи идей, и переучиться на неё.&lt;&#x2F;p&gt;
&lt;p&gt;Далее будет рассказано какие именно новые фичи появились при глобальном переписывании прошивки под мунляндер. Самые главные — это аккорды, и одинаковые препинаки для русского и английского языка.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nabor-skorosti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nabor-skorosti&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Набор скорости&lt;&#x2F;h2&gt;
&lt;p&gt;Все рекорды написаны в для обычного режима в клавогонках в единицах зн&#x2F;мин, и рекорды в основном со сменой ранга. К сожалению во времена до десятипала я не подумал замерить свою скорость. &lt;&#x2F;p&gt;
&lt;p&gt;Все рекорды можно более подробно посмотреть в моих аккаунтах на клавогонках: &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;451401&#x2F;&quot;&gt;optozorax&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;517589&#x2F;&quot;&gt;ergozorax&lt;&#x2F;a&gt;, у меня статистика открытая.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Дата&lt;&#x2F;th&gt;&lt;th&gt;Δt&lt;&#x2F;th&gt;&lt;th&gt;Рекорд&lt;&#x2F;th&gt;&lt;th&gt;Комментарий&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;~июнь 2016&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;Начал обучаться слепой печати в VerseQ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;27 июня 2016&lt;&#x2F;td&gt;&lt;td&gt;~месяц&lt;&#x2F;td&gt;&lt;td&gt;139&lt;&#x2F;td&gt;&lt;td&gt;Пришёл на клавогонки&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10 июля 2016&lt;&#x2F;td&gt;&lt;td&gt;13 дней&lt;&#x2F;td&gt;&lt;td&gt;282&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10 июля 2016&lt;&#x2F;td&gt;&lt;td&gt;0 дней&lt;&#x2F;td&gt;&lt;td&gt;303&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8 августа 2016&lt;&#x2F;td&gt;&lt;td&gt;29 дней&lt;&#x2F;td&gt;&lt;td&gt;406&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;19 апреля 2017&lt;&#x2F;td&gt;&lt;td&gt;8 месяцев, 11 дней&lt;&#x2F;td&gt;&lt;td&gt;508&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;17 февраля 2018&lt;&#x2F;td&gt;&lt;td&gt;9 месяцев, 29 дней&lt;&#x2F;td&gt;&lt;td&gt;566&lt;&#x2F;td&gt;&lt;td&gt;Последний рекорд на слим-клавиатуре&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;19 февраля 2018&lt;&#x2F;td&gt;&lt;td&gt;2 дня&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;Получил эргодокс&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3 марта 2018&lt;&#x2F;td&gt;&lt;td&gt;12 дней&lt;&#x2F;td&gt;&lt;td&gt;462&lt;&#x2F;td&gt;&lt;td&gt;Первый рекорд на эргодоксе&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5 марта 2018&lt;&#x2F;td&gt;&lt;td&gt;3 дня&lt;&#x2F;td&gt;&lt;td&gt;570&lt;&#x2F;td&gt;&lt;td&gt;Побил рекорд на слиме&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;31 июля 2018&lt;&#x2F;td&gt;&lt;td&gt;4 месяца, 26 дней&lt;&#x2F;td&gt;&lt;td&gt;604&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;31 июля 2018&lt;&#x2F;td&gt;&lt;td&gt;1 год, 3 месяца, 12 дней&lt;&#x2F;td&gt;&lt;td&gt;604&lt;&#x2F;td&gt;&lt;td&gt;В этой строчке разница времени считается от рекорда 508&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7 января 2020&lt;&#x2F;td&gt;&lt;td&gt;1 год, 5 месяцев, 7 дней&lt;&#x2F;td&gt;&lt;td&gt;718&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3 сентября 2020&lt;&#x2F;td&gt;&lt;td&gt;7 месяцев, 27 дней&lt;&#x2F;td&gt;&lt;td&gt;-&lt;&#x2F;td&gt;&lt;td&gt;Получил Moonlander&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;После рекордов &amp;gt; 500 я уже начал меньше кататься на клавогонках, и перестал тренироваться, поэтому рекорды так долго делались. Сейчас уже практически не катаю.&lt;&#x2F;p&gt;
&lt;p&gt;Для понимания такой скорости печати относительно чего-то другого я делал такие замеры:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Вид деятельности&lt;&#x2F;th&gt;&lt;th&gt;Скорость&lt;&#x2F;th&gt;&lt;th&gt;На ком проверено&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Чтение&lt;&#x2F;td&gt;&lt;td&gt;1800&lt;&#x2F;td&gt;&lt;td&gt;Я и мой друг&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Разговор размеренным темпом без пауз&lt;&#x2F;td&gt;&lt;td&gt;1200&lt;&#x2F;td&gt;&lt;td&gt;Я и мой друг&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Написание текста ручкой&lt;&#x2F;td&gt;&lt;td&gt;160&lt;&#x2F;td&gt;&lt;td&gt;Я&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Написание текста на смартфоне с сенсорным экраном, стандартным размером, без Т9 и без свайпа&lt;&#x2F;td&gt;&lt;td&gt;150&lt;&#x2F;td&gt;&lt;td&gt;Я&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Вы можете сделать и свои замеры, просто взяв секундомер и текст с известным числом символов. Например, можно убедиться в своей скорости написания ручкой. Сравнить когда вы пишете аккуратно, а когда максимально быстро. И что это точно не догонит хотя бы 300 зн&#x2F;мин на клавиатуре.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;skorost&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skorost&quot;&gt;#&lt;&#x2F;a&gt;Скорость&lt;&#x2F;h1&gt;
&lt;p&gt;То что я быстро печатаю, и совершенствую свой навык — это тоже важная часть раскладки и вообще моего ощущения клавиатуры. Напоминаю, что на русском мой рекорд 718 зн&#x2F;мин. Если учитывать рекорды из словаря &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;vocs&#x2F;23329&quot;&gt;Тексты 0-1 сложность&lt;&#x2F;a&gt;, то 755 зн&#x2F;мин. Поэтому здесь я расскажу плюсы и свойства скорости.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ne-zavisit-ot-klaviatury-ili-raskladki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ne-zavisit-ot-klaviatury-ili-raskladki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Не зависит от клавиатуры или раскладки&lt;&#x2F;h2&gt;
&lt;p&gt;К сожалению или к счастью, правильная клавиатура не даёт значительных преимуществ перед другими в плане скорости. Все основные мировые рекорды скорости были поставлены на стандартных клавиатурах и на стандартных раскладках.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя этот заголовок не совсем правильный. Скорость зависит от этих вещей. И для правильной клавиатуры ускорение очевидно и доказано на моём опыте, а для альтернативных раскладок типо Дворака или Диктора, прирост максимальной возможной скорости неизвестен. По моему мнению для скорости лучше подходят перекаты, но это не очень исследованная тема в раскладкостроении, и такое сложно нагуглить.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;eto-priiatno-i-udobno&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#eto-priiatno-i-udobno&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Это приятно и удобно&lt;&#x2F;h2&gt;
&lt;p&gt;Если сравнивать всякие ощущения от механических переключателей или от их смазки, то скорость ощущается приятнее всего. Просто то ощущение как у тебя пальцы точно и быстро скачут по клавиатуре — это уже очень прикольно.&lt;&#x2F;p&gt;
&lt;p&gt;Скорость ощущается таким же важным фактором в удобстве работы с клавиатурой, как прямые ряды, или вся моя раскладка. Хотя, она не настолько важна: я бы смог прожить без скорости, но вот без своей раскладки — нет.&lt;&#x2F;p&gt;
&lt;p&gt;При этом для меня прямые ряды были бы не настолько важны, если бы я не умел печатать с большой скоростью.&lt;&#x2F;p&gt;
&lt;p&gt;Во время печати на маленькой скорости, по динамическим зонам, помнится мне, что требовалось намного больше усилий, чтобы напечатать текст, чем это требуется сейчас. При этом, на скорости 700, удобства намного больше, чем на скорости 400.&lt;&#x2F;p&gt;
&lt;p&gt;При этом, очевидно, что когда ты обладаешь скоростью, у неё нет никаких минусов по сравнению с медленной печатью. Единственный минус скорости — чтобы её набрать, нужно тратить время.&lt;&#x2F;p&gt;
&lt;p&gt;Для кого-то этот выигрыш не стоит того, чтобы тратить время на развитие скорости, и я их понимаю.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kogda-prikhoditsia-pechatat-medlenno&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kogda-prikhoditsia-pechatat-medlenno&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Когда приходится печатать медленно&lt;&#x2F;h2&gt;
&lt;p&gt;Один из таких кейсов — это когда я использую телефон, и мне приходится медленно печатать. И тут я во всей красе осознаю насколько же мне важна скорость. Во время печати сообщений на телефоне я не могу так ясно выразить свою мысль, потому что она ускользает от меня быстрее, чем я успеваю её напечатать, и вообще очень больно печатать настолько медленно.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я не могу быстро рефакторить текст на телефоне.&lt;&#x2F;p&gt;
&lt;p&gt;Аналогично дискомфортно я себя ощущаю во время написания чего-то на бумаге ручкой. Поэтому всякие сочинения для всяких литератур я в первую очередь писал на компьютере, а лишь затем переносил в тетрадку (вот бред!). И это было ещё до того как я научился десятипалу. Видимо тогда, на динамике, у меня была скорость около 200-300 зн&#x2F;мин, а это уже в 1.5-2 раза отличается от скорости на бумажке.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;put-polucheniia-skorosti-tozhe-priiaten&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#put-polucheniia-skorosti-tozhe-priiaten&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Путь получения скорости тоже приятен&lt;&#x2F;h2&gt;
&lt;p&gt;Изначально я считал, что 300 зн&#x2F;мин мне будет достаточно, поэтому хотел остановиться на этом значении. Но во время набора скорости на клавогонках, я подсел на это дело, и стал получать от него удовольствие. Поэтому продолжил набирать скорость просто потому что это приятно, приятно кататься в упражнениях, в разных словарях, и видеть как ты растёшь. &lt;&#x2F;p&gt;
&lt;p&gt;Так же набирать скорость намного проще, чем даже заниматься спортом. Тут ты двигаешь только пальцами, и можешь получить оценку своего состояния почти мгновенно, в отличие от спорта.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skorost-i-bezoshibochnost&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skorost-i-bezoshibochnost&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скорость и безошибочность&lt;&#x2F;h2&gt;
&lt;p&gt;Чем больше скорость печати, тем проще не совершать опечатки. Это хорошо заметно в клавогонках: когда я печатал под 400-500, у меня было 2-3% опечаток. Когда же я начал печатать 600-700, то процент моих опечаток стал около 1.5%. &lt;&#x2F;p&gt;
&lt;p&gt;Конечно, можно специально обучаться не совершать опечатки, тренировать безошибочность, и я даже пробовал это делать, но мне не понравилось. Так что результат уменьшения у меня процента ошибок именно за счёт скорости, а не особой тренировки.&lt;&#x2F;p&gt;
&lt;p&gt;Так как это получается само, то, имея большую скорость, можно безобразно печатать, и ни в чём себя не контроллировать, а пальцы будут совершать движения точнее.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smeshchenie-kistei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#smeshchenie-kistei&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Смещение кистей&lt;&#x2F;h2&gt;
&lt;p&gt;Так же важно отметить, что у меня при наборе на скорости, кисти смещаются. То есть они не стоят абсолютно неподвижно. &lt;&#x2F;p&gt;
&lt;p&gt;Они смеющатся не настолько сильно, как смещается кисть при нажатии &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; на СК. У меня кисти смещаются намного ближе.&lt;&#x2F;p&gt;
&lt;p&gt;Это можно рассмотреть на примере сочетания СЫЙ на ЙЦУКЕН, которое отрабатывается в &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;vocs&#x2F;13659&#x2F;&quot;&gt;10 упражнении Хруста&lt;&#x2F;a&gt;. Это сочетание можно нажать перекатом, тремя пальцами. Но нажимать это очень неудобно ввиду стаггера СК, которое ещё дополняется сложным направлением. Поэтому обычно это сочетание на СК нажимается побуквенно, или по две буквы.&lt;&#x2F;p&gt;
&lt;p&gt;С точки зрения смещения кисти эта проблема решается другим образом: можно заранее сместить руку с домашней позиции и поместить её под таким углом, чтобы СЫЙ набиралось как будто все эти клавиши находятся на домашней позиции.&lt;&#x2F;p&gt;
&lt;p&gt;Так же после появления у меня эргодокса в этом 10 упражнении я стал совершать значительные успехи, и печатал его слишком хорошо для своего ранга. Думаю тоже как раз благодаря тому, что зоны для левой руки стали адекватнее, удобнее.&lt;&#x2F;p&gt;
&lt;p&gt;То что у меня кисть смещается, я сам неожиданно для себя открыл, и не учился этому специально. И она у меня смещается таким образом под множество различных перекатов и сочетаний. Так что не нужно себя ограничивать и делать абсолютно неподвижную кисть.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;avtomatizm&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#avtomatizm&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Автоматизм&lt;&#x2F;h2&gt;
&lt;p&gt;Для тех кто не знает как работает скорость, объясняю: я не сверх-человек, который обладает сверх-рефлексами, сверх-вниманием и вообще чем-то особенным, скорость работает не так. Скорость работает за счёт того что мозг обучается быстрее совершать наиболее частые движения за счёт автоматизма.&lt;&#x2F;p&gt;
&lt;p&gt;Например, почти все люди умеют говорить. А вы когда-нибудь задумывались какие движения совершают ваши губы и язык чтобы произвести звук? А вы знали что можете говорить на скорости 1200 зн&#x2F;мин? Да, и язык тоже совершает точные, сложные движения, на огромной скорости, но мы этого не замечаем. Всё за счёт автоматизма. В детстве мы говорили очень тупо и очень медленно, потому что ещё не владели ртом, но с годами, с сотнями часов практики, в мозге уже выжигаются нейронные связи нужные для произошения слов, и мы можем говорить автоматически. Речь нам даётся настолько просто, что ощущается как будто мысль льётся прямо из мозга сразу в звуки.&lt;&#x2F;p&gt;
&lt;p&gt;Тоже самое с печатью. Что интересно, количество усилий, требуемое для печати, всегда одно и то же. Когда я печатаю на скорости 700, я прикладываю то же самое число усилий, которое я прикладывал, когда печатал 500, со средней 400. И я прикладываю то же самое число усилий, которое прикладывал, когда печатал со скоростью 300, со средней в 250.&lt;&#x2F;p&gt;
&lt;p&gt;Набор скорости — это больше про то как обучить мозг моторному навыку, а не про собственно печать.&lt;&#x2F;p&gt;
&lt;p&gt;Так же чтобы печатать 700, пальцы не обязаны сильно напрягаться, мышцы не должны тренироваться, тут больше в технике дело.&lt;&#x2F;p&gt;
&lt;p&gt;Или как происходит набор скорости можно сформулировать через зону комфорта. Когда достигается скорость ~350, то далее автоматический набор скорости затруднён, здесь уже чтобы достичь чего-то выше, нужно выходить из зоны комфорта. И за счёт выхода из зоны комфорта, верхняя граница этой зоны постоянно смещается, вместе с нижней.&lt;&#x2F;p&gt;
&lt;p&gt;Про зону комфорта можно сказать, что однажды я написал текст со скоростью 612 зн&#x2F;мин, печатая в абсолютно спокойном темпе, не напрягая руки.&lt;&#x2F;p&gt;
&lt;p&gt;И тут действуют те же самые принципы, которые работают и при обучении любому другому моторному навыку: систематически отдыхать и выходить из зоны комфорта.&lt;&#x2F;p&gt;
&lt;p&gt;Что интересно, эти два принципа так же применимы к мышцам.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Ещё нужно отметить, что автоматизм проще развивать для десятипала, чем для динамики. Очевидно, что в динамике существует намного больше сочетаний для разных пальцев, чем это существует для статики. И в динамике каждый палец нажимает больше клавиш. &lt;&#x2F;p&gt;
&lt;p&gt;Ещё это означает, что со временем автоматизм статики улучшается лучше, чем улучшается автоматизм динамики. В динамике, за счёт большего числа вариантов, не гарантируется, что мозг сможет это всё запоминать автоматически, соответственно не гарантируется, что скорость будет расти сама по себе, или будет расти простота печати.&lt;&#x2F;p&gt;
&lt;p&gt;Именно поэтому десятипал более близок к истине, чем динамические зоны.&lt;&#x2F;p&gt;
&lt;p&gt;На практикет наблюдается, что в десятипале, после больших перерывов в тренировках, люди обычно начинают расти в скорости как на дрожжах.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;bol-shie-soobshcheniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#bol-shie-soobshcheniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Большие сообщения&lt;&#x2F;h2&gt;
&lt;p&gt;За счёт всего вышесказанного, с набором скорости, печать становится не таким утомляющим занятием, и набирать большие тексты можно практически без напряга. Единственный напрягающий момент в наборе больших текстов — это, собственно, сами размышления. Благодаря этому я стал в социальных сетях и мессенджерах писать намного более развёрнутые сообщения.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;skorost-i-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skorost-i-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скорость и слои&lt;&#x2F;h2&gt;
&lt;p&gt;Мне кажется что нельзя быстро печатать, когда что-то, от чего зависит скорость, у тебя находится в слою. Например, &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt; в слою, или &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt;. Мне кажется тут всё дело в простоте развития автоматизма.&lt;&#x2F;p&gt;
&lt;p&gt;Возьмём в качестве примера &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt;. Раньше он у меня находился в слою, который нажимался левым мизинцем, а сама клавиша была на правом указательном.&lt;&#x2F;p&gt;
&lt;p&gt;Так как эта клавиша используется очень часто, и особенно во время быстрой печати, у меня постоянно совершались ошибки: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;То я держал слой дольше положенного, и лишние клавиши нажимались в слое, а не без него&lt;&#x2F;li&gt;
&lt;li&gt;То я наоборот не нажимал слоефикатор раньше времени, и вместо &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt; нажималась буква.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я называю это явление &lt;strong&gt;проблема синхронизации&lt;&#x2F;strong&gt; — когда ошибка возникает из-за того что слоефикатор&#x2F;модификатор нажался или отпустился в неправильное время, из-за чего нажимается лишняя клавиша, либо нужная клавиша не нажимается.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Когда же я вынес его в клавишу без слоя, стало намного проще жить. По этой причине я не воспринимаю препинаки и буквы в слою. То есть поэтому я выбираю клавиатуру, которая обладает цифрорядом, но об этом потом. И по этой же причине, я стараюсь использовать залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, который применяется только к одной следующей клавише, за счёт чего такой &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; ощущается больше как буква, чем слоефикатор, но и об этом потом.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pro-moonlander&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-moonlander&quot;&gt;#&lt;&#x2F;a&gt;Про Moonlander&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;forma-klaviatury&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#forma-klaviatury&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Форма клавиатуры&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;nalichie-tsifrovogo-riada&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nalichie-tsifrovogo-riada&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Наличие цифрового ряда&lt;&#x2F;h3&gt;
&lt;p&gt;Для начала &lt;strong&gt;цифровой ряд&lt;&#x2F;strong&gt; — это верхний ряд на СК, в котором находятся цифры, и препинаки при зажатии &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а.&lt;&#x2F;p&gt;
&lt;p&gt;Если погуглить эргономичные и ортолинейные клавиатуры, то можно заметить что в большинстве из них нету цифрового ряда, яркий пример — клавиатура &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;foostan&#x2F;crkbd&quot;&gt;Corne&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;602&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a24f8dc8ec7f5cb200.webp&quot; 
    onclick=&quot;full_screen(&#x27;corne.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;corne.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Для неподготовленного человека такая клавиатура выглядит безумно: в ней нету привычных стрелочек, F-клавиш, цифроряда.&lt;&#x2F;p&gt;
&lt;p&gt;Люди говорят, что до цифрового ряда им далеко тянуться, а препинаки и числа в слою находятся очень близко. Хотя, например, вроде как, для среднего пальца цифровой ряд находится в шаговой доступности, без смещения кисти.&lt;&#x2F;p&gt;
&lt;p&gt;Так как до цифрового ряда далеко тянуться, то они предпочитают засунуть цифры и символы в слои, например в похожей клавиатуре &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KGOH&#x2F;Jian-Info&quot;&gt;Jian&lt;&#x2F;a&gt;, в её раскладке по умолчанию, слои выглядят следующим образом:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;824&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eb565828799ce6a400.webp&quot; 
    onclick=&quot;full_screen(&#x27;jian_layout.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;jian_layout.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.keyboard-layout-editor.com&#x2F;#&#x2F;gists&#x2F;9740d2bf0e1b98644100a7caa60be88a&quot;&gt;Эта раскладка на KLE&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Вот даже есть видео про этот подход:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;AKGXZ1ReU54&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Я же в свою очередь, очень не люблю нажимать клавишу &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на скорости, соответственно мне и не будут нравиться нажатия слоефикатора.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя, наверное, тем, кто уходит с СК, и никогда не пробовал Дворак для программистов, без разницы будут символы в слое или с зажатым &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом. Для них же все символы набирались с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом, а тут то же самое, только &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; другой, а символы ближе.&lt;&#x2F;p&gt;
&lt;p&gt;А я, как человек, привыкший к символам без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а на Двораке для программистов, уже не могу отказаться от этого удобства. Плюс мне кажется, что на скорости пользоваться цифрорядом намного проще.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я использую цифроряд скорее не для цифр, а больше для препинаков.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так что если найдётся программист со скоростью &amp;gt;600 зн&#x2F;мин, который не обладает цифрорядом, то мне будет очень интересно послушать его мнение.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я выбираю клавиатуры с цифровым рядом, и это решение значительно ограничивает круг того что мне доступно.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я предпочитаю клавиатуры с цифровым рядом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;dva-stolbtsa-dlia-mizintsa-tri-dlia-ukazatel-nogo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dva-stolbtsa-dlia-mizintsa-tri-dlia-ukazatel-nogo&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Два столбца для мизинца, три для указательного&lt;&#x2F;h3&gt;
&lt;p&gt;Когда люди смотрят на правильную клавиатуру, они видят что она не стандартная, а значит не понимают как стандартная раскладка может поместиться в эту клавиатуру. Очень яркий пример — люди хотят получить третий столбец для мизинца, чтобы якобы вместились клавиши &lt;kbd&gt;ЭХЪ&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt;. То есть, например, моя клава с третим столбцом для мизинца выглядела бы следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;502&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;073f86d6371c7d3300.webp&quot; 
    onclick=&quot;full_screen(&#x27;third_pinky_col.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;third_pinky_col.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На самом деле все клавиши что в СК располагаются на третьем, четвёртом и пятом ряду мизинца, могут располагаться куда ближе. И особо третий столбец мизинцев не настолько и нужен, как может показаться. Просто нужно более адекватно спроектировать раскладку.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;СК использует очень далёкие клавиши для мизинцев, хотя можно обойтись всего двумя мизинчиковыми столбцами.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому я не вижу никакой потери от того что третьего столбца для мизинцев у меня нету. А вот третий столбец для указательных — вполне себе удобная штука, но и без него прожить можно.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b056f50b15ab8e0600.webp&quot; 
    onclick=&quot;full_screen(&#x27;third_index_col.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;third_index_col.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Мизинцу нужно максимум 2 столбца, а указательному можно и 3.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Хотя я слышал что есть люди, которые хотят 3 ряд мизинцев на правильной клавиатуре, чтобы быть совместимыми с СК. С этой точки зрения мои полномочия всё.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;khoroshii-tamb-klaster&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#khoroshii-tamb-klaster&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Хороший тамб-кластер&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7e8768a10578fd0300.webp&quot; 
    onclick=&quot;full_screen(&#x27;thumb_cluster.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;thumb_cluster.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Тамб&lt;&#x2F;strong&gt; — большой палец. Калька с английского thumb. Используется это слово, потому что оно короче «большой палец». 4 символа vs 13.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Тамб-кластер&lt;&#x2F;strong&gt; — это область клавиатуры, которая нажимается тамбом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я выбираю клавиатуру, которая имеет &lt;em&gt;как минимум&lt;&#x2F;em&gt; 3 клавиши на каждый тамб. На мунляндере у меня 6 клавиш на каждый тамб.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Отсутствие тамб-кластера.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;В мунляндере он хорош по нескольким причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Он может быть наклонён, и клавиши нажимаются более удобным движением для тамба.&lt;&#x2F;li&gt;
&lt;li&gt;За счёт такого наклона красная клавиша тоже нажимается удобно.&lt;&#x2F;li&gt;
&lt;li&gt;Относительно мало клавиш, и все они доступны с домашней позиции.&lt;&#x2F;li&gt;
&lt;li&gt;Все клавиши располагаются вплотную друг к другу, и имеют достаточно широкие кейкапы, за счёт чего можно сделать аккорды.&lt;&#x2F;li&gt;
&lt;li&gt;Выглядит стильно и узнаваемо, в том числе и благодаря красной треугольной клавише.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;vneshnie-tamby&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vneshnie-tamby&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Внешние тамбы&lt;&#x2F;h3&gt;
&lt;p&gt;Вспоминаем ту же Corne:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;602&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a24f8dc8ec7f5cb200.webp&quot; 
    onclick=&quot;full_screen(&#x27;corne.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;corne.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Или давайте посмотри на другую популярную клавиатуру &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kata0510&#x2F;Lily58&quot;&gt;Lily58&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dd55b40eb14fd70500.webp&quot; 
    onclick=&quot;full_screen(&#x27;lily58.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lily58.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я на мунляндере печатаю так, что для меня домашняя позиция большого пальца находится там же, где на этих клавиатурах находится самая крайняя клавиша тамба. И тут видно, что почему-то у этих, и большинства других клавиатур, с края больше нету клавиш. Зато видно, что внутрь есть достаточно клавиш. Это тенденция делать «внутренние» тамбы, но не делать «внешние». Я эту тенденцию не понимаю, ибо большой палец же так хорошо выгибается наружу. Так же я не понимаю зачем столько далёких внутренних клавиш, ибо лично мне неудобно загибать его внутрь.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я предпочитаю клавиатуру, которая больше использует внешние тамбы, чем внутренние.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Я около двух лет печатал с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом на большом пальце на месте &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;, который по расстоянию находится так же далеко, как и самые дальние тамбы у меня, и знаю о чём говорю. Внутрь загибать палец неудобнее, чем наружу.&lt;&#x2F;p&gt;
&lt;p&gt;И это снова ограничивает мой выбор в пользу клавиатур с хорошим, вытащенным наружу, тамб-кластером.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sravnenie-s-ergodox-ez&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sravnenie-s-ergodox-ez&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Сравнение с Ergodox EZ&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;746&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6b08b47565eacb4300.webp&quot; 
    onclick=&quot;full_screen(&#x27;ergodox1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;ergodox1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.8&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Сравнивать буду с последней моделью &lt;a href=&quot;https:&#x2F;&#x2F;ergodox-ez.com&quot;&gt;Ergodox EZ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;pros&quot;&gt;
&lt;span style=&quot;color: #090&quot;&gt;&lt;big&gt;&lt;b&gt;Плюсы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Тоньше в 2 раза.&lt;&#x2F;li&gt;
&lt;li&gt;Флэш-памяти 256КБ вместо 32КБ.&lt;&#x2F;li&gt;
&lt;li&gt;Процессор на архитектуре ARM вместо AVR.&lt;&#x2F;li&gt;
&lt;li&gt;Подсветка работает у всех клавиш.&lt;&#x2F;li&gt;
&lt;li&gt;Тамб-кластер получше. В эргодоксе он просто копипаста с Kinesis Advantage, и на нём есть клавиши, которые тамбом особо и не нажмёшь.&lt;&#x2F;li&gt;
&lt;li&gt;На каждой половинке всего одна нога для настройки высоты вместо трёх.&lt;&#x2F;li&gt;
&lt;li&gt;Есть чехол для переноски.&lt;&#x2F;li&gt;
&lt;li&gt;Wrist Rest&#x27;ы складываются под клавиатуру и занимают очень мало места.&lt;&#x2F;li&gt;
&lt;li&gt;USB-C.&lt;&#x2F;li&gt;
&lt;li&gt;Все кейкапы не из тамб-кластера имеют размеры 1×1. Благодаря этому удобно покупать другие кейкапы. В эргодоксе же зачем-то много кейкапов размера 1.5, и 4 кейкапа размера 2, из-за чего не так просто подобрать набор.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;cons&quot;&gt;
&lt;span style=&quot;color: #c00&quot;&gt;&lt;big&gt;&lt;b&gt;Минусы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Цена.&lt;&#x2F;li&gt;
&lt;li&gt;Невозможность выбрать: пустые кейкапы, заказ вообще без кейкапов, или без свитчей.&lt;&#x2F;li&gt;
&lt;li&gt;Ограниченный выбор свитчей при заказе, нету Cherry MX Silent Red RGB.&lt;&#x2F;li&gt;
&lt;li&gt;Если вместо треугольной клавиши поставить что-то другое, то будет не очень красиво выглядеть.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;udobstvo-transportirovki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#udobstvo-transportirovki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Удобство транспортировки&lt;&#x2F;h2&gt;
&lt;p&gt;Кидаю респект компании ZSA за то как они отнеслись к комплектации и вообще проектировке мунляндера. Если посмотреть на официальный сайт, то видно, что в комплекте идёт чехол, а подставки под руки сгибаются под клавиатуру.&lt;&#x2F;p&gt;
&lt;p&gt;Так же огромнейший плюс мунляндера — у него всего 2 ножки. В отличие от эргодокса, у которого 6 ножек. И если вы переносите эргодокс, то вам надо настраивать все 6 ножек, синхронизировать их с собой, чтобы клава не шаталась. Этим невозможно пользоваться. А на мунляндере ножку поставил и всё. Далее остаётся только поставить тамб-кластер в соотетствии с ножкой, и готово, клава идеально стоит.&lt;&#x2F;p&gt;
&lt;p&gt;И ещё одна приятная мелочь — на проводах установлена липкая лента, при помощи которой можно скручивать и фиксировать длину провода.&lt;&#x2F;p&gt;
&lt;p&gt;Посмотреть как настраивается мунляндер можно в этом видео:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;Gs-kb3McXfU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Хоть мунляндер и огромный, но благодаря тому как он сделан, он крайне удобен в транспортировке. И да, так как я хожу работать в офис, мне всегда приходится его таскать с собой, на работу и обратно домой. Меня это устраивает, и я не собираюсь покупать вторую клавиатуру.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;moi-fizicheskie-nastroiki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moi-fizicheskie-nastroiki&quot;&gt;#&lt;&#x2F;a&gt;Мои физические настройки&lt;&#x2F;h1&gt;
&lt;p&gt;Клавиатуру можно модифицировать не только программистически, но ещё и физически. И в этой секции расскажу как раз о своих физических настройках.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prozrachnye-pustye-keikapy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prozrachnye-pustye-keikapy&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Прозрачные пустые кейкапы&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;847&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d0460d32b5609ae500.webp&quot; 
    onclick=&quot;full_screen(&#x27;moonlander_transparent_1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;moonlander_transparent_1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c29962f4768e7a7200.webp&quot; 
    onclick=&quot;full_screen(&#x27;moonlander_transparent_2.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;moonlander_transparent_2.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.6&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;На правильной клавиатуре должны быть пустые кейкапы.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Мне кажется подписи на клаве — порочная идея, потому что человек привыкает смотреть на клавиатуру, а не доставать раскладку из памяти. С таким подходом никакого автоматизма не выработается! Тем более, зачем надписи, если нужно учиться десятипалу, и человек зашёл настолько далеко, что купил себе правильную клавиатуру? А если работа за компьютером — его основная работа, то тем более полезно удалить надписи.&lt;&#x2F;p&gt;
&lt;p&gt;А во-вторых, синхронизировать надписи на клаве с раскладкой тоже не очень приятно, и не всегда возможно. Так зачем вообще иметь эти надписи, если ты ими не будешь пользоваться, и они не будут отражать реальную картину? На твоей клавиатуре всё-равно никто не сможет печатать, так что можно отпустить. Тем более пустые клавиши выглядят солидно, сразу видно что ты не обычный смертный.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;На моей клавиатуре не должен печатать никто, кроме меня.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;В крайнем случае можно распечатать картинку своей раскладки и таскать с собой, если кто-то захочет печатать на твоей клавиатуре.&lt;&#x2F;p&gt;
&lt;p&gt;Либо можно покупать цветные кейкапы, чтобы ими обозначать зоны (особенно актуально для какой-нибудь огромной XD75RE). Либо можно печатать кейкапы, но с максимально абстрактными символами, чисто для красоты. Например, этот символ можно поместить на домашнюю позицию пальцев: &lt;a href=&quot;https:&#x2F;&#x2F;unicode-table.com&#x2F;en&#x2F;26F6&#x2F;&quot;&gt;⛶&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А кейкапы у меня именно прозрачные, чтобы подсветку лучше было видно. И действительно лучше видно! Купил самые дешёвые, на алишке, по 70р за 10 штук.  Есть какие-то дорогие из америки, но мне пока и так норм.&lt;&#x2F;p&gt;
&lt;p&gt;Некоторые люди зачем-то полностью пишут свою раскладку на кейкапы, чтобы подглядывать. Я их никогда не пойму. Я даже свою раскладку не печатаю на бумаге, после того как её спроектировал, она уже отложилась у меня в мозгу.&lt;&#x2F;p&gt;
&lt;p&gt;Ссылка на aliexpress: &lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.ru&#x2F;item&#x2F;Transparent-ABS-Keycaps-Mechanical-keyboard-Keycaps-Matte-Backlit-Keycaps-10Pcs&#x2F;4000628309870.html?spm=a2g0s.9042311.0.0.223733edKALEIs&amp;amp;_ga=2.237861000.963229042.1609590679-1301360025.1609590679&amp;amp;sku_id=10000004332979542&quot;&gt;прозрачные кейкапы&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;podsvetka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#podsvetka&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Подсветка&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;v-obshchem&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#v-obshchem&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;В общем&lt;&#x2F;h3&gt;
&lt;p&gt;Первое время я использовал радужную подсветку, и кичился этим на работе, но затем это стало немного отвлекать, и я перешёл на более нейтральный вариант — подсветка только тех клавиш, которые были раннее нажаты. Вкупе с прозрачными кейкапами это выглядит замечательно.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё такую подсветку ранее нажатых клавиш можно использовать при наборе паролей. Если ты почувствовал, что случайно нажал не ту клавишу — то можно быстро глянуть на клавиатуру, пока подсветка не остыла, и увидеть что именно ты нажал.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;podsvetka-sloia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#podsvetka-sloia&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Подсветка слоя&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;64a2f3bae78d210500.webp&quot; 
    onclick=&quot;full_screen(&#x27;keyboard_irl.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;keyboard_irl.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так же у меня на месте тамб-кластера всегда светится цвет текущего слоя. На картинке это можно видеть как синюю подсветку, синий означает что сейчас включён русский язык. Белый — английский. Остальные слои называются в честь своего цвета, и все цвета будут показаны далее. &lt;&#x2F;p&gt;
&lt;p&gt;Это дико удобно. Раньше, на эргодоксе, я использовал маленькие светодиоды сбоку вверху клавиатуры, чтобы обозначать текущий слой, но они имели всего 3 цвета, и боковым зрением не так хорошо видны:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9ac675d4c4b7e71100.webp&quot; 
    onclick=&quot;full_screen(&#x27;indicator.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;indicator.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Если не иметь подсветку текущего слоя, то иногда очень сложно понять что происходит не так, если какой-то слой случайно активировался.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;В любой правильной клавиатуре должны быть физические возможности, позволяющие сообщать о текущем слое, будь то подсветка, экран или маленькие светодиоды.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так же цветом текущего слоя подсвечиваются и все нажимаемые клавиши. То есть если сейчас русский, то все нажимаемые клавиши — тоже синие. По мне так, очень красиво. Посмотреть как это выглядит вживую можно здесь: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;layer_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;168706&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Так-то от подсветки каждого символа можно и отказаться, если будет альтернатива для индикации слоя. Три цветных лампочки не вариант, уже опробовано на эргодоксе. А вот один RGB светодиод — тема.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Можно вставить один RGB светодиод и оргстекло, и сделать всё так, чтобы этот один светодиод освещал всё дно клавиатуры. Тогда он будет виден даже боковым зрением.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;podsvetka-zon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#podsvetka-zon&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Подсветка зон&lt;&#x2F;h3&gt;
&lt;p&gt;Ещё я зашил себе в клавиатуру режим подсветки зон, чтобы IRL показывать людям свои зоны.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;4640f9dad698263800.webp&quot; 
    onclick=&quot;full_screen(&#x27;irl_zones.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;irl_zones.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;teplovaia-karta&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#teplovaia-karta&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Тепловая карта&lt;&#x2F;h3&gt;
&lt;p&gt;Так же есть прикольный режим подсветки, когда текущие нажатия подсвечиваются в режиме тепловой карты, можно использовать для записи видео для клавогонок: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;heatmap_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;161127&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h3 id=&quot;obiasnenie-na-osnove-podsvetki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obiasnenie-na-osnove-podsvetki&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Объяснение на основе подсветки&lt;&#x2F;h3&gt;
&lt;p&gt;Так же ещё есть видео, где при помощи подсветки я объясняю как у меня работают некоторые клавиши, связанные с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;ImsooykMguA&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;zvuki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zvuki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Звуки&lt;&#x2F;h2&gt;
&lt;p&gt;В данную клавиатуру встроен простенький пьезодинамик, так что можно играть разные прикольные звуки при нажатии определённых клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;В частности у меня стоят звуки на:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Переключение языка.&lt;&#x2F;li&gt;
&lt;li&gt;Нажатие клавиши выключения программы в консоли, и скриншота.&lt;&#x2F;li&gt;
&lt;li&gt;Включение слоя в режиме &lt;code&gt;TG&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Нажатие клавиши для смены метода переключения языка.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Почти все эти звуки можно увидеть здесь: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;sounds_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;169552&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;А ещё по дефолту есть звук при включении: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;startup_sound_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;161147&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;По поводу того что у меня играется звук при включении слоя в режиме &lt;code&gt;TG&lt;&#x2F;code&gt; — это очень важная фича, потому что часто он включается случайно, и при таких случайных включениях лучше услышать звук, чем случайно нажать на всякие клавиши и отправить на компьютер бог знает какие действия.&lt;&#x2F;p&gt;
&lt;p&gt;На что ещё можно поставить я не придумал, но в целом очень прикольно, когда какие-то твои действия происходит звук. Я уже привык что когда я нажимаю клавиши для выключения программы в консоли, то играется звук.&lt;&#x2F;p&gt;
&lt;p&gt;Так же, в клавиатуре есть музыкальный режим, когда каждая клавиша издаёт звук, но я не придумал как его можно применить, так что это поиграться на один раз: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;musical_regime_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;161165&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;h2 id=&quot;perekliuchateli-ikh-smazka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#perekliuchateli-ikh-smazka&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Переключатели, их смазка&lt;&#x2F;h2&gt;
&lt;p&gt;Изначально я купил клавиатуру с переключателями: Cherry MX Brown RGB. Они довольно шумные, и по ощущениям я не почувствовал никакой особой тактильности, особенно когда печатаю на скорости. Плюс мне тактильность и не нужна, ибо я предпочитаю плоские клавы.&lt;&#x2F;p&gt;
&lt;p&gt;Благо в этой клавиатуре есть Hot-Swap! &lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Среди клавиатур, &lt;strong&gt;Hot-Swap&lt;&#x2F;strong&gt; означает, что переключатели можно заменить без перепайки:&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5ff9bcac44b43fc600.webp&quot; 
    onclick=&quot;full_screen(&#x27;hotswap.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;hotswap.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому я сразу зашёл на алишку и заказал переключатели Cherry MX Silent Red RGB. Я взял 100 штук, сразу с запасом, и это обошлось мне в 5к рублей.&lt;&#x2F;p&gt;
&lt;p&gt;Тут стоит отметить, что я захотел использовать резиновые кольца, которые ставятся под кейкап, чтобы уменьшить ход, и сделать клавиатуру тише. Я использовал прозрачные кольца, которые можно поставить максимум одну штуку под кейкап. С двумя он уже нажиматься не будет. На браунах это было нормально, но на сайлентах у меня частенько стали не прожиматься клавиши. И теперь стало заметно, что всё-таки позиция активации у браунов и сайлентов разная.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, меня хейтили чуваки из мехкульта за это, типо я уничтожаю саму суть механики, её тактильность, со своими кольцами. Но мне в целом безразлична механика. И кольца всё-равно пришлось снять из-за сайлентов. И хочу заметить, что от того, что я теперь должен прожимать клавиши до конца, у меня уменьшилось число ошибок, и в целом ощущения стали как будто я печатаю более точно. Так же после смазки, клавиатура стала тихая, и с такой тишиной ощущается как будто ход и не такой большой, но об этом далее.&lt;&#x2F;p&gt;
&lt;p&gt;Так же дополнительно я заказал смазку и так называемый Film — штуку, которая ставится между половинками свитча, чтобы свитч был тише. Ещё купил инструмент для разборки свитча за 700р.&lt;&#x2F;p&gt;
&lt;p&gt;Когда мне пришли сайленты, я заметил что они чуть-чуть менее громкие, чем брауны. Особенно громко было слышно как скрипит пружина, это было невозможно слушать. Но затем, когда я смазал их, и потестировал как они звучат, это было невероятно! Я всю жизнь относится крайне сомнительно ко всем этим вещам типа смазки свитчей, тактильности итд, но смазанные свитчи по-настоящему звучат тише. Плюс этот Film даёт немнооого тишины, да.&lt;&#x2F;p&gt;
&lt;p&gt;Ниже видео где можно увидеть как звучат смазанные свитчи по сравнению с несмазанными. Это сайлент реды. Нижний ряд смазан, верхний нет. Правый стобец с фильмом, левый нет. Видно, что от смазки свитч стал тише, и пружина не скрипит. А от фильма тоже стал чуток тише, и пропал кликающий&#x2F;щёлкающий слабый звук. &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;switches_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;170818&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;А вот здесь я вставил парочку смазанных свитчей в клаву: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;two_lubricated_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;170824&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Печать текста на полностью смазанных сайлент редах: &lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;all_lubricated_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;171013&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Так что если вас интересует тишина при наборе на клавиатуре, то первое что вы должны сделать — это купить смазку и смазать. Готовьтесь что это будет долго.&lt;&#x2F;p&gt;
&lt;p&gt;Так же, если вы всё-равно будете покупать сайлент реды, то не советую покупать мунляндер с браунами, ведь они по сути бесполезны. Лучше купить клаву хотя бы с голубыми кликающими свитчами, чтобы можно было поиграться, и на некоторые редкие кнопочки поставить кликающие свитчи.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, я как-то давно покупал на алишке тестер свитчей, и от него осталась такая пластмассовая подставка, куда идеально вставлять разобранные свитчи, тоже советую купить что-то подобное. Поверьте мне, собирать эти свитчи в воздухе — не самое приятное занятие, плюс есть риск погнуть контакты.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;720&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f51b17c7f51e206800.webp&quot; 
    onclick=&quot;full_screen(&#x27;lubricate_station.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lubricate_station.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ссылки на всё что я покупал:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Тестер свитчей — 404, ищите новый :( Можно вообще купить Lube Station.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.ru&#x2F;item&#x2F;Original-Cherry-MX-Mechanical-Keyboard-Switch-Speed-silent-pink-axis-mute-shaft-RGB-SMD-switch&#x2F;4000936545168.html?spm=a2g0s.9042311.0.0.223733edKALEIs&amp;amp;_ga=2.237861000.963229042.1609590679-1301360025.1609590679&quot;&gt;Свитчи&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.ru&#x2F;item&#x2F;Advanced-Synthetic-Fluorine-Containing-Grease-Fusser-Film-Mechanical-Keyboard-Stabilizers-Switches-Gear-Grease-N15-19-Dropship&#x2F;4000370062485.html?spm=a2g0s.9042311.0.0.223733edKALEIs&amp;amp;_ga=2.237861000.963229042.1609590679-1301360025.1609590679&amp;amp;sku_id=10000001511765831&quot;&gt;Смазка&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.ru&#x2F;item&#x2F;Mechanical-Keyboard-Keycaps-Aluminum-Alloy-Metal-Switch-Opener-instantly-For-Cherry-mx-And-Kailh-Box-Gateron&#x2F;4001115947996.html?spm=a2g0s.9042311.0.0.223733edKALEIs&amp;amp;_ga=2.237861000.963229042.1609590679-1301360025.1609590679&quot;&gt;Открыватель свитчей&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aliexpress.ru&#x2F;item&#x2F;Switch-film-for-mechanical-keyboards-DIY-cherry-mx-switch-gateron-switches&#x2F;1005001365894792.html?spm=a2g0s.9042311.0.0.223733edKALEIs&amp;amp;_ga=2.237861000.963229042.1609590679-1301360025.1609590679&amp;amp;sku_id=12000015823827870&quot;&gt;Film&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;raskladka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#raskladka&quot;&gt;#&lt;&#x2F;a&gt;Раскладка&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;zony-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zony-1&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Зоны&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;587889bda6737cb400.webp&quot; 
    onclick=&quot;full_screen(&#x27;zones.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;zones.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я предпочитаю выделять зоны цветом, вместо чёрно-белой обводки, потому что считаю что так лучше видно.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Здесь цветами показаны зоны — какой палец какую клавишу должен нажимать согласно десятипалу. Тёмным цветом показаны клавиши домашней позиции, то есть где пальцы находятся по умолчанию.&lt;&#x2F;p&gt;
&lt;p&gt;Видно, что больше всего клавиш сначала у указательного, затем мизинца, затем большого пальца.&lt;&#x2F;p&gt;
&lt;p&gt;Оранжевым цветом показывается то, что нажимает тамб, и можно увидеть, что тамб нажимает не только клавиши из тамб-кластера, но ещё и две клавиши на не-тамб-кластерной части клавиатуры.&lt;&#x2F;p&gt;
&lt;p&gt;Белым цветом показываются те клавиши, которые не нажимаются из домашней позиции, и для их нажатия обязательно нужно сместить руку. Плюс эти клавиши могут нажиматься любым пальцем, будь то мизинцем, безымянцем или указательным.&lt;&#x2F;p&gt;
&lt;p&gt;Обилие клавиш с белым цветом в клавиатуре указывает на то, что клавиатура не очень удачная, ибо слишком часто надо смещать руку. Либо, если белых клавиш немного, то на них можно разместить нечастые слоефикаторы, в частности, например, слоефикатор «на случай ядерной войны».&lt;&#x2F;p&gt;
&lt;p&gt;Так как я печатаю десятипалом, то у меня каждый палец нажимает строго те зоны, что ему предназначены.&lt;&#x2F;p&gt;
&lt;p&gt;Я использую для зон отдельную картинку, чтобы в дальнейших картинках цветом выделять клавиши на основе их типа. Раньше я на каждом слое оставлял цвета зон.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;obshchie-printsipy-proektirovki-raskladki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obshchie-printsipy-proektirovki-raskladki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Общие принципы проектировки раскладки&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;levaia-ruka-i-mysh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#levaia-ruka-i-mysh&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Левая рука и мышь&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Те вещи, которые вероятнее всего пригодятся при использовании мыши, должны лежать на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так как у меня клавиатура разделена на две половинки, то у меня есть чёткое разделение что на левой руке, а что на правой.&lt;&#x2F;p&gt;
&lt;p&gt;Этот принцип для каждого будет максимально понятным. Надо стремиться, чтобы работать с мышью в руках было удобно.&lt;&#x2F;p&gt;
&lt;p&gt;Некоторые возводят этот принцип в абсолют и делают чтобы абсолютно всё можно было делать одной рукой, в частности набор текста и нажатие хоткеев. Например, Волька так делает в своих клавиатурах. Кладенец — явный тому пример.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Если переносить процесс решения математического выражения на компьютер, то можно использовать такой сетап: в правой руке графический планшет, а в левой Кладенец или другая однорукая клавиатура, где есть аккорды чтобы набирать наиболее частые символы, греческие буквы, копипаст и прочие хоткеи.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Далее каждая отдельная клавиша, которая должна будет лежать на левой руке будет рассмотрена отдельно.&lt;&#x2F;p&gt;
&lt;p&gt;Я держу мышь в правой руке, поэтому вся раскладка построена с учётом этого. Если вы держите мышь в левой руке, то можете инвертировать зеркально все инструкции.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dekompozitsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dekompozitsiia&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Декомпозиция&lt;&#x2F;h3&gt;
&lt;p&gt;Чтобы объяснить этот пункт, возьмём в качестве примера клавишу &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. У меня на клавиатуре она чаще всего используется в виде &lt;kbd&gt;Ctrl+Стрелочки&lt;&#x2F;kbd&gt;, и в виде хоткеев, которые расположены на основном слою и в других слоях. Так же эта клавиша используется сама по себе для выделения мышью.&lt;&#x2F;p&gt;
&lt;p&gt;Очевидно, что &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; — невероятно частая клавиша. Но украв у него так много его использований, и декомпозировав все его использования на стрелочки и хоткеи, которые лежат в слоях и прочих местах, я свёл оставшееся использование &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; к минимуму, сделав его самого по себе достаточно бесполезной клавишей. Именно поэтому он теперь у меня не лежит на месте &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;, а находится в чуть более труднодоступном месте.&lt;&#x2F;p&gt;
&lt;p&gt;Это воровство использований и вынесение их отдельно я и называю &lt;strong&gt;декомпозицией&lt;&#x2F;strong&gt;. Если бы я не совершил эту декомпозицию, то моя раскладка не сильно бы отличалась от СК, и мне бы пришлось размещать &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; и прочие модификаторы в максимально удобном месте, так как он очень частый.&lt;&#x2F;p&gt;
&lt;p&gt;За счёт такой декомпозиции я могу делать раскладку значительно более удобной для себя, экономя при этом самые лакомые места.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mysletoplivo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mysletoplivo&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Мыслетопливо&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Среди конкурирующих решений, позволяющих делать одно и то же, надо выбирать то, которое потребляет меньше мыслетоплива.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Есть такая концепция «мыслетоплива», и я частенько люблю её употреблять, когда размышляю о том какое дизайнерское решение в области раскладки будет лучше.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Если я говорю, что какая-то вещь &lt;strong&gt;потребляет меньше мыслетоплива&lt;&#x2F;strong&gt; по сравнению с чем-то, то это значит, что выработать автоматизм в этой вещи проще, и эта вещь в принципе потребляет меньше ресурсов мозга, когда ты применяешь её автоматически.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Другие определения мыслетоплива, особенно ненаучные, меня не касаются.&lt;&#x2F;p&gt;
&lt;p&gt;Например, давайте сравним хоткей &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; и безусловное переключение в окна. Особенность &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; такова, что он хранит в стэке &lt;strong&gt;последние использованные&lt;&#x2F;strong&gt; программы, поэтому когда ты хочешь переключиться в браузер, тебе надо помнить какие программы ты открывал до этого. И, конечно, помнить это невозможно, и у тебя постоянно совершаются ошибки что ты перешёл не в ту программу. Ещё одной проблемой является то, что при нажатии &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt;, нужно смотреть на экран, и смотреть какую ты программу выбираешь чтобы переключиться (ибо невозможно помнить что ты там посещал, чтобы нажать сразу &lt;kbd&gt;Alt+Tab Tab Tab&lt;&#x2F;kbd&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;В случае же с безусловным переходом в нужную программу, тебе не нужно помнить ничего, только нажать хоткей, например хоткей «перейди в браузер».&lt;&#x2F;p&gt;
&lt;p&gt;Если сравнивать &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; с безусловным переходом, то &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; потребляет очень много мыслетоплива, а ещё во время своего использования требует смотреть на экран, думать что тебе надо, вспоминать иконку, парсить иконку итд.&lt;&#x2F;p&gt;
&lt;p&gt;В случае же с безусловным переходом единственное на что тебе надо выработать автоматизм и потратить мыслетопливо — это на нажатие хоткея.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я отказался от &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; полностью в пользу безусловного перехода. Хоткеи для него будут показаны на фиолетовом слое.&lt;&#x2F;p&gt;
&lt;p&gt;И по этой же причине я считаю правила шифтов и пробелов неудачными.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;logika-dorozhe-triokh-protsentov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#logika-dorozhe-triokh-protsentov&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Логика дороже трёх процентов&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Если стоит выбор между двумя решениями, положительные характеристики одного из которых обоснованы логичной идеей, а другое обосновано подсчётом статистики, и увеличивает какие-то характеристики на 3%, то я предпочту выбрать то что обосновано логическим принципом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;То есть &lt;code&gt;логика &amp;gt; 3%&lt;&#x2F;code&gt;. Это ещё одна причина в копилку почему я отказываюсь от правила &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов и от правила пробелов. Весь их возможный прирост в скорости и безошибочности как раз колеблется в этих пределах. С другой стороны есть логический принцип, который говорит что на один палец можно поставить &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, и это будет удобнее, чем нажимать мизинцами, меньше обучения, меньше мыслетоплива.&lt;&#x2F;p&gt;
&lt;p&gt;С другой стороны кто-то говорит что ему нужно два пробела, потому что так у него меньше болят руки. Тоже хороший логический принцип.&lt;&#x2F;p&gt;
&lt;p&gt;Некоторые люди настолько гонятся за этими тремя процентами, что хотят посчитать статистику нажатия всех несимвольных клавиш типо стрелок и других управляющих, и размещать их согласно этой статистике.&lt;&#x2F;p&gt;
&lt;p&gt;Очевидно, что это даст какой-то прирост может быть скорости, но явно не удобства и простоты. Автоматический вариант расположения стрелок скорее всего расположит их в сложном порядке, а поэтому для меня не так привлекателен как вариант «сделай стрелки плоскими, чтобы под ними можно было разместить &lt;kbd&gt;Ctrl+&lt;&#x2F;kbd&gt; версию их».&lt;&#x2F;p&gt;
&lt;h3 id=&quot;u-kazhdogo-svoia-raskladka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#u-kazhdogo-svoia-raskladka&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;У каждого своя раскладка&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;В области правильных клавиатур не может быть понятия «стандартная раскладка», каждый должен делать свою раскладку сам.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Всё потому что невозможно одним верным способом поместить СК в маленькую клавиатуру с учётом удобства конкретного человека. Приходится идти на множество компромиссов и жертв.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё раскладка каждого человека очень сильно зависит от программ, которыми он пользуется, от его стиля печати.&lt;&#x2F;p&gt;
&lt;p&gt;Вот, например, я размещаю F-клавиши в слой, практически ими не пользуюсь, и даже не думаю что они когда-то будут с чем-то нажиматься в качестве хоткея. А тем временем в майнкрафте есть хоткей &lt;a href=&quot;https:&#x2F;&#x2F;minecraft.gamepedia.com&#x2F;Debug_screen#More_debug-keys&quot;&gt;&lt;kbd&gt;F3+G&lt;&#x2F;kbd&gt;&lt;&#x2F;a&gt;, который у меня будет нажать крайне сложно.&lt;&#x2F;p&gt;
&lt;p&gt;Если этот хоткей мне нужен довольно часто, я бы мог перепроектировать свою раскладку под удобство этого и подобных хоткеев, либо я могу создать слой, куда помещу его как макрос. Это пример как моя раскладка должна меняться при встрече с реальностью.&lt;&#x2F;p&gt;
&lt;p&gt;Либо есть клавиша &lt;kbd&gt;AltGr&lt;&#x2F;kbd&gt;: некоторым людям она невероятно нужна для набора типографских символов, но у меня такой клавиши даже нету. Получается человек, которому нужна эта клавиша, сам должен решать куда он её поместит. Или он может забыть про эту клавишу, и создать слой где каждая клавиша уже будет нажиматься с этим модификатором, и он удобно, под себя, разместит все символы, особенно если он пользуется небольшим числом таких символов.&lt;&#x2F;p&gt;
&lt;p&gt;Вот если бы изначально все печатали на правильных и компактных клавиатурах, то майнкрафт бы не создавал такие хоткеи, которые неудобно нажать на правильной клавиатуре, и не пришлось бы идти на столько компромиссов, и не было бы такой потребности в личной корректировке.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Так же поэтому я при создании своей раскладки даже не думаю о других людях, и делаю только так как будет удобно в первую очередь мне. Потому что вряд ли я смогу понять хотелки всех людей, и создать что-то удовлетворяющее всех.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;overinzhiniring&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#overinzhiniring&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Оверинжиниринг&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;При проектировании раскладки надо добавлять только то, чем пользуешься сейчас, либо чем с уверенностью в 100% будешь пользоваться потом. Так же нужно регулярно проводить чистку раскладки от неиспользуемых клавиш и слоёв.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;При проектировании раскладки есть соблазн создать сразу идеальную раскладку, всё продумать, и заставить себя пользоваться какими-то функциями.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому нельзя создать раскладку сразу хорошей. Создание своей раскладки — это вечный, итеративный процесс.&lt;&#x2F;p&gt;
&lt;p&gt;Если следовать этому принципу, то раскладка не будет обрастать бесполезными функциями, и со временем будет понятнее как должен выглядеть идеал.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё раскладка может значительно меняться, когда в жизнь приходит новый софт, который переворачивает с ног на голову предположения, с которыми строилась раскладка.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому все идеи раскладки в данной статье не преподносятся как истина в последней инстанции, а предлагаются как один из вариантов, который можно украсть и переработать под себя.&lt;&#x2F;p&gt;
&lt;p&gt;Так же по этой причине, я не двигаюсь семимильными шагами в раскладке, а стараюсь делать потихоньку, чтобы замечать что принесло удобство, а что нет.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;neliubov-k-modifikatoram&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#neliubov-k-modifikatoram&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Нелюбовь к модификаторам&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Вместо того чтобы помещать модификаторы &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Win&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; в удобные места, я стараюсь помещать в удобные места слоефикаторы, которые будут включать слои, где уже будут находиться нажатые хоткеи с этими модификаторами.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Плюс такой философии в том, что не нужно запоминать какой модификатор и как нажимается, нужно запомнить для каждой клавиши лишь её действие, и пользоваться как чем-то высокоуровневым.&lt;&#x2F;p&gt;
&lt;p&gt;Знаете, на правильных клавиатурах, люди обычно размещают модификаторы на больших пальцах, и даже могут дублировать их на оба больших пальца, чтобы им удобно было зажимать хоткеи в своих любимых IDE.&lt;&#x2F;p&gt;
&lt;p&gt;Мне эта идея не нравится по двум причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Я не хочу нажимать одновременно много клавиш двумя большими пальцами.&lt;&#x2F;li&gt;
&lt;li&gt;Я не хочу тратить лакомое место на больших пальцах или помещать модификаторы на мизинцы ради небольшого числа хоткеев.&lt;&#x2F;li&gt;
&lt;li&gt;Я не хочу помнить хоткеи.&lt;&#x2F;li&gt;
&lt;li&gt;Я не хочу попадать в проблемы синхронизации.&lt;&#x2F;li&gt;
&lt;li&gt;Я не хочу нажимать частые хоткеи в неудобных для меня местах, и не хочу чтобы моя буквенная раскладка зависела от удобства нажатия хоткеев.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Поэтому я пришёл к другой философии, когда я стараюсь сделать свою работу на клавиатуре такой, чтобы хоткеи из модификаторов использовались примерно никогда. Этого можно достичь, если самые частые хоткеи поместить на макросы, и создать слои специально для них. То есть декомпозировав их использования.&lt;&#x2F;p&gt;
&lt;p&gt;При этом, так как я больше не завишу от положения модификаторов, я могу не ставить их в самые лакомые позиции, теперь у меня в самых лакомых позициях должны быть только слоефикаторы. &lt;&#x2F;p&gt;
&lt;p&gt;Так же я могу переместить хоткеи куда я хочу, сделать своё удобство, без модификации программ.&lt;&#x2F;p&gt;
&lt;p&gt;И ещё от меня не требуется нажимать сразу много модификаторов, чтобы выполнить какое-то сложное действие, максимум может быть одна зажатая клавиша — слоефикатор.&lt;&#x2F;p&gt;
&lt;p&gt;Следующий шаг — расположить все полезные хоткеи на нужные слои. Об этом будет далее рассказно при рассмотрении следующих слоёв. У меня всё прекрасно получилось, у меня не так много хоткеев, и я чувствую себя замечательно. &lt;&#x2F;p&gt;
&lt;p&gt;Так же у меня всё же есть модификаторы на больших пальцах, и я их даже засунул наиболее частые их комбинации в аккорды, но я их никогда не использовал, хотя пусть будут на всякий случай, ибо идей что туда полезнее можно поставить, у меня пока нет.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Этого принципа невозможно придерживаться сразу. Постоянно будут возникать какие-то новые хоткеи, которые надо вносить в раскладку. Чтобы автоматизировать этот процесс, можно написать программу, которая будет отслеживать все нажатия модификаторов, и записывать наиболее хоткеи в файл. Можно взять за основу то, на чём построена моя программа &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;heatmap&quot;&gt;heatmap&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;doloi-pravye-modifikatory&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#doloi-pravye-modifikatory&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Долой правые модификаторы&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Долой правые модификаторы!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Вообще, мне за свою жизнь никогда не пригождались правые модификаторы. Обычно все хоткеи работали и на левых модификаторах, и ещё во времена СК я их выбросил.&lt;&#x2F;p&gt;
&lt;p&gt;Собственно, сейчас жизнь не поменялась, и правые модификаторы всё ещё не нужны. Поэтому они у меня в раскладке отсутствуют в принципе, и все модификаторы только левые. Плюс, это сильно экономит место.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще, мне кажется, что правые модификаторы возникли только ради симметрии с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом, которого было два, и который не додумались вставить на большой палец ещё на печатных машинках. Так что и с исторической точки зрения они не имеют особого смысла.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Правые модификаторы.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;pro-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pro-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Про слои&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;oboznacheniia-sloia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oboznacheniia-sloia&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Обозначения слоя&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;254&quot;
    height=&quot;160&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;731738dc42a2c9f700.webp&quot; 
    onclick=&quot;full_screen(&#x27;layer_types.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;layer_types.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;У меня на картинках каждый слой имеет свой цвет, поэтому я для обозначения слоёв использую именно цвета. При этом:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Слоефикаторы с цветным кругом работают через &lt;code&gt;MO&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;А слоефикаторы с цветным квадратом работают через &lt;code&gt;TG&lt;&#x2F;code&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;Если три раза нажать слоефикатор с кругом, то слой активируется в режиме &lt;code&gt;TG&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Слой должен активироваться в режиме &lt;code&gt;TG&lt;&#x2F;code&gt; при тройном нажатии обычного слоефикатора &lt;code&gt;MO&lt;&#x2F;code&gt;. Это нужно для экономии места и мыслетоплива, чтобы не размещать отдельную клавишу для перманентного включения слоя где-то в другом месте.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;vykliuchenie-sloia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vykliuchenie-sloia&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Выключение слоя&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;85fba245897a05a800.webp&quot; 
    onclick=&quot;full_screen(&#x27;layerficator_esc.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;layerficator_esc.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Выключение слоя должно быть на месте клавиши &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Если посмотреть на все мои слои, начиная с красного, то можно заметить у самой левой верхней клавиши находится закрашенный квадратик.&lt;&#x2F;p&gt;
&lt;p&gt;При помощи этой кнопки у меня выключается слой, если сейчас он был включён в формате &lt;code&gt;TG&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Очень часто бывает такая ситуация, что слой включается через &lt;code&gt;TG&lt;&#x2F;code&gt; случайно, и когда ты продолжаешь долбить по клавиатуре на автомате, то нажимаются клавиши из этого слоя, и происходит что-то странное.&lt;&#x2F;p&gt;
&lt;p&gt;В таком случае хочется как можно быстрее это отменить, не думать что за слой был включён, и просто идти дальше — поэтому я расположил кнопку выключения слоя на положение кнопки Esc, потому что данная кнопка часто нажимается в случае «аааааа просто отменись». &lt;&#x2F;p&gt;
&lt;p&gt;Вспомните случаи, когда случайно включается кнопка &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;. В таком случае не хочется думать что именно нажалось и начало всё портить, а хочется нажать на универсальную кнопку отмены всего.&lt;&#x2F;p&gt;
&lt;p&gt;У меня по такому принципу сделаны все слои, кроме Game и языковых слоёв, потому что там нужен обычный Esc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kazhdomu-sloiu-svoia-kartinka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kazhdomu-sloiu-svoia-kartinka&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Каждому слою — своя картинка&lt;&#x2F;h3&gt;
&lt;p&gt;Если вы взглянете на СК, где нанесены надписи на русском языке, то не зная клавиатуры, довольно сложно понять что на каком языке, и что при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е нажимается.&lt;&#x2F;p&gt;
&lt;p&gt;Примерно такому же стилю следуют люди, которые рисуют свою раскладку для программируемой клавиатуры, где помимо двух языков может быть ещё два дополнительных слоя. Из-за этого им приходится сувать надписи в экзотические места, а иногда разукрашивать надписи разным цветом для разных клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;Пример, раскладка &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;%D0%BA%D0%BB%D0%B0%D0%B2%D0%B8%D0%B0%D1%82%D1%83%D1%80%D1%8B&#x2F;%D0%BA%D0%BE%D1%80%D1%8F%D0%B3%D0%B0&quot;&gt;Коряги&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;434&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;86f15c21e8d857c900.webp&quot; 
    onclick=&quot;full_screen(&#x27;snag.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;snag.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.5&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Конечно, такие картинки раскладки крайне компактны, и напечатать их легко. Но мне такие картинки не нравятся совсем, потому что:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Нужно научиться читать что означает позиция символа с точки зрения автора картинки (а чего-то единого тут нету, все делают как хотят). &lt;&#x2F;li&gt;
&lt;li&gt;Если хочется посмотреть как выглядит конкретный слой, то вокруг будет очень много шума, и придётся прикладывать много усилий, чтобы прочитать и осознать этот слой.&lt;&#x2F;li&gt;
&lt;li&gt;Никто не будет тратить время на чтение твоей раскладку, если её так сложно читать.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Особенно этот подход становится неприменим, когда у тебя надо подписать комментарий к символу, или у тебя очень много слоёв. Именно поэтому я придерживаюсь философии: &lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Каждому слою — своя картинка.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;При этом, по идее, клавиши с зажатым &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом и являются по сути отдельным слоем, но они отличаются только символом длиной 1, так что &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;овый слой можно размещать вместе со всеми остальными. Он не будет так сильно шумить. У меня на картинках то что нажимается при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е показано серым цветом в правом нижнем углу клавиши. Вы можете заметить, что некоторые хоткеи при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е нажимаются в другие хоткеи — а это уже моя хитрость, я отслеживаю &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; и на этих клавишах отменяю его, чтобы хоткей нажался корректно.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь, хоть у меня раскладка и будет длиною в километр, зато на ней всё будет понятно, и её можно будет оценить по отдельным составляющим.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sloefikatory-na-bol-shom-pal-tse&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sloefikatory-na-bol-shom-pal-tse&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Слоефикаторы на большом пальце&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;fb9080459343bd3c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_layerficators.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_layerficators.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Все частоиспользуемые слоефикаторы у меня находятся на большом пальце. Сделано это именно для того, чтобы минимизировать блокирования клавиш, которые я не могу нажать.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Основные слоефикаторы должны быть на большом пальце.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Не частоиспользуемые слоефикаторы у меня находятся в области, которая не нажимается из домашней позиции.&lt;&#x2F;p&gt;
&lt;p&gt;Для начала нужно сказать про красный слоефикатор — вообще самый важный слоефикатор на клавиатуре, ибо там находятся стрелки. Он находится на большом пальце правой руки. Сделано это так, чтобы можно было одновременно зажимать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; и стрелки, которые у меня тоже находятся на левой руке.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Надо думать о сочетаемости &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; и слоефикатора стрелок. Они либо должны быть на разных больших пальцах, либо на аккорде на одном большом пальце, либо на большом пальце и мизинце.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Ещё красный слоефикатор можно нажать как неудобный аккорд на большом пальце левой руки. Это нужно, чтобы одной левой рукой во всяких редакторах можно было нажимать стрелки, или во время просмотра фильма или видео промотать на десять секунд вперёд.&lt;&#x2F;p&gt;
&lt;p&gt;Потом идёт фиолетовый слоефикатор — для включения слоя управления окнами.&lt;&#x2F;p&gt;
&lt;p&gt;И ещё зелёный модификатор для управления браузером и с медиа-клавишами.&lt;&#x2F;p&gt;
&lt;p&gt;Обо всех этих слоях будет сказано подробно далее.&lt;&#x2F;p&gt;
&lt;p&gt;Раньше у меня красный и зелёный слоефикаторы находились на левом мизинце, в дальнем столбце, по историческим причинам, потому что на СК я сделал раскладку, где клавиша &lt;kbd&gt;Mod&lt;&#x2F;kbd&gt; была не левом мизинце.&lt;&#x2F;p&gt;
&lt;p&gt;В целом, нету ничего страшного в расположении слоефикаторов на дальний столбец у мизинцев, нужно только учесть, что в этом слою нельзя помещать клавиши на мизинец, который нажимает данный слоефикатор, и желательно ничего не помещать на безымянец, ведь он чуть-чуть смещается из-за мизинца. А вот на указательный и средний той же руки уже можно помещать что хочешь.&lt;&#x2F;p&gt;
&lt;p&gt;Так же красный слоефикатор на левом мизинце хорошо сочетается с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом на левом тамбе, и стрелками на правой руке.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;perekliuchenie-iazyka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#perekliuchenie-iazyka&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Переключение языка&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d5101e656408039f00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_lang.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_lang.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Одна из самых первых вещей, которую любой должен сделать при покупке правильной клавиатуры — это поставить хоткей переключения языка на одну кнопку.&lt;&#x2F;p&gt;
&lt;p&gt;Во время использования СК и динамического набора я переключал язык по &lt;kbd&gt;Ctrl+Shift&lt;&#x2F;kbd&gt;, так как сидел на винде. И было очень неприятно, когда у тебя это сочетание не прожимается и ns gbitim rfre.-nj ytgjyzny. abuy.&#x2F; Jcj,tyyj ,jkmyj &#x27;nj joeoftncz? rjulf ns yt cvjnhbim yf &#x27;rhfy? f cvjnhbim njkmrj yf rkfdbfnehe? b nfrjq yfgbcfk njyye ntrcnf? f gjnjv cvjnhbim? b e nt,z dtcm ntrcn d такой белиберде. Благо существуют сервисы наподобие &lt;a href=&quot;https:&#x2F;&#x2F;swoper.ru&#x2F;resultB.php&quot;&gt;swopper&lt;&#x2F;a&gt;. Надеюсь что вы знали об этом, и не переписывали эту тонну текста?...&lt;&#x2F;p&gt;
&lt;p&gt;В общем, когда ты хочешь переключить язык, а он не срабатывает — это очень неприятно. А так как такое происходит очень часто, то&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Переключение языка должно быть на одной кнопке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Для всяких бесполезных &lt;kbd&gt;Pause Break&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Scroll Lock&lt;&#x2F;kbd&gt; отдельные клавиши есть, а для переключения языка нету.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Но встаёт вопрос а каким именно хоткеем переключать, когда ты пользуешься другой ОС, или другим компом? Ну тут можно просто запрограммировать все возможные хоткеи переключения языка, и засунуть их выбор в клавиатуру на нажатие определённых клавиш. Например:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;При нажатии некоторой клавиши 1, кнопка для переключения языка будет посылать &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Для некоторой клавиши 2 будет &lt;kbd&gt;Alt+Shift&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;И так далее аналогично для &lt;kbd&gt;Ctrl+Shift&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Win+Space&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;У меня такие кнопки находятся в слою «на случай ядерной войны».&lt;&#x2F;p&gt;
&lt;p&gt;Ещё я обозначаю кнопку для переключения языка зелёным цветом. Она показывает что перманентно включается либо русский, либо английский язык. Она зелёная потому что переключение языка — это тоже своего рода смена слоя. Плюс, формально, у меня в раскладке при переключении языка слои тоже меняются.&lt;&#x2F;p&gt;
&lt;p&gt;Получается, у меня кнопка для переключения слоя делает два действия: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Переключает слой.&lt;&#x2F;li&gt;
&lt;li&gt;Отправлят хоткей для переключения языка.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Другой вариант того, что можно сделать с языками — это сделать две отдельные клавиши &lt;kbd&gt;ENG&lt;&#x2F;kbd&gt; и &lt;kbd&gt;РУС&lt;&#x2F;kbd&gt;, которые безусловно переключают текущий язык на английский и русский соотетственно. Если сейчас стоит русский язык, то клавиша &lt;kbd&gt;РУС&lt;&#x2F;kbd&gt; ничего не сделает. И при таких клавишах можно даже не помнить какой сейчас язык в системе, ты просто каждый раз перед тем как печатать текст, нажимаешь клавишу языка, на котором будешь печатать, и не тратишь мыслетопливо на хранение языка в голове.&lt;&#x2F;p&gt;
&lt;p&gt;Но лично я считаю что для хранения одного из двух языков мыслетоплива тратится не очень много, так что можно и без безусловного включения языка.&lt;&#x2F;p&gt;
&lt;p&gt;Идея взята с клавиатуры Вольки — &lt;a href=&quot;http:&#x2F;&#x2F;catboard.klava.org&#x2F;ru.html&quot;&gt;Кошки&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;rassinkhron&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rassinkhron&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Рассинхрон&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;ac837324f6b4d74e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_lang_sync.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_lang_sync.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так же рядом с кнопкой переключения слоя есть хоткей &lt;kbd&gt;Lang Sync&lt;&#x2F;kbd&gt;. Он посылает сочетания для переключения языка в компьютер, но не переключает слои в клавиатуре. &lt;&#x2F;p&gt;
&lt;p&gt;Данная клавиша нужна для устранения явления рассинхрона.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Рассинхрон&lt;&#x2F;strong&gt; — явление, когда язык внутри клавиатуры не соответствует языку в компьютере. Происходит это только на клавиатурах, которые своей прошивкой пытаются имитировать альтернативные буквенные и препинаковые раскладки различно для нескольких языков.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Клавиша для отправки хоткея переключения языка нажимается аккордом с клавишей полноценного переключения языка.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue2-bg blue2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue2-bg blue2-border&quot;&gt;🖥 Техническая сторона&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;К сожалению по умолчанию клавиатура не поддерживает отправку юникодных символов прямо на компьютер. Это можно делать только с установкой дополнительного софта. Клавиатура может посылать только положения текущей клавиши, которое потом операционная система транслирует в конкретный символ в зависимости от текущего языка. Поэтому клавиатура должна знать какой сейчас язык на компьютере, чтобы она могла подделать текущий символ с учётом текущей раскладки.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё одно сожаление — это текущий язык нельзя узнать внутри клавиатуры. Тоже снова придётся устанавливать какой-то софт, чтобы через костыли (а именно индикатор &lt;kbd&gt;Scroll Lock&lt;&#x2F;kbd&gt;) можно было его узнавать.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому единственным способом сообщить клавиатуре какой сейчас язык — это сказать ей лично, нажав нужные клавиши.&lt;&#x2F;p&gt;
&lt;p&gt;Более подробно об этом всём можно почитать в &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;lang_shift&quot;&gt;lang_shift&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Конечно, в большинстве случаев, клавиатура может автоматически менять язык у себя внутри, при нажатии &lt;kbd&gt;Lang&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Но иногда бывают такие случаи что язык рассинхронизируется между клавиатурой и между компьютером по разным причинам: случайное нажатие хоткея переключения языка, баги и неизвестные науке причины. Поэтому существует такая клавиша &lt;kbd&gt;Lang Sync&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;osnovnoi-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#osnovnoi-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Основной слой&lt;&#x2F;h2&gt;
&lt;p&gt;Итак, самый сложный и самый основной слой:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8e1ec181f20b0e1300.webp&quot; 
    onclick=&quot;full_screen(&#x27;base.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Немного про цвета сейчас и в будущем:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Красный&lt;&#x2F;strong&gt; — те клавиши на обычной клавиатуре что не являются ни буквами, ни препинаками. Иными словами функциональные&#x2F;управляющие клавиши.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Жёлтый&lt;&#x2F;strong&gt; — препинаки. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Синий&lt;&#x2F;strong&gt; — макросы, которые нажимают какой-то хоткей.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Зелёный&lt;&#x2F;strong&gt; — слоефикаторы.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Ярко-зелёный&lt;&#x2F;strong&gt; — модификаторы.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Фиолетовый&lt;&#x2F;strong&gt; — клавиши, которые оказывают эффект только на клавиатуру. Например: подсветка.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Белый&lt;&#x2F;strong&gt; — английские буквы.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Светло-голубой&lt;&#x2F;strong&gt; — русские буквы.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Серый&lt;&#x2F;strong&gt; — управление мышью.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;akkordy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#akkordy&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Аккорды&lt;&#x2F;h3&gt;
&lt;p&gt;Здесь есть какие-то мелкие и перекрывающие друг друга клавиши, поэтому, пожалуй начну с них. И это — аккорды.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Аккорд&lt;&#x2F;strong&gt; — это почти одновременное нажатие нескольких клавиш, при этом порядок нажатия неважен. Более подробно на вики: &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;%D0%B0%D0%BA%D0%BA%D0%BE%D1%80%D0%B4%D1%8B&quot;&gt;Аккорд&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Самые простые аккорды — это те что находятся на зоне указательного пальца,  и с цветными точками. Та клавиша, что находится между двух клавиш является аккордом, и активируется при одновременном нажатии двух этих клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;Куда более сложные аккорды находятся на тамб-кластере, и тут нужно отдельное объяснение в виде картинки:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;583&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;afc07f285c1396b200.webp&quot; 
    onclick=&quot;full_screen(&#x27;chords.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;chords.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;2c45a0b833ca272d7b94fdc66a668af7&quot;&gt;Эта раскладка на KLE&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Клавиши обозначаются числами 1, 2, 3, 4, а аккорды обозначаются как сумма этих чисел. В целом, если посмотреть на картинку, логику расстановки аккордов можно понять — они находятся между всеми нажимаемыми клавишами.&lt;&#x2F;p&gt;
&lt;p&gt;К аккордам я пришёл после Кладенца.&lt;&#x2F;p&gt;
&lt;p&gt;В Кладенце активно использовались аккорды, когда две клавиши нажимаются одним пальцем. Мы называем это &lt;strong&gt;двукнопием&lt;&#x2F;strong&gt;. После Кладенца я понял, что двукнопие — не такая страшная вещь, как может показаться с первого взгляда.&lt;&#x2F;p&gt;
&lt;p&gt;Так же возможно ставить аккорды на различные пальцы, например: аккорд из двух клавиш, которые нажимаются указательным и средним пальцем. По сути, эти аккорды особо никуда не поставишь, кроме как на буквы. А на буквы их лучше не ставить, потому что может быть вероятность, что в каком-то слове появится биграмма, на которую я повесил аккорд, и так как я очень быстро печатаю, я не могу контроллировать когда я нажимаю клавиши практически одновременно, поэтому у меня может быть много ложных срабатываний аккордов. Одним из решением этой проблемы — печатать изначально медленно, либо замедляться на аккордах. А так как замедляться — не вариант для меня, я предпочёл не делать аккорды на буквах, и на нескольких пальцах.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Правда, сейчас, во время написания этой статьи, я осознал, что можно поставить аккорды на препинаки, вверху, ибо никогда не бывает сочетания препинаков, например &lt;code&gt;#?&lt;&#x2F;code&gt;, поэтому на их аккорд можно повесить что-то отличное. Спасибо статья-уточка.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;До того как я писал эту статью, я решил, что у меня все аккорды будут нажиматься одним пальцем, чтобы не было коллизий при печати букв.&lt;&#x2F;p&gt;
&lt;p&gt;А аккорды, которые нажимаются одним пальцем, требуют другого от печатающего: чётко прицелиться на середину между двумя клавишами, чтобы когда один палец нажимал, он смог прожать практически одновременно две клавиши. Поэтому аккорды на дву- и трёх-кнопия — это геометрическая проблема, а не синхронизационная. А на скорости как раз намного проще научиться целиться правильно, чем синхронизировать пальцы.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Аккорды должны быть только на нажатие нескльких клавиш одним пальцем, чтобы избежать синхронизационных проблем.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;По этой же причине я не использую такую фичу QMK, под названием &lt;a href=&quot;https:&#x2F;&#x2F;docs.qmk.fm&#x2F;#&#x2F;mod_tap&quot;&gt;Mod-Tap&lt;&#x2F;a&gt;, потому что она как раз требует замедления и синхронизации пальцев.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, так как QMK слаб в плане аккордов, мне пришлось написать собственную библиотеку для их реализации. Об этом подробнее смотрите в папке &lt;a href=&quot;https:&#x2F;&#x2F;testzorax.github.io&#x2F;p&#x2F;my-keyboard-layout&#x2F;combo&quot;&gt;combo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Я использовал аккорды на тамб-кластере, чтобы уместить как можно больше полезных вещей поближе, и на основной слой, чтобы не было необходимости переключаться на какой-то слой, и синхронизировать два пальца друг с другом. А ещё потому что места на мизинцах заняты русскими буквами и препинаками.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я немного использую аккорды на указательном пальце, потому что у него есть много клавиш, которые не являются буквами, и аккорды на нём не должны сильно замедлять печать.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще в целом, аккорды эти нажимать довольно удобно, ибо на мунляндере клавиши по умолчанию широкие на тамб-кластере.&lt;&#x2F;p&gt;
&lt;p&gt;А те, что на указательном — там я поставил кейкапы друг к другу спиной, поэтому при нажатии между клавишами у меня легко нажимаются две клавиши одновременно.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Так же я пытался купить себе пружинки с грамовкой поменьше, чем мои текущие свитчи, чтобы аккорды было проще нажимать, но к сожалению они до меня не дошли... И я устал ходить на почту раз в неделю и спрашивать есть ли что-то на моё имя. Советую вам никогда не покупать товары из-за границы без трек-номера. А если не знаете будет трек-номер или нет, напишите заранее на почту. Если не отвечают, значит лучше предположить что трек-номера не будет.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Конечно, для аккордов есть огромное поле для исследований по созданию специальных кейкапов, которые позволят нажимать две клавиши одновременно куда надёжнее.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Либо есть другой вариант — чтобы свитчи стали выпускать намного более мелкими, например 30% от их текущего размера — тогда можно будет разместить очень много маленьких клавиш, которые имеют площадь той части подушечки пальца, которым мы касаемся клавиатуры. И благодаря этому можно вместо аккордов тупо разместить много клавиш между текущими клавишами. Кстати, это тоже невероятное поле для исследований. На той площади, на которой сейчас размещаются эти огроменные клавиши, можно разместить очень много маленьких клавиш, с биграммами или автозаменами. Интересно будет посмотреть насколько увеличится скорость человека, печатающего на таких клавишах. &lt;&#x2F;p&gt;
&lt;p&gt;Вот вам пример того куда расти правильным клавиатурам, и куда &lt;strong&gt;никто&lt;&#x2F;strong&gt; не копает. Как минимум, потому что нету технической возможности.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Либо есть вариант сделать клавиши как с размерами 1x0.8 или 0.8x0.8 от текущих, потому что наши пальцы нажимают на клавишу не кругом, а эллипсом, и этот эллипс имеет примерно такие пропорции. С такими клавишами, цифроряд будет очень близко, и отпадёт необходимоть его убирать в клавиатурах типо Corne, Planck. Ведь при создании таких клавиатур как Corne, руководствуются логикой типо цифроряд далеко, и лучше все его клавиши засунуть в слой.&lt;&#x2F;p&gt;
&lt;p&gt;Я когда-то делал даже концепт такой идеальной клавиатуры для себя:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1064&quot;
    height=&quot;340&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;18d5e5c660f6e3f800.webp&quot; 
    onclick=&quot;full_screen(&#x27;zergox_ideal.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;zergox_ideal.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Видно, что тут высота клавиш составляет 80% от оригинальной, и все клавиши для мизинца — маленькие, потому что мизинец сам по себе маленький.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс тогда я ещё использовал старые цвета, и в них бирюзовый цвет обозначает клавиши, которые не нажимаются из домашней позиции.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;shift-klaster&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shift-klaster&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Shift-кластер&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;shift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shift&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Shift&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;607339cb75f4828000.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_shift.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_shift.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это очень важный пункт. И это ещё одна &lt;strong&gt;жирнющая&lt;&#x2F;strong&gt; причина почему СК неадекватна для десятипала.&lt;&#x2F;p&gt;
&lt;p&gt;Для начала почему именно на левой руке. Потому что очень часто вы будете пользоваться мышью, и вам нужно будет что-то выделять, и клавиша &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; для этого используется очень часто. По аналогичной причине где-то на левой руке у вас должен быть голый &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. Наличие контрола на левой руке даже важнее, чем &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь почему &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; должен быть именно на большом пальце. Изначально, на СК, все привыкли, что &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; находится на мизинце — нажимаешь его там и всё. И к сожалению очень много людей, кто покупает себе правильную клавиатуру, оставляют &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на мизинцах, размещая на большие пальцы всякую бесполезную чушь.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;403&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c826e6f29e2d933c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;meme_shift.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;meme_shift.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Главный минус &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а на мизинцах — когда нажимается &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; одним мизинцем, то блокируются все клавиши, что нажимаются этим мизинцем, и их нельзя нажимать согласно десятипалу. И тут есть три варианта:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Всегда нажимать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; левым мизинцем, нажимая безымянным заблокированные клавиши.
&lt;ul&gt;
&lt;li&gt;Это плохо тем, что надо отучиваться от своей простой жизни, в которой безымянный палец нажимает всего 4 клавиши, и обучать в определённых ситуациях нажимать ещё плюс несколько клавиш. При этом вся рука смещается, и попадать в новые места становится сложнее.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Использовать правый &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; только когда надо написать большие буквы, находящиеся в области левого мизинца.
&lt;ul&gt;
&lt;li&gt;Это плохо тем, что правый &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; используется очень редко, и будет бесить обучаться нажимать правый &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; только для некоторых случаев. А плюс из-за их редкости могут частенько случаться ошибки.  В общем одна нервотрёпка.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Научиться полностью соблюдать &lt;strong&gt;правило &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов&lt;&#x2F;strong&gt; — нажимать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; только той рукой, которая противоположна руке большой буквы, которая сейчас будет нажиматься.
&lt;ul&gt;
&lt;li&gt;Ну этот пункт просто живодёрский. Если он и даёт скорость или безошибочность, то её прирост колеблется в области 3%. А вот мыслетоплива и нервов он потребляет значительно больше.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;А теперь если мы поставим &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на большой палец, то у нас никакие буквы не блокируются, и у нас ещё появляется такая фича, что мы можем НАБИРАТЬ КАПСОМ БЕЗ ИСПОЛЬЗОВАНИЯ КНОПКИ &lt;kbd&gt;CAPS LOCK&lt;&#x2F;kbd&gt;. &lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Положение &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а надо синхронизировать с положением пробела — они должны быть на разных руках, чтобы было удобно набирать капсом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а два, они на мизинцах, а не на большом пальце.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; должен быть один и на большом пальце левой руки.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Я кстати никогда не понимал этой кнопки &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;. Если надо напечатать одно слово большими буквами, то включать и выключать эту кнопку — это очень сложно ведь с точки зрения выработки привычки. Особенно когда ты быстро печатаешь. Лично я всю свою жизнь для написания капса использовал &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, и никогда &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;. Так что это ещё одна причина выкинуть эту клавишу из клавиатуры, и сделать себе жизнь ещё проще, сократив число режимов (плюс, иногда она случайно нажимается, и прям бесит).&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt; не нужен, и на месте его могла бы размещаться более полезная клавиша, например &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Конечно, случай с буквами на большом пальце отдельный, и я него не рассматриваю.&lt;&#x2F;p&gt;
&lt;p&gt;И всё это я понимал ещё до того как начал обучаться десятипалу, поэтому я в своей раскладке сделал &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; вместо кнопки &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; ещё на СК. Конечно, тянуться было далековато и неудобно, но это было намного лучше, чем учиться правилу &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов, и удобнее, чем нажимать мизинцем. Так что если вы печатаете на обычной клавиатуре — советую вам сделать жизнь проще, и тоже поставить &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на большой палец.&lt;&#x2F;p&gt;
&lt;p&gt;Далее в заголовке говорится что &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; должен быть один, потому что а зачем нужен второй, если одного на большом пальце достаточно? Плюс, это тема следущего пункта.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;once-shift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#once-shift&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Once Shift&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;607339cb75f4828000.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_shift.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_shift.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На картинке можно увидеть &lt;kbd&gt;Once Shift&lt;&#x2F;kbd&gt;, который нажимается аккордом. Данный &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; является одновременно: залипающим и одиночным.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Once Shift&lt;&#x2F;kbd&gt; нажимается как аккорд с обычным &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Залипающая клавиша&lt;&#x2F;strong&gt; — это такая клавиша, которая при зажатии её с другими клавишами работает как обычный модификатор&#x2F;слоефикатор, а при единичном её нажатии и отпускании, применяется к одной следующей клавише.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Залипающие клавиши могут быть удобны, например, чтобы нажимать очень сложные хоткеи, не делая из пальцев твистер (игра твистер, не еда из кфц).&lt;&#x2F;p&gt;
&lt;p&gt;Залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; — это очень удобная вещь, позволяет считать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; буквой, а не модификатором. Отсюда и соотетствующие бонусы по удобству набора.&lt;&#x2F;p&gt;
&lt;p&gt;Но это не совсем правда, и залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; от буквы отличает то, что если при зажатии держать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; слишком долго, он применится сразу к нескольким клавишам: «ПРивет». Это синхронизационная проблема. Поэтому необходимо сделать так, чтобы даже если &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; держится на протяжении всего слова, он применялся только к первой букве. Это и есть свойство &lt;strong&gt;одиночности&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь &lt;kbd&gt;Once Shift&lt;&#x2F;kbd&gt; считается полноценной буквой, и может набираться таким же образом. И он полностью избавлен от синхронизационных проблем.&lt;&#x2F;p&gt;
&lt;p&gt;За счёт отсутствия синхронизационных проблем, одиночный залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; отлично может быть использован на клавогонках.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, такой &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; может быть удобен при наборе &lt;code&gt;camelCase&lt;&#x2F;code&gt;, &lt;code&gt;PascalCase&lt;&#x2F;code&gt; имён идентификаторов.&lt;&#x2F;p&gt;
&lt;p&gt;Обычный же &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; у меня совершенно обычный, без всяких залипаний и одиночности. Он нужен чтобы набирать КАПСОМ, выделять вещи мышкой.&lt;&#x2F;p&gt;
&lt;p&gt;Некоторые люди делают залипающий неодичный &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на месте обычного &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, и это становится проблемой в следующих случаях:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Когда ты выделяешь в проводнике файлы с помощью &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, а затем нажимаешь кнопку удалить, то к этой кнопке применяется &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, и считается, что файлы должны удалиться безвозвратно.&lt;&#x2F;li&gt;
&lt;li&gt;Когда ты случайно нажимаешь этот &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, а затем зажимаешь стрелочку куда-либо в тексте, то этот текст выделяется на один символ.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я использую отдельную клавишу для одиночного залипающего &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а для набора текста, и чтобы она не пересекалась с обычным &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Изначально, как только я купил эргодокс, я сделал залипающий &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;. Но к одиночному залипающему &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;у пришёл только в 2020 году, когда начал с нуля программировать раскладку для мунляндера.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green2-bg green2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green2-bg green2-border&quot;&gt;👨‍💻 Лайфхак&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Такую штуку можно реализовать без программируемой клавиатуры на QMK, через софт AHK, но я не знаю как, спрашивайте в чатике.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;backspace-klaster&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#backspace-klaster&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Backspace-кластер&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;07a223ac1482920d00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_backspace_all.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_backspace_all.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Все удаляющие клавиши располагаются близко друг с другом и на аккордах от &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;backspace&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#backspace&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Backspace&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;005e6fce942fda0500.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_backspace.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_backspace.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; должен быть близко. У меня он на большом пальце.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Backspace очень частая клавиша. К сожалению корректная статистика утеряна, но я могу гарантировать, что у меня он находится в ТОП-10.&lt;&#x2F;p&gt;
&lt;p&gt;Как я уже говорил, десятипалу не нравится, когда вы смещаете руку далеко от домашней позиции. Поэтому вредно ставить такую частую клавишу как &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; так далеко от домашней позиции, как это делается на СК.&lt;&#x2F;p&gt;
&lt;p&gt;Я поставил &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; на большой палец левой руки. Но с тем же успехом его можно поставить на место &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;, что я и сделал в своей первой раскладке на СК.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;delete&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#delete&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Delete&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;344fadbd56d7e4c500.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_delete.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_delete.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Delete&lt;&#x2F;kbd&gt; должен быть на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Delete пригождается при работе в редакторах с мышью в руке, где удаление назначено именно на эту клавишу. &lt;&#x2F;p&gt;
&lt;p&gt;Я кстати в печати никогда этой клавишей не пользуюсь, ибо привык всё делать &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;&#x27;ом. Если надо удалить следующий символ, то стрелочки в помощь. Так что я бы вообще за удаление этой клавиши и переназначение всех удалений на &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;, и переименование &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; в &lt;kbd&gt;Delete&lt;&#x2F;kbd&gt;. Но что поделать, история вставила свои палки в колёса.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Раньше, на эргодоксе, у меня &lt;kbd&gt;Delete&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+A&lt;&#x2F;kbd&gt; лежали рядом, без аккордов.&lt;&#x2F;p&gt;
&lt;p&gt;И из-за этого однажды на работе я случайно удалил все файлы в папке на гугл-диске к которому мне дали доступ. А я хотел нажать &lt;kbd&gt;Ctrl+A&lt;&#x2F;kbd&gt; и все их скачать.&lt;&#x2F;p&gt;
&lt;p&gt;Попытки восстановить:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Кнопка «отмена» на всплывшем уведомлении об удалении упала с ошибкой.&lt;&#x2F;li&gt;
&lt;li&gt;Корзина пустая.&lt;&#x2F;li&gt;
&lt;li&gt;Поддержка гугла не смогла ничего восстановить.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Уроки, которые я из этого извлёк:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Не ставить рядом кнопки &lt;kbd&gt;Ctrl+A&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Delete&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;При шэринге ссылки не давайте права на редактирования тому, кому они не нужны&lt;&#x2F;li&gt;
&lt;li&gt;Не пользуйтесь гугл-диском!!!&lt;&#x2F;li&gt;
&lt;li&gt;Лучше не работать когда ты спал 4 часа&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;ctrl-backspace&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ctrl-backspace&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Ctrl+Backspace&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f9daeb2850e5ddf900.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_ctrl_backspace.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_ctrl_backspace.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;У меня есть отдельная клавиша для &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt; — стирает сразу всё слово. Эта клавиша является неизвестной необходимостью. Особенно её ценность я осознал, когда начал использовать в клавогонках, и за счёт чего сильно ускорился. Эта клавишу я по частоте нажимаю примерно так же часто, как и обычный &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;, если не чаще.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt; иногда удобнее обычного &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;, потому что часто ошибка в слове происходит не в последнем символе, а в середине. И стирать &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;&#x27;ом три символа — уже долго, ибо нажатие одной и той же клавиши три раза долго само по себе. А потом ещё надо прочитать что ты написал, понять где ошибка, как исправить, и всё это на скорости. Да это дико медленно! И потребляет кучу мыслетоплива. И как бы парадоксально это не звучало, чаще всего быстрее стереть всё слово, и напечатать заново. На стирание слова тратится одно нажатие, а печатается заново очень быстро, ибо тренировка печати 99% времени занимает именно быстрый набор слов.&lt;&#x2F;p&gt;
&lt;p&gt;Видно, что при быстром наборе &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt; хорошо экономит мыслетопливо по сравнению с обычным &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Главное чтобы нажатие &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt; было настолько просто, как и нажатие одной клавиши. В данном случае у меня он стоит на аккорде-двукнопии. И благодаря этому нету синхронизационных проблем, потому что с частыми клавишами проблемы синхронизации очень болезненны. Плюс я уже объяснял на примере этой клавиши какие у меня были проблемы, когда эта клавиша была в слою.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;khotkei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#khotkei&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Хоткеи&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;kopipasta&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kopipasta&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Копипаста&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7ae098d1588e446100.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_copypaste.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_copypaste.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Отдельные клавиши для копипасты и выделения всего.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Копипаста делается настолько часто, что только она уже может значительно повлиять на частоту использования клавиши &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. Поэтому копипасту как отдельные клавиши можно вынести на хоткей, например в слой, или на основной слой.  Что я и сделал с самого появления эргодокса. У меня копипаста лежала на этих дальних клавишах для указательного.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас почти во всех программах копипаста спокойно работает на &lt;kbd&gt;Ctrl+C&#x2F;V&lt;&#x2F;kbd&gt;. Но некоторые особо одарённые программы (терминал, emacs) на эти хоткеи делают что-то совсем другое, и это неприятно. Благо возможно настроить. Я пользуюсь только терминалом, поэтому настроил его: в нём можно переназначить копипасту на &lt;kbd&gt;Ctrl+C&#x2F;V&lt;&#x2F;kbd&gt;, перенеся убийство программы на другое сочетание. Я выбрал &lt;kbd&gt;Ctrl+J&lt;&#x2F;kbd&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;dots#terminal&quot;&gt;Здесь&lt;&#x2F;a&gt; написано как это можно сделать. (Но особо одарённого докера это не берёт.)&lt;&#x2F;p&gt;
&lt;p&gt;Для &lt;kbd&gt;Ctrl+A&lt;&#x2F;kbd&gt; я тоже держу отдельную клавишу, чтобы выделять весь текст, иногда пригождается в графических програмах.&lt;&#x2F;p&gt;
&lt;p&gt;Так же, можно заметить, что у меня при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е на копипасте добавляется &lt;kbd&gt;Ctrl+A + ...&lt;&#x2F;kbd&gt;, что означает, что при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е, и при нажатии на хоткей &lt;kbd&gt;Ctrl+C&lt;&#x2F;kbd&gt;, сначала перед ним делается &lt;kbd&gt;Ctrl+A&lt;&#x2F;kbd&gt;, а затем нажимается собственно сам &lt;kbd&gt;Ctrl+C&lt;&#x2F;kbd&gt;. Это позволяет мне за два нажатия выделить весь текст и скопировать его. Аналогично с &lt;kbd&gt;Ctrl+A + Ctrl+V&lt;&#x2F;kbd&gt;, и &lt;kbd&gt;Ctrl+A + Ctrl+X&lt;&#x2F;kbd&gt;. И копирование всего и вставка вместо всего — невероятно частые вещи, особенно когда из одного маленького поля копируешь в другое маленькое поле.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;У меня &lt;kbd&gt;Ctrl+X&lt;&#x2F;kbd&gt; находится на аккорде между &lt;kbd&gt;Ctrl+C&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+V&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;ctrl-z&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ctrl-z&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Ctrl+Z&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;68c3f0e40b73374700.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_ctrl_z.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_ctrl_z.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+Z&lt;&#x2F;kbd&gt; выполняют похожие функции — отмена.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Благодаря чему мне кажется что очень красиво разместить &lt;kbd&gt;Ctrl+Z&lt;&#x2F;kbd&gt; симметрично &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl+Z&lt;&#x2F;kbd&gt; должен располагаться симметрично &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так же при зажатом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;е у меня на месте &lt;kbd&gt;Ctrl+Z&lt;&#x2F;kbd&gt; нажимается хоткей «повторить отменённое действие» — &lt;kbd&gt;Ctrl+Y&lt;&#x2F;kbd&gt;. Очень удобно, когда нажал слишком много отмены.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ctrl-s&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ctrl-s&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Ctrl+S&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9663089a8712162900.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_ctrl_s.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_ctrl_s.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это может показаться диким, но данное сочетание занимало &lt;code&gt;1.5%&lt;&#x2F;code&gt; всех моих нажатий на клавиатуре. Видимо я очень нервный, раз так часто сохраняю файл. Чтобы успокоить свои нервы, я решил вынести её на основной слой. &lt;&#x2F;p&gt;
&lt;p&gt;Плюс в последнее время она мне пригождается в расширении &lt;code&gt;Rust Enhanced&lt;&#x2F;code&gt;. Когда я сохраняю файл, запускается проверка кода компилятором, и прямо в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt; выводятся ошибки. Мне кажется это намного удобнее, чем когда ошибки подчёркиваются и раздражают во время написания кода в IDE.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;skrinshot&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skrinshot&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скриншот&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5061b7e727689a0000.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_screenshot.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_screenshot.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Вы можете заметить что у меня на большом пальце левой руки, на трёхкнопном акорде находится клавиша &lt;kbd&gt;Screenshot&lt;&#x2F;kbd&gt;. Данная клавиша делает скриншот выделенной области.&lt;&#x2F;p&gt;
&lt;p&gt;Согласно моему внутреннему ощущению, можно прмерно сказать что в &lt;code&gt;95%&lt;&#x2F;code&gt; случаев нужен именно скриншот области, в &lt;code&gt;4.9%&lt;&#x2F;code&gt; скриншот окна, и в &lt;code&gt;0.1%&lt;&#x2F;code&gt; скриншот всего экрана. Именно поэтому у меня в основном слое лежит клавиша для скриншота области. И по этой причине у меня клавиша &lt;kbd&gt;Print Screen&lt;&#x2F;kbd&gt; присутствует только на слое на случай ядерной войны, то есть для этих &lt;code&gt;0.1%&lt;&#x2F;code&gt; случаев.&lt;&#x2F;p&gt;
&lt;p&gt;Клавиша для скриншота области должна быть на левой руке, потому что сразу после её нажатия используется мышь на правой, чтобы выделить область.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;На левой руке и в удобном месте должна быть клавиша для скриншота области.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue2-bg blue2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue2-bg blue2-border&quot;&gt;🖥 Техническая сторона&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Данная клавиша использует информацию о том, какой сейчас хоткей используется для переключения языка, ибо в зависимости от переключения языка можно сказать какая сейчас система — Windows или Linux.&lt;&#x2F;p&gt;
&lt;p&gt;На Windows я использую стандартное сочетания для снятия области — &lt;kbd&gt;Win + Shift + S&lt;&#x2F;kbd&gt;. На Linux я скачал программу &lt;code&gt;flameshot&lt;&#x2F;code&gt;, и поставил туда хоткей, который вызывает команду &lt;code&gt;flameshot gui&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;ostal-nye-khotkei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ostal-nye-khotkei&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Остальные хоткеи&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a9624f61f679de4400.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_hotkeys.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_hotkeys.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут особо ничего интересного нету. Рассказываю просто чтобы было понятно.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+J&lt;&#x2F;kbd&gt; убивает текущую программу в консоли.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+&#x2F;&lt;&#x2F;kbd&gt; в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt; комментирует выделенный участок кода.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+D&lt;&#x2F;kbd&gt; используется в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt; для создания множественного курсора из текущего выделения.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Win+L&lt;&#x2F;kbd&gt; блокирует компьютер. Обычно используется в офисе во время ухода на обед.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Klavogonki NEXT&lt;&#x2F;kbd&gt; переходит в следующий заезд на клавогонках. Данная клавиша просто нажимает: &lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; &lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; &lt;kbd&gt;Ctrl + →&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;prepinaki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prepinaki&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Препинаки&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;probel&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#probel&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Пробел&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2dcd38329af8a6bb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_space.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_space.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;У меня пробел обозначается как &lt;kbd&gt;⎵&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;По поводу того на какой руке должен находиться пробел — я не знаю, на правой вроде как норм. Раньше я нажимал пробел левым большим пальцем — потому что играл в игры, но затем при создании своей первой раскладки для СК переучился нажимать его правой, чтобы не было коллизий с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом, который на тогда был на левом &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;. И это соханилось до сих пор, так же это позволяет НАБИРАТЬ КАПСОМ С ЗАЖАТЫМ &lt;kbd&gt;SHIFT&lt;&#x2F;kbd&gt;&#x27;ОМ И С ПРОБЕЛОМ. Для игр у меня есть отдельный слой, где пробел находится на левой руке.&lt;&#x2F;p&gt;
&lt;p&gt;Как вы помните, на СК пробел очень длинный, и вообще это единственная клавиша для двух больших пальцев. И это ещё один важный пункт, почему СК неадекватна для десятипала: одна клавиша на целых два очень сильных и очень подвижных пальца — это грубейшая ошибка.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Пробел неадекватно большой. Для него нужны отдельные кейкапы, для него нужны стабилизаторы, он шумит и часто ломается. И самое главное, кроме него, большим пальцам до всего остального далеко.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;И эта грубейшая ошибка СК приводит людей к тому, что с большим пальцем делать особо нечего. Поэтому они придумали ещё одно живодёрское правило — &lt;strong&gt;правило пробелов&lt;&#x2F;strong&gt;. Оно по аналогии с правилом &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов заставляет тебя нажимать пробел противоположной рукой от последней нажатой клавиши. Соответственно к нему применима аналогичная критика правила &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ов.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, так как некоторые не печатают пробел двумя пальцами, то для них десятипал на СК формально нельзя называть 10-пальцевым методом.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;1223&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c531babaad5561eb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;meme_space.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;meme_space.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;С одной стороны, это правило может показаться разумным, если узнать, что пробел — &lt;strong&gt;самая&lt;&#x2F;strong&gt; частая клавиша на клавиатуре. По моей статистике она нажимается в &lt;code&gt;8%&lt;&#x2F;code&gt; случаев от всех нажатий.&lt;&#x2F;p&gt;
&lt;p&gt;Но на самом деле это не так страшно, и все скоростные наборщики нажимают пробел одним пальцем, и всем норм. Я, как наборщик со скоростью 700, полностью их поддерживаю. Пробел не представляет никаких проблем. Большой палец силён.&lt;&#x2F;p&gt;
&lt;p&gt;Возьмите, например, словарь &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;vocs&#x2F;25856&#x2F;&quot;&gt;«соточка»&lt;&#x2F;a&gt; на клавогонках. Там частота пробела ещё выше из-за того, что слова намного короче. Но люди всё-равно делают там запредельные скорости, нажимая пробел одной рукой. Если вам кажется, что именно пробел замедляет вас в этом словаре, то с практикой это быстро проходит.&lt;&#x2F;p&gt;
&lt;p&gt;Ну а если вам правило пробелов и способно что-то дать, то эффект этого будет находиться в рамках погрешности измерений (или &lt;code&gt;3%&lt;&#x2F;code&gt;), или в рамах эффекта от плацебо. Настоящего практического преимущества от этого не наблюдается.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому мне очень больно видеть, когда люди покупают себе правильную клавиатуру, и лакомое место на большом пальце тратят на второй пробел для второй руки.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Пробел должен быть один.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;zapiataia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zapiataia&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Запятая&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;33411bfdba0d137a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_comma.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_comma.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На стандартной раскладке ЙЦУКЕН запятая нажимается как &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;.&lt;&#x2F;kbd&gt;, и это очень больно. Запятая в тексте встречается очень часто, чаще некоторых букв, и каждый раз нажимать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, и встревать в проблемы синхронизации — плохо. Поэтому я считаю, что запятая должна нажиматься без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, наравне с точкой. Кстати именно так сделано в раскладке &lt;code&gt;Русская Машинопись&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Запятая должна нажиматься без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, как и точка.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;При этом запятая чаще всего пишется с пробелом после неё, даже в программировании. Поэтому у меня в первую очередь запятая пишется сразу с пробелом. Конечно, бывают случаи, когда запятая нужна без пробела, и это стоит на аккорде.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;По простоте нажатия должна быть сначала запятая с пробелом, затем без пробела. Допускается запятую без пробела поместить даже на нажатие &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;,&lt;&#x2F;kbd&gt;, так как это будет нажиматься очень редко.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;tochka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tochka&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Точка&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b18d141ea634dcca00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_dot.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_dot.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Клавиша &lt;kbd&gt;. + ⎵ + nextshift&lt;&#x2F;kbd&gt; произносится как &lt;strong&gt;точка с пробелом с автошифтом&lt;&#x2F;strong&gt;. При её нажатии посылается сначала точка, затем пробел, а затем в клавиатуре записывается информация, что к следующей клавише нужно применить &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; (автошифт). Это нужно для печати текстов на естественном языке, где чаще всего точка ведёт себя именно так. Особенно это приятно ощущается на клавогонках, когда ты нажимаешь одну клавишу, а она делает эти три действия. Это реально ускоряет.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Для быстрой печати у меня есть клавиша, которая нажимает точку с пробелом и автошифтом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Но даже в русском языке есть точки в неожиданных местах: в прямой речи, и в &lt;code&gt;и т.д.&lt;&#x2F;code&gt;, &lt;code&gt;т.е.&lt;&#x2F;code&gt;. А ещё есть программирование. Поэтому нужна отдельная клавиша для обычной точки. И она у меня вынесена на нажатие без аккорда.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё отдельно вынесено многоточие, но его довольно неудобно нажимать, надо с ним что-то придумать.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Клавиша &lt;kbd&gt;. + ⎵ + nextshift&lt;&#x2F;kbd&gt;(точка с пробелом с автошифтом) нажимается как аккорд точки и пробела.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Раньше, до мунляндера, у меня точка различалась для русского и для английского. На русском точка по умолчанию была с автошифтом и пробелом, а на английском без. Поэтому я не мог печатать на клавогонках английский, и не особо развивался в скорости по нему. Плюс на русском я частенько спотыкался, когда нужно было нажать точку без пробела.&lt;&#x2F;p&gt;
&lt;p&gt;А сейчас, когда эти три препинака одинаков для всех языков — это сказка. Особенно при быстром наборе. Теперь набор на английском практически не отличается от набора на русском.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Базовые текстовые препинаки должны быть в одинаковых позициях для русского и английского языков.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;ostal-nye-prepinaki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ostal-nye-prepinaki&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Остальные препинаки&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;463721dd8707612800.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_symbols.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_symbols.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Напоминаю, что все эти препинаки могут быть нажаты как из русского, так и из английского языков. То есть из английского без переключения языка можно нажать &lt;code&gt;№&lt;&#x2F;code&gt;, а из руссского можно нажать &lt;code&gt;#&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Тут важно отметить, что препинаки в цифроряде нажимаются без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, и числа — с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом. Это сделано потому что препинаки в программировании и тексте всё-таки встречаются намного чаще, чем числа, а нажатие &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а создаёт неудобства, так что лучше их минимизировать.&lt;&#x2F;p&gt;
&lt;p&gt;Раскладка, которая для русского языка просто выносит все препинаки в цифроряд без нажатия &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, а числа делает с нажатым &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом называется &lt;code&gt;Русская машинопись&lt;&#x2F;code&gt;. То же самое делает раскладка &lt;code&gt;Programmer Dvorak&lt;&#x2F;code&gt; для английского языка и раскладки Дворака.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;До перехода на мунляндер, у меня препинаки были различны как для русского, так и для английского языков. Я, конечно, старался расположить всякие &lt;code&gt;!?*&lt;&#x2F;code&gt; на одинаковых местах, но этого было недостаточно, чтобы не спотыкаться каждый раз об другие препинаки. Особенно мне не хватало символа &lt;code&gt;`&lt;&#x2F;code&gt; в русском языке, чтобы использовать его в Markdown. А переключение языка неприятно, хоть и на одну клавишу.&lt;&#x2F;p&gt;
&lt;p&gt;На эргодоксе у меня не было особой мотивации этим заниматься, потому что там я свою прошивку очень плохо написал, и не хотел вставлять в неё патч, или переписывать с нуля. А покупка новой клавы стала поводом сделать всё сразу хорошо.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Все препинаки должны нажиматься из любого языка.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Особенно хочу здесь отметить символ &lt;code&gt;_&lt;&#x2F;code&gt; (положение на левом мизинце), который нажимается без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, и который симметричен &lt;code&gt;-&lt;&#x2F;code&gt;. Такая симметрия очень красива, и я его невероятно часто использую для набора &lt;code&gt;snake_case&lt;&#x2F;code&gt; идентификаторов в программировании.&lt;&#x2F;p&gt;
&lt;p&gt;Так же у меня не стоит &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ового варианта на &lt;code&gt;_&lt;&#x2F;code&gt; и на &lt;code&gt;-&lt;&#x2F;code&gt;, чтобы можно было набирать: &lt;code&gt;SCREAMING_SNAKE_CASE&lt;&#x2F;code&gt; и &lt;code&gt;КАПС ЛОК С ДЕФИСОМ — ЭТО ХОРОШО&lt;&#x2F;code&gt; не отпуская &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;code&gt;_&lt;&#x2F;code&gt; должен быть отделён от &lt;code&gt;-&lt;&#x2F;code&gt;, и обе клавиши должны нажиматься без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, и на себе не иметь других вещей, которые нажимаются с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так же можно заметить, что у меня среди препинаков отсутствуют скобочки всех видов. Они к сожалению находятся в слою, и о них позже.&lt;&#x2F;p&gt;
&lt;p&gt;Так же важно заметить, что из-за отсутствия таба, &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а и &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt; весь второй столбец у мизинца становится свободным. Куда я разместил ещё препинаков. Про &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt; понятно, а &lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; я утащил в слой, и об этом будет сказано при рассмотрении красного слоя.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue2-bg blue2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue2-bg blue2-border&quot;&gt;🖥 Техническая сторона&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Чтобы сделать одинаковые препинаки для русского и для английского языков, нужно сделать следующее: если ты сейчас находишься на русском языке, и хочешь нажать символ &lt;code&gt;#&lt;&#x2F;code&gt;, то нужно на момент нажатия этого символа включить английский язык, нажать его, а затем вернуть на предыдущий. Аналогично с английским.&lt;&#x2F;p&gt;
&lt;p&gt;Примерно так и я и сделал, и теперь у меня практически все препинаки находятся в основном слое на цифроряде и по бокам. &lt;&#x2F;p&gt;
&lt;p&gt;Для реализации такой возможности иметь одинаковые препинаки на разных языках, пришлось написать много всякого кода. Я вынес этот код в отдельный модуль &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;lang_shift&quot;&gt;lang_shift&lt;&#x2F;a&gt;, который может использовать любой русскоязычный человек, программирующий свою раскладку на QMK.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Ещё важно заметить что в основном у меня все препинаки находятся в цифровом ряду. Именно для них у меня и есть цифровой ряд, и именно ради них я и покупаю клаву с цифровым рядом. Я не люблю препинаки в слою, потому что это вызывает проблемы синхронизации, и эта тема будет лучше освещена далее.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tsifry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tsifry&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Цифры&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6702bc2e6cd8889b00.webp&quot; 
    onclick=&quot;full_screen(&#x27;base_numbers.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;base_numbers.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Да, вы можете заметить, что у меня цифры-то как-то странно располагаются. Всему виной раскладка &lt;code&gt;Programmer Dvorak&lt;&#x2F;code&gt;, где цифры изначально располагались в таком порядке. &lt;&#x2F;p&gt;
&lt;p&gt;Когда я поставил эту раскладку, я принял такие цифры, и переучился под них. Не так это сложно, так что норм.&lt;&#x2F;p&gt;
&lt;p&gt;Они расположили цифры таким образом, чтобы чётные были на одной руке, а нечётные на другой, типо чтобы максимизировать чередования рук при наборе чисел.&lt;&#x2F;p&gt;
&lt;p&gt;Так же очень важной фичей такого расположения цифр становится то, что самые частые цифры: 0, 1, 2, 9 находятся на указательных пальцах. И вот это реально удобно! Знаете, нажимать 1 и 0 мизинцами в самых далёких местах — такое себе удовольствие.&lt;&#x2F;p&gt;
&lt;p&gt;Так что я оставил такие же цифры, как в раскладке &lt;code&gt;Programmer Dvorak&lt;&#x2F;code&gt;, и для русского тоже. Пользуюсь до сих пор, и пока не вижу причин переучиваться.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Цифры нажимаются с зажатым &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом. Важно, чтобы самые частые цифры нажимались более сильными пальцами, а не мизинцами.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;\1
&lt;p&gt;Есть ещё вариант создать отдельный слой для цифр — и расположить их как в нумпаде, или лучше чем в нумпаде, например, вот так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e5c4508650107b7700.webp&quot; 
    onclick=&quot;full_screen(&#x27;better_numpad.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;better_numpad.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Про различные виды расположения цифр можно почитать на &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;%D1%80%D0%B0%D1%81%D0%BA%D0%BB%D0%B0%D0%B4%D0%BA%D0%B8_%D1%86%D0%B8%D1%84%D1%80&quot;&gt;нашей вики&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;iazyki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#iazyki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Языки&lt;&#x2F;h2&gt;
&lt;p&gt;У меня прямо в клавиатуре прошиты нестандартные раскладки для русского и английского языков.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;foneticheskaia-raskladka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#foneticheskaia-raskladka&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Фонетическая раскладка&lt;&#x2F;h3&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Фонетическая раскладка&lt;&#x2F;strong&gt; — это такая раскладка, которая стремится расположить все буквы одного языка так, чтобы они были созвучны буквам другого. Например, существует &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;98745&#x2F;&quot;&gt;английская раскладка JCUKEN&lt;&#x2F;a&gt; — фонетическая от стандартной русской ЙЦУКЕН.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Обычно советуют использовать фонетическую раскладку чтобы потратить меньше времени на обучение или переобучение десятипалу. А вот какую раскладку брать за основу, каждый решает сам.&lt;&#x2F;p&gt;
&lt;p&gt;Конечно, о удобстве фонетической раскладки для набора текста скорее всего лучше не думать, потому что русский и английский язык работают не одинаково. Но если вы очень редко печатаете на русском или на английском, то можно рассмотреть такой вариант.&lt;&#x2F;p&gt;
&lt;p&gt;Я же не использую фонетическую раскладку, потому узнал о её существовании только после того как научился десятипалу на нормальной скорости, да и я готов учиться отдельно английскому и отдельно русскому ради удобства и скорости.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kastomnye-raskladki-i-modifikatory&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kastomnye-raskladki-i-modifikatory&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Кастомные раскладки и модификаторы&lt;&#x2F;h3&gt;
&lt;p&gt;Существует такая проблема, что с кастомными раскладками неудобно нажимать хоткеи. Существует две причины:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;На русском при зажатии модификатора клавиатура не такая же как на английском.&lt;&#x2F;li&gt;
&lt;li&gt;Человек привык нажимать все хоткеи на qwerty, но у него стоит кастомная английская раскладка.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Меня волнует именно первый случай, и он у меня решён тем, что при зажатии любого модификатора (кроме &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;), у меня только на время зажатия включается английский язык и английский слой. Таким образом, даже если я и буду нажимать модификаторы, то они у меня всегда будут такие, как будто сейчас английский язык.&lt;&#x2F;p&gt;
&lt;p&gt;Причём, так как некоторые программы не воспринимают хоткеи на русском языке, у меня ещё на время нажатия кнопки посылается комбинация для включения английского языка.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue2-bg blue2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue2-bg blue2-border&quot;&gt;🖥 Техническая сторона&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Это уже решено в моём модуле &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;lang_shift&quot;&gt;lang_shift&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;angliiskii-iazyk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#angliiskii-iazyk&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Английский язык&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;de5622e2715de18400.webp&quot; 
    onclick=&quot;full_screen(&#x27;english.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;english.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;По умолчанию у меня включён английский язык, как и во всех системах по умолчанию. Я обозначаю английский белым, а русский синим.&lt;&#x2F;p&gt;
&lt;p&gt;Изначально на английском языке у меня был дворак для программистов, затем на эргодоксе я его немного модифицировал в плане препинаков, и ещё сильнее модифицировал его на мунляндере.&lt;&#x2F;p&gt;
&lt;p&gt;Так как точку и запятую я унёс на большой палец, у меня освободилось место в верхнем ряду у левой руки. Туда я передвинул клавиши &lt;kbd&gt;Y&lt;&#x2F;kbd&gt; и &lt;kbd&gt;X&lt;&#x2F;kbd&gt; под более удобные положения. Ещё у меня осталось 4 свободных местах, в одно из которых я засунул большую букву &lt;kbd&gt;I&lt;&#x2F;kbd&gt;, чтобы минимизировать нажатия &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а. А в другие свободные места засунул клавиши, которые делают из букв такие штуки: &lt;code&gt;àáâã&lt;&#x2F;code&gt;, которые пригодились мне один раз при катании итальянского на клавогонках. Хотел бы я туда поместить препинаки для программирования, но нельзя, ибо они должны быть одинаковы для русского и для английского, чтобы не спотыкаться об них. А на этих местах стоят вполне себе важные клавиши на русском языке, так что убрать их из русского нельзя.&lt;&#x2F;p&gt;
&lt;p&gt;На английском я сейчас печатаю с максимальной скоростью около 550 зн&#x2F;мин.&lt;&#x2F;p&gt;
&lt;p&gt;По поводу самой раскладки дворака не знаю что сказать. Я особо английский не катал на скорость, и с этой точки зрения оценить его не могу. Так же я не могу сравнивать его с QWERTY, ибо на QWERTY я печатал только динамикой, а это совсем другое.&lt;&#x2F;p&gt;
&lt;p&gt;Насколько мне известно, раскладка дворака оптимизировалась чтобы максимизировать чередования, но по моим ощущениям, в двораке очень много перекатов, и это подтверждается реальными подсчётами, в нём их даже больше чем в ЙЦУКЕН, но меньше, чем в QWERTY. &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;forum&#x2F;academy&#x2F;15353&#x2F;&quot;&gt;Пруф в таблице.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;russkii-iazyk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#russkii-iazyk&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Русский язык&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;87e5a6c5084b732a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;russian.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;russian.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;А вот этот язык я очень сильно катал на скорость, и мне есть что сказать.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Стандартная раскладка ЙЦУКЕН неверна для десятипала. Она плоха тем, что у неё самые частые клавиши расположены на указательных пальцах, согласно стандартным десятипалым зонам. А когда очень много букв набираются всего двумя пальцами — это очевидно замедление, так как остальные пальцы простаивают, хотя могли бы заниматься полезной работой.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;ПНОП&lt;&#x2F;strong&gt; — последовательные нажатия одним пальцем. &lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Очевидно, что когда один палец нажимает много клавиш последовательно, то он замедляет весь процесс. А в ЙЦУКЕН очень много ПНОП&#x27;ов на указательных.&lt;&#x2F;p&gt;
&lt;p&gt;В какой-то момент я осознал что является ключом к скорости — &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;forum&#x2F;academy&#x2F;15353&#x2F;&quot;&gt;⭐Перекаты⭐&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;В &lt;a href=&quot;https:&#x2F;&#x2F;klavogonki.ru&#x2F;wiki&#x2F;Typing_Statistics&quot;&gt;TypingStatistics&lt;&#x2F;a&gt; перекаты можно увидеть следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;741&quot;
    height=&quot;191&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;72c4a3b81839c66b00.webp&quot; 
    onclick=&quot;full_screen(&#x27;rolls1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;rolls1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Когда чередования и ПНОП&#x27;ы выглядят вот так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;720&quot;
    height=&quot;188&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;497a69d0d3bd33d300.webp&quot; 
    onclick=&quot;full_screen(&#x27;rolls2.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;rolls2.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я хотел разработать свою самую перекатную раскладку, но когда я попытался это сделать, то утонул в сложности. Сейчас, когда я понимаю как это сделать проще, никак руки не доберутся. Всё-таки это большой исследовательский проект, на создание хорошей буквенной раскладки уйдёт очень много времени.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я начал с малого — переставил местами 2 буквы на ЙЦУКЕН. Я уже рассказывал про свои перестановки букв, напоминаю что они все старались максимизировать число перекатов.&lt;&#x2F;p&gt;
&lt;p&gt;Сейчас я имею ЙЦУКЕН с небольшими модификациями, которые максимизируют перекаты, и на этом я достиг максимальной скорости 718 зн&#x2F;мин на клавогонках. В специализированном словаре, который состоит исключительно из перекатных слов я &lt;a href=&quot;http:&#x2F;&#x2F;klavogonki.ru&#x2F;u&#x2F;#&#x2F;517589&#x2F;journal&#x2F;5dc04e5ddf4e4d61448b4569&quot;&gt;достиг скорости 821 зн&#x2F;мин&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;io&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#io&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Ё&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d4eb7c8a7382e3d300.webp&quot; 
    onclick=&quot;full_screen(&#x27;russian_yo.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;russian_yo.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;У меня под эту букву выделена отдельная &lt;strong&gt;удобная&lt;&#x2F;strong&gt; клавиша. И я &lt;strong&gt;всегда&lt;&#x2F;strong&gt; пишу &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt;, когда она присутствует. Отношусь я к этой букве так не по личным причинам, а по глобальным. Есть слова, у которых от наличия &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt; меняется смысл: &lt;code&gt;всё&lt;&#x2F;code&gt; и &lt;code&gt;все&lt;&#x2F;code&gt;, и парсить этот смысл из контекста не очень приятно, а иногда и невозможно. &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt; обязательно нужно писать, потому что иначе для слов &lt;code&gt;еж&lt;&#x2F;code&gt;, &lt;code&gt;черный&lt;&#x2F;code&gt; надо писать транскрипцию, которая говорит что там написано &lt;code&gt;йож&lt;&#x2F;code&gt; и &lt;code&gt;чорный&lt;&#x2F;code&gt; соответственно. А я не хочу, чтобы русский превращался в очередной английский с этими транскрипциями. Я как раз английский и ненавижу за транскрипции, и считаю что &lt;em&gt;Прекрасный Глобальный Искусственный Язык Будущего&lt;&#x2F;em&gt; 🇦🇶 обязан писаться так же как и произносится.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я всегда пишу Ё.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;И поэтому с буквой &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt; существует только два последовательных варианта:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Отказаться от неё полностью и писать &lt;code&gt;йож&lt;&#x2F;code&gt;, &lt;code&gt;чорный&lt;&#x2F;code&gt;, &lt;code&gt;всьо&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Писать Ё там, где она произносится.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ещё у меня есть ощущение что в 21 веке люди так невзлюбили букву &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt;, потому что кто-то подумал, что лучше ей будет располагаться в очень далёком месте, чтобы до неё было лень тянуться. Мне кажется, если бы &lt;kbd&gt;Ё&lt;&#x2F;kbd&gt; располагалась где-то в удобном месте, то на порядок больше людей использовали бы её, и она бы не попала в статус официально не обязательной буквы.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Утащили Ё далеко!&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Ещё я считаю, что буква Э неадекватно заменяется на &lt;kbd&gt;Е&lt;&#x2F;kbd&gt; в некоторых словах, например: &lt;code&gt;стэйк&lt;&#x2F;code&gt;, &lt;code&gt;хэдэр&lt;&#x2F;code&gt;. Так как я считаю, что язык можно и нужно менять согласно твоему личному мнению, то всегда пишу &lt;kbd&gt;Э&lt;&#x2F;kbd&gt; там, где она слышится.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Ъ&lt;&#x2F;h4&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8dcb3dce09980fb600.webp&quot; 
    onclick=&quot;full_screen(&#x27;russian_ъ.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;russian_ъ.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Этой букве тоже досталось много, ещё одна далёкая буква на мизинце, но хотя бы не официально не обязательная.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;KGOH&#x2F;Jian-Info&quot;&gt;Клавиатура Jian&lt;&#x2F;a&gt; уважает эту букву настолько, что даже имеет в для неё специальный отросток в виде третьего столбца для мизинца:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;534&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d5fcba2f67d6a25e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;jian.jpeg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;jian.jpeg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.8&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Из-за того что это самая редкая буква, её любят либо выбрасывать совсем, либо помещать у черта на куличиках.&lt;&#x2F;p&gt;
&lt;p&gt;Обычно &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt; засовывают в слой. Но делать это не очень удобно по нескольким причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Если надо набрать большой &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt;, то надо зажимать две клавиши! А если слоефикатор находится на той же руке, что и &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, то это практически невозможно.&lt;&#x2F;li&gt;
&lt;li&gt;Если решать проблему двух слоефикаторов тем, что делать две кнопки в слою: маленький &lt;kbd&gt;ъ&lt;&#x2F;kbd&gt; и большой &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt;, то это вообще некрасиво, неудобно и несимметрично всем остальным буквам.&lt;&#x2F;li&gt;
&lt;li&gt;Если &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt; находится в слою, к которому имеет доступ английский язык, то это не очень красиво.&lt;&#x2F;li&gt;
&lt;li&gt;Нажать слоефикатор во время набора слова — очень медленно, как и нажать &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; во время набора слова. Вот цифры в слою, или большая буква в начале слова — это другое дело, но не в середине. Так что это невероятная проблема синхронизации.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;У меня же &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt; находится в аккорде, и легко нажимается с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом, не создаёт проблем синхронизации, и на практике я из-за него не замедляюсь.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я не размещаю ни одну букву в слою из-за проблемы синхронизации. Даже самую редкую &lt;kbd&gt;Ъ&lt;&#x2F;kbd&gt; нельзя в слой. Зато можно в аккорд-двукнопие.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;krasnyi-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#krasnyi-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Красный слой&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;56f54c10956a9c5100.webp&quot; 
    onclick=&quot;full_screen(&#x27;red.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Красный слой — это слой для всего самого полезного, что не поместилось на основной.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала рассмотрим мелочёвку:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Shift+Tab&lt;&#x2F;kbd&gt; я разместил в слою, потому что хотел сэкономить место на основном слое, чтобы там поместились все препинаки. Да и в целом хотелось чего-то нового.&lt;&#x2F;li&gt;
&lt;li&gt;Так же ещё у меня лежит отдельный макрос для набора &lt;a href=&quot;https:&#x2F;&#x2F;turbo.fish&quot;&gt;turbofish из раста&lt;&#x2F;a&gt;. &lt;strong&gt;Очень&lt;&#x2F;strong&gt; часто пригождается. &lt;&#x2F;li&gt;
&lt;li&gt;Иногда пригождается макрос для набора &lt;kbd&gt;#[]&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Отдельная клавиша &lt;kbd&gt;Ctrl+Enter&lt;&#x2F;kbd&gt; чтобы удобно было отправлять сообщения во мессенджерах, ибо я люблю нажимать &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; для написания нового абзаца, и вообще писать большие сообщения в мессенджерах.&lt;&#x2F;li&gt;
&lt;li&gt;На левой руке на втором столбце мизинцев и указательных у меня лежат хоткеи для упрощения жизни в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;f-klavishi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#f-klavishi&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;F-клавиши&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8c3bec2fa03739cf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;red_f_keys.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red_f_keys.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Почему-то некоторые люди считают, что им нужна правильная клавиатура не только с цифрорядом, но ещё и с рядом для F-клавиш. С вероятностью &lt;code&gt;99%&lt;&#x2F;code&gt; вам это не нужно. Отдельный ряд для F-клавиш не нужен, если можно их положить в самый ближайший слой на цифроряд. Если боитесь за хоткеи, то можно сделать отдельный слой с хоткеями на эти клавиши. Всё просто.&lt;&#x2F;p&gt;
&lt;p&gt;F-клавиши я поместил так же, как и цифры, ибо я уже выучил что где лежит, а на клаву подсматривать не могу.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;F-клавиши хорошо ложатся в слой на место цифр.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;skobochki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skobochki&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скобочки&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8ab7152e6986e95c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;red_brackets.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red_brackets.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я всегда набираю все виды скобочек парой, потому что так нас научил преподаватель по информатике. Он сказал что это нужно делать чтобы не забывать закрывающую скобочку, или потом не расставлять её вручную. И это действительно удобно, после парного набора скобочек, программировать стало проще. &lt;&#x2F;p&gt;
&lt;p&gt;Я настолько привык к набору скобочек парой, что писать скобочки по отдельности на клавогонках мне очень неудобно.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Новые скобочки я всегда набираю парой.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Тут может показаться что я разместил все скобочки в неправильном порядке: они должны быть &lt;code&gt;()&lt;&#x2F;code&gt;, а не &lt;code&gt;)(&lt;&#x2F;code&gt;. Такое мышление верно для левой руки. Если на левой руке разместить скобочки визуально как &lt;code&gt;()&lt;&#x2F;code&gt;, то чтобы их набрать, нужно сделать перекат от края к центру, то есть движением стаккато — от мизинца к указательному.&lt;&#x2F;p&gt;
&lt;p&gt;Но такое визуальное расположение неверно для правой руки, поэтому там они размещаются в другом порядке &lt;code&gt;)(&lt;&#x2F;code&gt;, чтобы было удобнее набирать перекатом от края к центру.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Скобочки должны располагаться так, их пару было удобно нажимать перекатом от края к центру.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Я не люблю автокомплит скобочек, потому что у него очень много ложных срабатываний, которые сильно раздражают. Уж лучше его отключить, и заплатить цену путём написания закрывающей скобочки самостоятельно.&lt;&#x2F;p&gt;
&lt;p&gt;Так же к сожалению я испытываю проблему синхронизации со скобочками. Часто бывает так, что я хочу набрать скобочку, затем какой-то символ, и не успеваю отпустить слоефикатор, и у меня нажиматся F-клавиша, либо клавиша перемещения. Особенно неудобно, когда случайно нажимается &lt;kbd&gt;Pg Up&lt;&#x2F;kbd&gt;&#x2F;&lt;kbd&gt;Pg Down&lt;&#x2F;kbd&gt;. Поэтому я не очень люблю символы в слою, и советую помещать символы только в тот слой, где набираются другие символы.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Символы не должны быть в слое из-за проблем синхронизации.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Чтобы устранить проблему синхронизации, я добавил самые частые сочетания с знаками треугольных скобочек под обычными скобочками.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strelki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#strelki&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Стрелки&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;820403f42371f90900.webp&quot; 
    onclick=&quot;full_screen(&#x27;red_arrows.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red_arrows.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Возможность иметь стрелки в слою — это одна из самых главных возможностей, которые может вам предоставить правильная программируемая клавиатура.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition red2-bg red2-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red2-bg red2-border&quot;&gt;❌ Неадекватность СК для десятипала&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Далёкие стрелки, и по умолчанию их нету на домашней позиции.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;home-end&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#home-end&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Home, End&lt;&#x2F;h4&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Изначально, я вообще не знал что это за клавиши такие: &lt;kbd&gt;Home&lt;&#x2F;kbd&gt;, &lt;kbd&gt;End&lt;&#x2F;kbd&gt;, и никогда их не использовал. Но затем, в 7 классе школы, у нас началось программирование, и наш учитель, во время того как мы пишем код, ходил и смотрел как мы это делаем. Когда он замечал, что люди для передвижения до конца строки используют стрелки, он говорил им обязательно нажимать &lt;kbd&gt;End&lt;&#x2F;kbd&gt;. И так он заставлял нас использовать эти кнопки, и ещё &lt;kbd&gt;Home&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Delete&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;За это я очень благодарен нашему учителю, без него я бы наверное очень долго доходил до того что эти кнопки можно использовать и что они бесконечно удобны в работе.&lt;&#x2F;p&gt;
&lt;p&gt;Получается, что &lt;kbd&gt;Home&lt;&#x2F;kbd&gt; и &lt;kbd&gt;End&lt;&#x2F;kbd&gt; были для меня неизвестной необходимостью.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Вместо &lt;kbd&gt;Home&lt;&#x2F;kbd&gt; и &lt;kbd&gt;End&lt;&#x2F;kbd&gt; можно зажать клавишу стрелки, ждать пока она разгонится, и затем поймать момент чтобы её остановить. Это делать очень сложно, поэтому это является проблемой синхронизации, и потребляет много мыслетоплива. Поэтому &lt;kbd&gt;Home&lt;&#x2F;kbd&gt; и &lt;kbd&gt;End&lt;&#x2F;kbd&gt; — хорошие клавиши.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Home&lt;&#x2F;kbd&gt; и &lt;kbd&gt;End&lt;&#x2F;kbd&gt; должны использоваться.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;statistika&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#statistika&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Статистика&lt;&#x2F;h4&gt;
&lt;p&gt;Статистику я собирал со своей клавиатуры при помощи &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;heatmap&quot;&gt;klavarog&#x2F;heatmap&lt;&#x2F;a&gt;, ссылка на статистику: https:&#x2F;&#x2F;t.me&#x2F;klavaorgwork&#x2F;154628.&lt;&#x2F;p&gt;
&lt;p&gt;Частотность красного слоя: &lt;code&gt;17.04%&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Клавиша включения красного слоя: &lt;code&gt;4.5%&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Space&lt;&#x2F;td&gt;&lt;td&gt;8.13%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Русская маленькая &#x27;о&#x27;&lt;&#x2F;td&gt;&lt;td&gt;4.80%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;MO(4)&lt;&#x2F;td&gt;&lt;td&gt;4.50%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Видно, что клавиша включения красного слоя занимает &lt;code&gt;4.5%&lt;&#x2F;code&gt; от всех нажатий, и находится на третьем месте. Чаще нажимается только русская О и пробел. При этом, нужно отметить, что если зажимается клавиша включения красного слоя, то в этот момент может быть нажато много стрелок (&lt;kbd&gt;Down&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Down&lt;&#x2F;kbd&gt; + ...). То есть включение красного слоя равносильно перемещению руки на стрелки, если бы стрелки были не в слою, а где-то далеко, как на СК.&lt;&#x2F;p&gt;
&lt;p&gt;Частотность стрелок: &lt;code&gt;58.92% * 17.04% = 10.03%&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Down&lt;&#x2F;td&gt;&lt;td&gt;20.83%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Up&lt;&#x2F;td&gt;&lt;td&gt;18.51%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Left&lt;&#x2F;td&gt;&lt;td&gt;10.73%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Right&lt;&#x2F;td&gt;&lt;td&gt;8.85%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Σ&lt;&#x2F;td&gt;&lt;td&gt;58.92%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Частотность других клавиш для перемещения: &lt;code&gt;9.98% * 17.04% = 1.7%&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;End&lt;&#x2F;td&gt;&lt;td&gt;5.50%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Home&lt;&#x2F;td&gt;&lt;td&gt;3.84%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Page Up&lt;&#x2F;td&gt;&lt;td&gt;0.33%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Page Down&lt;&#x2F;td&gt;&lt;td&gt;0.31%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Σ&lt;&#x2F;td&gt;&lt;td&gt;9.98%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Частотность стрелок с контролом: &lt;code&gt;14.78% * 17.04% = 2.52%&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Name&lt;&#x2F;th&gt;&lt;th&gt;Percent&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Ctrl+Left&lt;&#x2F;td&gt;&lt;td&gt;7.43%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Ctrl+Right&lt;&#x2F;td&gt;&lt;td&gt;7.18%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Ctrl+Up&lt;&#x2F;td&gt;&lt;td&gt;0.09%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Ctrl+Down&lt;&#x2F;td&gt;&lt;td&gt;0.08%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Σ&lt;&#x2F;td&gt;&lt;td&gt;14.78%&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;Итого все клавиши для перемещения составляют &lt;code&gt;14.25%&lt;&#x2F;code&gt; от всех нажатий на клавиатуре.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;pochemu-strelki-dolzhny-byt-v-sloe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pochemu-strelki-dolzhny-byt-v-sloe&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Почему стрелки должны быть в слое&lt;&#x2F;h4&gt;
&lt;p&gt;Существует несколько способов куда можно поставить стрелки: &lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;В слой&lt;&#x2F;li&gt;
&lt;li&gt;Раскидать их на разные руки на основной слой&lt;&#x2F;li&gt;
&lt;li&gt;Положить их вместе в определённое место, куда рука обязательно будет смещаться с домашней позици.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Пример для пункта 2:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e15dcfb009a0ee7800.webp&quot; 
    onclick=&quot;full_screen(&#x27;arrows_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;arrows_1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Пример для пункта 3:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;bc5ce5343ed9055300.webp&quot; 
    onclick=&quot;full_screen(&#x27;arrows_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;arrows_2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Раскладка &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;%D1%80%D0%B0%D1%81%D0%BA%D0%BB%D0%B0%D0%B4%D0%BA%D0%B8&#x2F;%D0%BE%D0%BF%D1%82%D0%B8%D0%BC%D0%B0&quot;&gt;Оптима&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;467&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;ce0c4b15e24adedf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;optima_arrows.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;optima_arrows.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;383&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a10a19965b8c1c8e00.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_arrows.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_arrows.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.9&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Начнём с рассмотрения, почему &lt;strong&gt;2 пункт&lt;&#x2F;strong&gt; является не очень хорошим:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Стрелок много, и их особо некуда ставить, кроме как на мизинцы или на большие пальцы. При этом нужно учесть, что очень часто используются &lt;kbd&gt;Стрелки&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;, и &lt;kbd&gt;Стрелки&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. И иногда бывают &lt;kbd&gt;Стрелки&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. &lt;&#x2F;li&gt;
&lt;li&gt;Целых &lt;code&gt;1.7%&lt;&#x2F;code&gt; нажатий составляют другие виды управления клавиатурой, которые всё-равно придётся засунуть в слой.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Обычно, при редактировании текста, а особенно при редактировании программы, очень часто приходится передвигаться по тексту при помощи стрелок. Например, может быть такая последовательность действий:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;передвинуться на две строки выше &lt;&#x2F;li&gt;
&lt;li&gt;выделить с помощью стрелок текст&lt;&#x2F;li&gt;
&lt;li&gt;скопировать его &lt;&#x2F;li&gt;
&lt;li&gt;передвинуться на две строки вниз&lt;&#x2F;li&gt;
&lt;li&gt;вставить&lt;&#x2F;li&gt;
&lt;li&gt;передвинуться вбок&lt;&#x2F;li&gt;
&lt;li&gt;стереть&lt;&#x2F;li&gt;
&lt;li&gt;написать новый текст&lt;&#x2F;li&gt;
&lt;li&gt;готово. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;То есть стрелки нажимаются как часть набора текста и хоткеев. И, как видно по статистике, происходит это очень часто, в &lt;code&gt;4.5%&lt;&#x2F;code&gt; процентов от всех нажатий. И каждый раз для такого случая смещать руку — это ужасно. Ещё по этому примеру можно заметить почему нужны отдельные клавиши для копипасты. И у меня в красном слое нету ничего на месте копипасты, чтобы при включённом красном слое не надо было выключать слой, чтобы нажать копипасту.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;На слою со стрелками не должны использоваться клавиши для копипасты для чего-то другого, они должны остаться собой.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому &lt;strong&gt;3 пункт&lt;&#x2F;strong&gt; тоже плох. Хотя, вторая картинка для 3 пункта взята из раскладки реального человека. Он решил, что ему будет удобнее иметь стрелки в основном слою, посередине клавиатуры. Но он и не занимается программированием, а как говорит, «любит стрелками просто передвигаться по тексту». То есть у него стрелки работают не так, как у программистов. Так что тут тоже нужно смотреть на свой воркфлоу.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё есть аргументы против стрелок в слою — это то, что при просмотре фильма или видео хочется передвигаться стрелками без использования двух рук, просто одной что-то нажимать.&lt;&#x2F;p&gt;
&lt;p&gt;Для такого случая можно сделать две вещи:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Чтобы стрелки были на левой руке, и где-то на левой руке был слоефикатор, чтобы их активировать&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы были дубликаты стрелок, которые созданы специального для этого случая&lt;&#x2F;li&gt;
&lt;li&gt;Чтобы был слой специально для просмотра фильмов, где на левой руке будут и стрелки, и синхронизация субтитров, и настройка звука, и всё что хочешь.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;В частности я реализую первый пункт: у меня стрелки находятся на левой руке и существует слоефикатор, который нажимается через аккорд, при помощи которого я могу во всяких редакторах или фильмах легко нажимать стрелки, держа при этом правую руку на мыши.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Должен быть слоефикатор на левой руке, позволяющий нажимать стрелки одной рукой. Это нужно для мыши и перемотки фильмов&#x2F;видео.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Стрелки должны быть в слою.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;forma-strelok&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#forma-strelok&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Форма стрелок&lt;&#x2F;h4&gt;
&lt;p&gt;Итак, в основном существует два лагеря стрелок в слою. Первый лагерь — стандартные стрелки в форме перевёрнутой буквы T:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;830&quot;
    height=&quot;290&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;521858b7fdb6c33b00.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_arrows_T.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_arrows_T.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Второй же лагерь использует плоские стрелки, формата 4×1.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;830&quot;
    height=&quot;290&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;31bd4008bfc9ccd200.webp&quot; 
    onclick=&quot;full_screen(&#x27;sk_arrows_4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;sk_arrows_4.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Второй вариант красив своей симметричностью по отношению к нижнему и верхнему ряду.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Видно, что второй вариант хорош во всём:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Home&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Pg Up&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Pg Down&lt;&#x2F;kbd&gt;, &lt;kbd&gt;End&lt;&#x2F;kbd&gt; можно разместить симметрично стрелкам снизу.&lt;&#x2F;li&gt;
&lt;li&gt;Снизу от стрелок появляется место для стрелок с зажатым &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Обоими этими свойствами не обладает первый вариант. Но первый вариант является знакомым, правда он знаком только расположением стрелок, но не всех остальных клавиш.&lt;&#x2F;p&gt;
&lt;p&gt;По поводу того насколько сложно переучиться на такие четырёхпальцевые стрелки — я не помню, ибо сделал это с самого начала. Видимо несложно, раз я не запомнил этот процесс. Всяко легче, чем на две переставленные буквы переучиваться, это точно.&lt;&#x2F;p&gt;
&lt;p&gt;Для тех кто не знал — если нажимать стрелки с контролом, то они перемещаются по словам. Стрелки с зажатым контролом во втором варианте это ещё один пример неизвестной необходимости.&lt;&#x2F;p&gt;
&lt;p&gt;Можно возразить: зачем нужны стрелки с зажатым &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;&#x27;ом, если, собственно, можно зажать &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;? Тут возникает две проблемы:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;А если сейчас выделяется текст, то чем нажимать &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;? Если уже зажат слоефикатор и зажат &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;. Тогда надо выносить кого-то на мизинец, либо нажимать это аккордом. И ещё надо находить для &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; удобное место.&lt;&#x2F;li&gt;
&lt;li&gt;А если нужно передвинуться всего несколько раз по словам, а потом по одному символу? Тогда надо отжимать и нажимать снова &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;. А как известно, необходимость зажимать клавишу на определённый промежуток времени сильно тормозит и чревато ошибками синхронизации.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;А когда имеется отдельные клавиши с уже зажатым &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;&#x27;ом, то чтобы их нажать единственное что нужно сделать — это просто нажать пониже. Всё. И таким образом можно невероятно быстро передвигаться по словам и по символам одновременно. Особенно это становится актуально при длинных именах в программировании. Или при редактировании текста проще 3 раза нажать влево с &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;&#x27;ом, чем 20 раз просто стрелкой влево, или чем зажимать стрелку влево, и высчитывать момент когда она разгонится и остановится.&lt;&#x2F;p&gt;
&lt;p&gt;Плюс, при зажатии кнопки передвижения по словам вбок, передвижение происходит намного быстрее, чем при зажатии кнопки передвижения по символам.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Должны быть отдельные стрелки с зажатым контролом.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Если хочется, то можно ещё сверху, на цифроряде разместить &lt;kbd&gt;Ctrl+Home&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl+End&lt;&#x2F;kbd&gt;. &lt;kbd&gt;Ctrl+Pg Up&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl+Pg Down&lt;&#x2F;kbd&gt; тоже можно, но это настолько частая комбинация, что мы о ней поговорим на зелёном слое.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Стрелки должны быть плоскими, чтобы снизу и сверху можно было красиво и симметрично разместить удобные клавиши передвижения, похожие на стрелки.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;strelki-s-povtorom&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#strelki-s-povtorom&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Стрелки с повтором&lt;&#x2F;h4&gt;
&lt;div class=&quot;admonition green-bg green-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green-bg green-border&quot;&gt;💡 Идея&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Иногда даже передвижения по словам работают медленно, потому что встречаются кучи препинаков, и передвижение по словам превращается в передвижение по символам. В таком случае я бы хотел иметь клавиши «5 раз влево» и «5 раз вправо».&lt;&#x2F;p&gt;
&lt;p&gt;Но даже если реализовать такую функцию прямо сейчас, то она не будет работать при зажатии такой клавиши: то есть при зажатии она сможет работать как обычная стрелка, медленно передвигаться, по одному символу в единицу времени, а не в 5 за единицу времени. А обычный QMK слаб для таких фич. Поэтому надо сделать фичу которую давно делал Волька в Кошкоклаве — собственный повтор внутри клавиатуры, а не на стороне ОС. Пока такое только в планах.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;mizinets-dlia-strelok&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#mizinets-dlia-strelok&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Мизинец для стрелок&lt;&#x2F;h4&gt;
&lt;p&gt;Следующее о чём нужно поговорить, это использование мизинца. Некоторые боятся, что мизинец слишком слабый палец, чтобы нажимать такую частую вещь как стрелку влево. Напоминаю, что у меня на всех картиках стрелки расположены полностью на домашней позиции, то есть мизинец нажимает стрелку вбок, и указательный нажимает стрелку вбок.&lt;&#x2F;p&gt;
&lt;p&gt;Существуют стрелки в vim&#x27;е, которые не используют мизинец:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;9aed54e2759e0a5000.webp&quot; 
    onclick=&quot;full_screen(&#x27;vim_arrows.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;vim_arrows.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;То есть две стрелки находятся на одном указательном пальце, и мизинец не нажимает ни одну.&lt;&#x2F;p&gt;
&lt;p&gt;Насколько мне известно, такие стрелки появились по историческим причинам, но их расположение оправдывают именно тем, что там не используется мизинец, так что будем считать что они такие именно из-за мизинца.&lt;&#x2F;p&gt;
&lt;p&gt;Я считаю что неудобно будет каждый раз смещать указательный вбок, когда нужно передвинуться влево. А влево-вниз вообще боль наверное в таких стрелках для десятипала.&lt;&#x2F;p&gt;
&lt;p&gt;Мизинцы могут быть сильными, нужно лишь немного практики. Я тоже сначала думал, что эти пальцы неспособны ничего нажимать.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Поэтому у меня стрелки полностью на домашней позиции, и мизинец в стрелках используется.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h4 id=&quot;poriadok-strelok&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poriadok-strelok&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Порядок стрелок&lt;&#x2F;h4&gt;
&lt;p&gt;Далее возможно очень много разных вариантов плоского расположения стрелок, которые не противоречат ни одному из пунктов выше:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;←↓↑→&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;←↑↓→&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;←↑→↓&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;←→↓↑&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;итд.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Среди них нету какого-то особого различия, тут уже каждый выбирает по своему вкусу. Я же выбрал &lt;code&gt;←↑↓→&lt;&#x2F;code&gt; для правой руки, и у меня есть пара логических принципов, которым я обосновываю этот выбор.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Я считаю что кнопка вверх должна быть на среднем пальце.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Эта стрелка должна быть именно на нём, так как он очень привык к этой кнопке во времена &lt;kbd&gt;WASD&lt;&#x2F;kbd&gt;, или во времена стрелок на СК.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;У меня перемещение вбок располагается по краям, а перемещение вверх-вниз в центре.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Просто потому что перемещение вбок как-то интуитивней, когда оно по бокам.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;strelki-na-levoi-ruke-vmesto-pravoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#strelki-na-levoi-ruke-vmesto-pravoi&quot;&gt;#&lt;sup&gt;4&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Стрелки на левой руке, вместо правой&lt;&#x2F;h4&gt;
&lt;p&gt;И последнее что нужно сказать про стрелки — это как их разместить на левой руке. Они у меня на ней выглядят так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;820403f42371f90900.webp&quot; 
    onclick=&quot;full_screen(&#x27;red_arrows.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;red_arrows.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;До покупки мунляндера я больше 4 лет печатал со стрелками на правой руке, и тут я переместил их на левую руку, наверное мне было сложно переучиваться? Первое время да, у меня эти стрелки на подкорке уже лежали, а тут они неожиданно разместились на левую руку. Но в целом привык довольно быстро. Это тоже проще переучивания на перестановку букв.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Я разместил стрелки на левую руку для того, чтобы при использовании мыши я мог использовать стрелки. Но, как потом оказалось, на самом деле не так часто это пригождается, и в целом я бы мог и не переучиваться. Так что их нахождение именно на левой руке не так важно. Зато теперь я могу перематывать видео одной рукой, и в редакторах использовать стрелки для перемещения на одну единицу длины.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;У меня стрелки на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;zelionyi-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zelionyi-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Зелёный слой&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1fe5680432af0ba600.webp&quot; 
    onclick=&quot;full_screen(&#x27;green.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;green.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Этот слой содержит всё что не поместилось в красном, и всё ещё может быть полезно.&lt;&#x2F;p&gt;
&lt;p&gt;По мелочёвке:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Кнопка &lt;kbd&gt;RESET&lt;&#x2F;kbd&gt; — после её нажатия клавиатура входит в режим, при котором можно залить новую прошивку. Нажать эту клавишу удобнее, чем искать иголочку и тыкать её в маленькую дырочку, как это обычно делается на других устройствах.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+1&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl+2&lt;&#x2F;kbd&gt; — переместиться в первую группу вкладок или на вторую в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+Shift+P&lt;&#x2F;kbd&gt; — в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt; и &lt;code&gt;VSCode&lt;&#x2F;code&gt; частая комбинация для чего-то полезного.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Alt+Pritn Screen&lt;&#x2F;kbd&gt; — клавиша для снятия скриншота окна.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zvuk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zvuk&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Звук&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;752c364682b43ed400.webp&quot; 
    onclick=&quot;full_screen(&#x27;green_sound.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;green_sound.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это клавиши управления звуком и текущим треком. Они обязательно должны располагаться на левой руке, вместе со слоефикатором их включающим, потому что во время видео или фильмов настройка звука очень часто используется.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Клавиши управления звуком должны быть на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;khotkei-dlia-brauzera&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#khotkei-dlia-brauzera&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Хоткеи для браузера&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d558e807f656884300.webp&quot; 
    onclick=&quot;full_screen(&#x27;green_browser.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;green_browser.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так получилось, что не только браузер имеет вкладки, но ещё и текстовые редакторы, терминалы, и много чего ещё. Поэтому хоткеи для управления вкладками могут быть актуальны среди множества программ. Данный набор хоткеев как раз и позволяет управлять вкладками независимо для множества программ. Причём для тех программ, где какие-то хоткеи работают не так, я настраиваю чтобы они работали именно так. Например, в &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt; я сделал, чтобы &lt;kbd&gt;Ctrl+T&lt;&#x2F;kbd&gt; открывало новую вкладку.&lt;&#x2F;p&gt;
&lt;p&gt;Список хоткеев:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+W&lt;&#x2F;kbd&gt; — закрыть текущую вкладку.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+T&lt;&#x2F;kbd&gt; — открыть новую вкладку.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+Shift+T&lt;&#x2F;kbd&gt; — восстановить предыдущую.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;F5&lt;&#x2F;kbd&gt; — перезагрузить страницу.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+F5&lt;&#x2F;kbd&gt; — перезагрузить страницу с очисткой кэша.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;F6&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl+C&lt;&#x2F;kbd&gt; — перейти в адресную строку и скопировать адрес. Так как ссылки копируются постоянно, то это очень удобная вещь.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Про хоткеи для перемещения по вкладкам вправо-влево хочется остановиться поподробнее. Есть хоткеи &lt;kbd&gt;Ctrl+Tab&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+Shift+Tab&lt;&#x2F;kbd&gt;, которые обычно переключает на вкладку вправо и влево соответственно. Но некоторые, особо одарённые программы, считают что эти хоткеи должны переключать вкладки в порядке их недавнего использования! Порядок недавнего использования это настолько же отвратительная и сложная в использовании вещь как &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt;, так что от него надо отказываться, и уходить на безусловное перемещение по вкладкам.&lt;&#x2F;p&gt;
&lt;p&gt;Вкладки это не программы, их может быть очень много, и часто ты не сидишь на одних и тех же сайтах в браузере, так что тут безусловное перемещение во вкладку 1, во вкладку 2 не сработает. Зато сработает перемещение вправо-влево. Оно тоже безусловное, но тратит мыслетопливо из-за потребности смотреть на экран, зато оно куда проще в использовании, чем переключение по недавнему порядку использования.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition blue-bg blue-border-left&quot;&gt;
&lt;div class=&quot;admonition-title blue-bg blue-border&quot;&gt;🛋️ История&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;В своей первой раскладке для эргодокса, на зелёном слое у меня были кнопки для безусловного перемещения в 1, 2, 3, 4, 5 вкладку через &lt;kbd&gt;Ctrl+Цифра&lt;&#x2F;kbd&gt;, я их разместил, подумав что буду пользоваться, но в итоге так никогда и не воспользовался. И в новых итерациях их удалил. Это к слову о том, что не надо оверинжинирить.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Однажды я обнаружил, что везде работают хоткеи &lt;kbd&gt;Ctrl+Pg Up&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+Pg Down&lt;&#x2F;kbd&gt; для перемещения по вкладкам влево и вправо соответственно, поэтому советую всем использовать именно их вместо &lt;kbd&gt;Ctrl+Tab&lt;&#x2F;kbd&gt; и &lt;kbd&gt;Ctrl+Shift+Tab&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;На отдельный слой должны быть хоткеи для управления вкладками.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h3 id=&quot;upravlenie-mysh-iu&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#upravlenie-mysh-iu&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Управление мышью&lt;&#x2F;h3&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;a961a791786c767000.webp&quot; 
    onclick=&quot;full_screen(&#x27;green_mouse.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;green_mouse.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Важная фича программируемых клавиатур — с них можно управлять мышью! Некоторые даже используют это на полном серьёзе, чтобы максимизировать время использования клавиатуры. Это жёсткие чуваки, я так не могу, мне проще сместить руку.&lt;&#x2F;p&gt;
&lt;p&gt;На этом слое с мышью видна вся прелесть моего принципа с плоскими стрелками. С подходом в форме перевёрнутой буквы Т и клавиатуры не хватит, чтобы все эти 4 вида стрелок разместить.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Плоские стрелки божественны.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Клавиши для обычного управления мышью ускоряют мышь в зависимости от долготы нажатия, за счёт чего, если приноровиться, можно потенциально очень умело управляться мышью.&lt;&#x2F;p&gt;
&lt;p&gt;Так же у меня есть отдельные клавиши для передвижения мыши ровно на 1 пиксель. Это супер-удобно во всяких графических редакторах. Жаль что у меня все эти клавиши находятся на правой руке, а не на левой, чтобы их можно было использоваться совместно с мышью (да, клавиши для мыши совместно с мышью — понимаю абсурдность).&lt;&#x2F;p&gt;
&lt;p&gt;Ещё для симметрии с клавишами на 1 пиксель есть клавиши на 10 пикселей.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению клавиши для 1 и 10 пикселей не очень юзабельны, потому что нету фичи автоповтора, которую я описывал в секции про 5 стрелок. Если бы такая фича была, то эти клавиши были бы реально удобны.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё очень удобны клавиши для горизонтального и вертикального скроллинга, их не надо вертеть как чёртово колесо, а можно просто зажать. Жаль опять же, что я не могу их использовать на левой руке.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще, я этим слоем для мыши никогда не пользовался как раз за счёт того что он не на левой руке, так что надо перепроектировать раскладку, добавить ещё один слоефикатор и поместить их на левую руку, и сделать эту фичу автоповтора. И это пример когда я сделал оверинжиниринг.&lt;&#x2F;p&gt;
&lt;p&gt;Тут кстати становится снова актуально то что я переучился стрелкам на левой руке, ибо мне будет удобно использовать все эти мышиные клавиши на левой руке.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Клавиши для управления мышью, которые потенциально призваны заменить мышь, могут быть полезны при использовании мыши, поэтому должны находиться на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;fioletovyi-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fioletovyi-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Фиолетовый слой&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f13231d3bd5863cf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;violet.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;violet.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Как я уже рассказывал, я отказался от &lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; из-за слишком сильного потребления мыслетоплива и постоянных ошибок. И я перешёл на безусловный переход. В этом слое находятся как раз клавиши для него.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; не должен использоваться. Должен быть отдельный слой для клавиш, которые безусловно переключают в наиболее частые программы.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition gray-bg gray-border-left&quot;&gt;
&lt;div class=&quot;admonition-title gray-bg gray-border&quot;&gt;🛠 Термин&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;&lt;strong&gt;Безусловный переход в окно&lt;&#x2F;strong&gt; — это когда я нажимаю хоткей для включения Sublime, и независимо от истории посещения окон, у меня открывается Sublime.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;На Windows такое возможно сделать, если в панели программ расположить закреплённые программы в определённом порядке. Тогда нажатие &lt;kbd&gt;Win+1&lt;&#x2F;kbd&gt; будет включать первую программу в этом списке и так далее. На Ubuntu та же самая история.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;335&quot;
    height=&quot;44&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;2e3722455128b7fa00.webp&quot; 
    onclick=&quot;full_screen(&#x27;windows.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;windows.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Но на Linux я предпочитаю использовать для безусловного перехода программу &lt;code&gt;jumpapp&lt;&#x2F;code&gt;. Более подробно можно об этом почитать в &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;dots#gnome&quot;&gt;dots#gnome&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Данный слой должен размещаться на левой руке, вместе со своим слоефикатором, потому что это невероятно часто пригождается с мышью.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Слой с безусловным переходом в программы должен быть на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Так же я добавил хоткеи для:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Закрытия окна&lt;&#x2F;li&gt;
&lt;li&gt;Перехода на папку вверх в проводнике (&lt;kbd&gt;Alt + Up&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Переименования выделенного файла (&lt;kbd&gt;F2&lt;&#x2F;kbd&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Безусловного перемещения на воркспейсы 1, 2, 3. Хотя сейчас понимаю, что этими сочетания я не пользуюсь, и их можно убрать.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Видно, что у меня тут набор хоткеев довольно прост. Хотя казалось, такой замороченный человек как я должен пользоваться каким-нибудь тайловым менеджером, или хотя бы иметь побольше хоткеев для управления окон. Но нет, я по большей части для остального управления окнами использую мышь, благо на &lt;a href=&quot;https:&#x2F;&#x2F;pop.system76.com&quot;&gt;Pop!_OS&lt;&#x2F;a&gt; это довольно удобно.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;kak-ia-ne-osilil-i3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-ia-ne-osilil-i3&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как я не осилил i3&lt;&#x2F;h3&gt;
&lt;p&gt;i3 — это такая оболочка (более правильно: оконный менеджер), которая управляет окнами в общем смысле: их перемещением, открытием, закрытием. И она позволяет размещать окна таким образом, чтобы они касались друг друга по краям — это называется тайлинг. Более подробно на &lt;a href=&quot;https:&#x2F;&#x2F;i3wm.org&quot;&gt;официальном сайте&lt;&#x2F;a&gt; или в &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;j1I63wGcvU4&quot;&gt;видео&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Я давно слышал об этой программе и мне советовали попробовать. Как-то раз я решил перейти на этот i3, установил себе линукс рядом с виндой, поставил его туда, настроил идеальную раскладку для i3, и начал пользоваться. Вот такую раскладку я тогда спроектировал:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;505&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8b41e8048d4c1bdd00.webp&quot; 
    onclick=&quot;full_screen(&#x27;i3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;i3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.6&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&#x2F;#&#x2F;gists&#x2F;eb7b88463f8c778d151f423f6b184c28&quot;&gt;Эта раскладка на KLE&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Казалось бы, я так всё продумал, все хоткеи настроил.&lt;&#x2F;p&gt;
&lt;p&gt;А потом оказалось, что я совсем не люблю, когда окно телеги разворачивается на весь экран, или вообще на половину экрана. Я люблю когда телега висит в виде мелкого окошка, где-то посреди экрана.&lt;&#x2F;p&gt;
&lt;p&gt;А этот i3 ещё всякие мелкие окошки настроек открывает на половину экрана. И мне это дико не понравилось. Плюс, я тратил слишком много мыслетоплива на то, чтобы эти хоткеи освоить и быстро выравнивать окно как нужно.&lt;&#x2F;p&gt;
&lt;p&gt;В общем всё свелось к тому, что я перестал запускать линукс, потому что было слишком сложно и больно этим пользоваться. И сидел на винде.&lt;&#x2F;p&gt;
&lt;p&gt;В итоге я переустановил линукс с этим тайловым менеджером и поставил Pop!_OS с графическим управлением. Всё-таки этот i3 не для меня, винда меня испортила.&lt;&#x2F;p&gt;
&lt;p&gt;И тут видно, что принцип про то что не надо делать оверинжиниринг раскладки работает во всей красе.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition orange-bg orange-border-left&quot;&gt;
&lt;div class=&quot;admonition-title orange-bg orange-border&quot;&gt;👀 Обратите внимание&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Эта история говорит о том, что если заставить себя адаптироваться к слишком большому числу изменений, то в итоге всё придёт к тому, что ты это бросишь.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому, если вы собираетесь себе покупать правильную клавиатуру, то нужно начинать с малого. Сначала нужно научиться десятипалу на СК. Затем можно попробовать на СК ремапнуть пару клавиш, поставить &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; под большой палец, &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; на место &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;. А затем купить правильную клавиатуру и там потихоньку модифицировать раскладку.&lt;&#x2F;p&gt;
&lt;p&gt;Я знаю несколько примеров людей, которые купили себе эргодоксы и прочее, и не смогли на них пересесть, оставшись на СК.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;zhioltyi-sloi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zhioltyi-sloi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Жёлтый слой&lt;&#x2F;h2&gt;
&lt;p&gt;Это слой управления подсветкой, тут ничего интересного, просто вынес всё что меня когда-либо может заинтересовать подсветкой в один слой на всякий случай. Плюс есть кнопки для управления лэдами, чтобы поиграться, и чтобы где-то лежал пример кода как эти лэды активировать.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition green3-bg green3-border-left&quot;&gt;
&lt;div class=&quot;admonition-title green3-bg green3-border&quot;&gt;✨ Это красиво&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Зацените как я использовал эмодзи и символы чтобы обозначить различные виды анимации подсветки.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c52985d303a764a400.webp&quot; 
    onclick=&quot;full_screen(&#x27;yellow.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;yellow.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;sloi-dlia-igr&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sloi-dlia-igr&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Слой для игр&lt;&#x2F;h2&gt;
&lt;p&gt;Игры — это такая вещь, которая предполагает что у вас СК. А некоторые игры даже на дают возможности ремапить клавиши. Так что лучше для игр отдельно создать специальный слой где эта СК будет имитироваться. Для переписывания в чатиках можно придумать какие-нибудь клавиши, включающие нормальный слой.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Игры не должны влиять на мою раскладку, и моя раскладка не должна влиять на игры. Чтобы разделить эти два мира, я создаю отдельный слой для игр, имитирующий СК, и добавляющий свои удобства.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Я в игры практически не играю, поэтому слой у меня не идеально отточен.&lt;&#x2F;p&gt;
&lt;p&gt;Советую вам на все такие особые случаи создавать свои слои.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8d6a0a5e5c917d7000.webp&quot; 
    onclick=&quot;full_screen(&#x27;game.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;game.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Для разного вида программ, которые очень сильно переделывают использование клавиатуры, лучше содавать отдельные слои. Например, можно создать слой для фотошопа на левой руке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;sloi-na-sluchai-iadernoi-voiny&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sloi-na-sluchai-iadernoi-voiny&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Слой на случай ядерной войны&lt;&#x2F;h2&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;530&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;061e8b0dc4d7dbac00.webp&quot; 
    onclick=&quot;full_screen(&#x27;nuclear_war_case_layer.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;nuclear_war_case_layer.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Все бесполезные вещи, которые могут раз в жизни пригодиться я скидываю в слой на случай ядерной войны.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Слой с самым интересным названием хранит самые неинтересные клавиши. Тут находится то, что я намеренно выкинул отовсюду, и что не имеет особо смысла, но раз в жизни, в случае ядерной войны, может пригодиться.&lt;&#x2F;p&gt;
&lt;p&gt;А именно здесь находится:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Весь нумпад и его клавиши. Потому что некоторые программы работают исключительно на цифрах нумпада, и с точки зрения ОС цифры и стрелки на нумпаде отличаются от обычных цифр и стрелок.&lt;&#x2F;li&gt;
&lt;li&gt;Все модификаторы, даже правые.&lt;&#x2F;li&gt;
&lt;li&gt;Всякие бесполезные &lt;kbd&gt;Scroll Lock&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Pause Break&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Insert&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Menu&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Print Screen&lt;&#x2F;kbd&gt; для &lt;code&gt;0.1%&lt;&#x2F;code&gt; случаев когда необходимо сфотографировать весь экран.&lt;&#x2F;li&gt;
&lt;li&gt;Клавиши, которые задают каким хоткеем сейчас будет переключаться язык. Пожалуй это — единственные активно используемые клавиши в этом слою, ибо иногда я пользуюсь виндой, и клавиатуре надо об этом сказать.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Вообще паттерн такого слоя «на случай ядерной войны» — это удобный паттерн, и его можно иметь независимо от клавиатуры или типа личности. Туда удобно сбрасывать весь мусор.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h1 id=&quot;tekhnicheskie-detali&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tekhnicheskie-detali&quot;&gt;#&lt;&#x2F;a&gt;Технические детали&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;kak-ia-sdelal-etu-raskladku&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-ia-sdelal-etu-raskladku&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как я сделал эту раскладку&lt;&#x2F;h2&gt;
&lt;p&gt;Компания ZSA хороша тем, что она делает продукт не только для программистов, поэтому у них есть официальный визуальный конфигуратор раскладок для всех их клавиатур. В этом конфигураторе можно использовать множество фич QMK, можно там же печатать на тренажёре, и можно смотреть на другие раскладки. Называется этот конфигуратор &lt;a href=&quot;https:&#x2F;&#x2F;www.zsa.io&#x2F;oryx&#x2F;&quot;&gt;Oryx&lt;&#x2F;a&gt;. Вот как он выглядит:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;913&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;eee3d15fe8543ca300.webp&quot; 
    onclick=&quot;full_screen(&#x27;oryx.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;oryx.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Кстати, посмотрите на раскладку. Это стандартная раскладка, которую они ставят в клавы, и мне больно на неё смотреть!!! &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; на мизинцах; на больших пальцах всякая фигня типо Tab, Enter; а стрелки находятся на большом пальце; дубликаты &lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt;. &lt;strong&gt;АААААААААААААААААААААА!!!&lt;&#x2F;strong&gt; Вот поэтому никогда нельзя доверять предустановленным раскладкам на правильных клавиатурах, и вообще думать о них нельзя, надо сразу делать свою.&lt;&#x2F;p&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Не доверяй предустановленной раскладке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;В этом визуальном конфигураторе можно нажать снизу кнопочку, и скачать свою раскладку в виде уже готовой прошивки, и в виде исходного кода. Так как я программист, то для меня самое главное — исходный код.&lt;&#x2F;p&gt;
&lt;p&gt;Но вообще клавиатуры не только от этой компании можно настраивать в визуальном редакторе, ещё существует прошивка &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dhowland&#x2F;EasyAVR&quot;&gt;EasyAVR&lt;&#x2F;a&gt;, у QMK есть визуальный редактор, и вообще если погуглить, существует очень много способов сделать себе раскладку без программирования.&lt;&#x2F;p&gt;
&lt;p&gt;Но, конечно, раскладку моего уровня сложности, по-любому придётся программировать в каком-либо виде.&lt;&#x2F;p&gt;
&lt;p&gt;Я же скачал исходный код из визуального редактора, по нему узнал некоторые тонкости, почитал документацию по QMK, и начал писать собственные расширения.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;izobrazheniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#izobrazheniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Изображения&lt;&#x2F;h2&gt;
&lt;p&gt;Так как у меня раскладка представляется в виде кода, то я не могу всё время читать код, чтобы вспомнить что и где нажимается, нужно где-то держать визуальную версию того что я запрограммировал. И для этого отлично подходит сайт &lt;a href=&quot;http:&#x2F;&#x2F;www.keyboard-layout-editor.com&quot;&gt;Keyboard Layout Editor&lt;&#x2F;a&gt;. Но этот сайт делает немного некрасивые картинки, и имеет парочку багов, поэтому я взял его исходный код и немного модифицировал под себя. Результат этой модификации лежит по адресу: &lt;a href=&quot;https:&#x2F;&#x2F;kle.klava.org&quot;&gt;kle.klava.org&lt;&#x2F;a&gt;. Чем именно моя модификация отличается от оригинала можно &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;soft&#x2F;kle&quot;&gt;почитать на вики&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;После того как нарисовал картинки, нужно получить их в виде, собственно, картинки. И для этого можно сделать скриншот экрана. Но обычный скриншот экрана делать муторно, и он получается не с большим разрешением, поэтому я использую особую возможность снятия скриншотов в Firefox.&lt;&#x2F;p&gt;
&lt;p&gt;Для её использования сначала нужно открыть консоль (&lt;kbd&gt;Ctrl+Shift+K&lt;&#x2F;kbd&gt;), и ввести следующую команду, заменив &lt;code&gt;ИМЯ&lt;&#x2F;code&gt; на имя файла:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;:screenshot ИМЯ --selector &amp;#39;#keyboard-bg&amp;#39; --dpr 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--dpr 3&lt;&#x2F;code&gt; означает во сколько раз нужно увеличить картинку при создании скриншота, то есть в итоге этой команды получится картинка, которая имеет разрешение в 3 раза больше, чем то что сейчас находится на экране.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;--selector &#x27;#keyboard-bg&#x27;&lt;&#x2F;code&gt; — это возможность указывать какую именно часть страницы надо заскриншотить. Тут я выбираю самую важную часть, где нарисована раскладка.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;p&gt;Картинки раскладки лучше снимать в размершении повыше, чем они видны на экра7не, чтобы если что, можно было легко прочитать текст, и картинка выглядела графонисто на любом мониторе. И ещё это очень пригодится при распечатке.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;p&gt;Снимать таким образом огромные скриншоты — это сказка.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;soderzhanie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#soderzhanie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Содержание&lt;&#x2F;h2&gt;
&lt;p&gt;Вы заметили какое зачётное в этой статье содержание? Я тоже кайфую. Я его делал автоматически, и благодаря ему писать и понимать эту огроменную статью было намного проще. Так как в markdown нету стандартных инструментов для генерации содержания (а зря!), то я использую хаки, которые описаны &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;optozorax&#x2F;2501ed8cd9fce4c903f38298c3923b75&quot;&gt;здесь&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Тут моя небольшая модификация, которая позволяет заменить содержание в вашем файле одной консольной командой.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kod&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kod&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Код&lt;&#x2F;h2&gt;
&lt;p&gt;Во время написания прошивки для мунляндера, я подумал что неплохо бы сделать её очень качественной, чтобы другие люди тоже могли этим воспользоваться. А то во времена прошивки для эргодокса, даже мне было больно смотреть на собственный код.&lt;&#x2F;p&gt;
&lt;p&gt;Напоминаю, что прошивка написана для библиотеки QMK.&lt;&#x2F;p&gt;
&lt;p&gt;Благодаря этому я выделил три модуля, которые может переиспользовать любой в своей клавиатуре:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;arbitrary_keycode&quot;&gt;arbitrary_keycode&lt;&#x2F;a&gt; — для нажатия произвольного кейкода. Является зависимостью для &lt;code&gt;combo&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;combo&quot;&gt;combo&lt;&#x2F;a&gt; — модуль для задания аккордов, является намного более сильным, чем стандартные аккорды в QMK.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;lang_shift&quot;&gt;lang_shift&lt;&#x2F;a&gt; — модуль для задания альтернативных русской и английской раскладки, без модификации на стороне ОС.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Во всех этих трёх модулях я написал очень хорошую документацию, так что открывайте, читайте, поймёте принцип.&lt;&#x2F;p&gt;
&lt;p&gt;Так же ещё есть отдельные участки кода, которые отвечают за кастомные хоткеи, макросы, проигрывание музыки, управление подсветкой; но они не подходят для переиспользования, так что если вам интересно, то можно читать в этом репозитории на свой страх и риск.&lt;&#x2F;p&gt;
&lt;p&gt;Файл &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;moonlander&#x2F;blob&#x2F;master&#x2F;keymap.c&quot;&gt;keymap.c&lt;&#x2F;a&gt; мне очень нравится, так как там практически всё задано через массивы, а не через код.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-v-klaviaturu-zasunut-svoiu-bukvennuiu-i-prepinakovuiu-raskladku&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-v-klaviaturu-zasunut-svoiu-bukvennuiu-i-prepinakovuiu-raskladku&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как в клавиатуру засунуть свою буквенную и препинаковую раскладку&lt;&#x2F;h2&gt;
&lt;p&gt;Например, существует раскладка Дворак и Диктор, и хочется их засунуть в клавиатуру. В этом случае есть два пути:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Сделать так, чтобы клавиатура работала на любом компьтере со стандартными раскладками, без всякой настройки софта (так сделал я).&lt;&#x2F;li&gt;
&lt;li&gt;Главное чтобы работало максимально удобно на своём компе, количество настройки софта не важно.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Первый пункт плох тем, что требует умения хотя бы немного программировать или уметь собирать прошивку, хоть и для него можно использовать мой модуль &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;klavarog&#x2F;lang_shift&quot;&gt;lang_shift&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А второй пункт хорош тем, что для него особых знаний не нужно, и раскладку для клавиатуры можно делать в визуальном редакторе, например: EasyAVR. А затем сделать софтварную раскладку через &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;Microsoft_Keyboard_Layout_Creator&quot;&gt;MSKLC&lt;&#x2F;a&gt;, например. Ещё этот подход хорош тем, что можно засунуть всякие экзотические символы типо ёлочек или тире в раскладку без нажатия &lt;kbd&gt;AltGr&lt;&#x2F;kbd&gt;. Таким подходом пользуются Kanazei и Steve Key. Более подробно можно спросить у них в чате.&lt;&#x2F;p&gt;
&lt;p&gt;С таким подходом возможно сделать свою раскладку в визуальном конфигураторе, затем в другом визуальном конфигураторе софтварную раскладку, и получится очень крутая раскладка, и всё это без единой строчки кода.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;kak-proshit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-proshit&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как прошить&lt;&#x2F;h2&gt;
&lt;p&gt;Если вы попробуете скачать исходный код вашей раскладки, сделанной на Oryx, то она будет работать только с &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zsa&#x2F;qmk_firmware&quot;&gt;форком QMK от ZSA&lt;&#x2F;a&gt;. Конечно, можно использовать обычный QMK, но там вроде чего-то не хватает. Поэтому первым делом надо скачать этот форк (команды ниже не работают для винды).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;zsa&#x2F;qmk_firmware zsa_qmk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; zsa_qmk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;.&#x2F;util&#x2F;qmk_install.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule update
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Затем нужно создать символьную ссылку на папку с вашей раскладкой. Делать именно символьную ссылку нужно, чтобы не хранить свою раскладку где-то в дебрях этого форка QMK:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;home&#x2F;optozorax&#x2F;my&#x2F;moonlander &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;zsa_qmk&#x2F;keyboards&#x2F;moonlander&#x2F;keymaps&#x2F;optozorax
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Чтобы прошить, нужно внутри этого форка вызвать такую команду:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; moonlander:optozorax:flash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;nastroika-os-chtoby-moia-klaviatura-rabotala&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nastroika-os-chtoby-moia-klaviatura-rabotala&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Настройка ОС чтобы моя клавиатура работала&lt;&#x2F;h2&gt;
&lt;p&gt;Я отрывками говорил как именно я настраиваю ОС, чтобы моя раскладка адекватно работала в ней.&lt;&#x2F;p&gt;
&lt;p&gt;Критичное:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;В ОС должны быть стандартные раскладки для русского и английского языков: ЙЦУКЕН и QWERTY соответственно. Они должны переключаться одним из предусмотренных заранее способов.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Менее критичное:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Должны быть настроены клавиши &lt;kbd&gt;Win+12345678&lt;&#x2F;kbd&gt; для включения определённых программм.&lt;&#x2F;li&gt;
&lt;li&gt;Основной редактор текста — &lt;code&gt;Sublime Text 3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;В терминале копипаст должен быть на &lt;kbd&gt;Ctrl+C&lt;&#x2F;kbd&gt;, &lt;kbd&gt;Ctrl+V&lt;&#x2F;kbd&gt;, а завершение программы на &lt;kbd&gt;Ctrl+J&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;На Linux должен быть установлен &lt;code&gt;flameshot&lt;&#x2F;code&gt;, и настроен хоткей для запуска скриншота области.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Совсем некритичное:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Должна поддерживаться &lt;kbd&gt;Compose&lt;&#x2F;kbd&gt; клавиша, и она настроена на &lt;kbd&gt;Right Alt&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Прочие настройки программ, описанные в репозитории &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;dots&quot;&gt;dots&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Как видно, для самых критичных пунктов, моя раскладка требует немного настройки. Соответственно, если ваша раскладка будет не сложнее моей, то она будет требовать не больше.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zavershenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zavershenie&quot;&gt;#&lt;&#x2F;a&gt;Завершение&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;vyvody-iz-istorii&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvody-iz-istorii&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Выводы из истории&lt;&#x2F;h2&gt;
&lt;p&gt;Историю я привёл для общего развития, чтобы было понимание что за человек сидит на такой сложной раскладке, и как к такому вообще можно прийти. Так же из истории можно сделать некоторые полезные выводы:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Убедить человека в чём-то не так просто.&lt;&#x2F;li&gt;
&lt;li&gt;Печать на клавиатуре полезнее, масштабируемей, быстрей и удобнее записей на бумажке.&lt;&#x2F;li&gt;
&lt;li&gt;Крутую раскладку можно сделать даже на СК.&lt;&#x2F;li&gt;
&lt;li&gt;Учиться десятипалу сложно.&lt;&#x2F;li&gt;
&lt;li&gt;Лучший способ избавиться от подглядываний — переставить клавиши.&lt;&#x2F;li&gt;
&lt;li&gt;Лучший способ не нажимать клавиши не из своих зон — использовать правильную клавиатуру.&lt;&#x2F;li&gt;
&lt;li&gt;Скорость надо набирать на Клавогонках.&lt;&#x2F;li&gt;
&lt;li&gt;Слим-клавиатуры удобны для быстрого набора.&lt;&#x2F;li&gt;
&lt;li&gt;Всегда можно наскрести деньги на правильную клавиатуру.&lt;&#x2F;li&gt;
&lt;li&gt;Привыкать к прямым рядам легко.&lt;&#x2F;li&gt;
&lt;li&gt;Привыкать к высоким клавишам сложно.&lt;&#x2F;li&gt;
&lt;li&gt;На клавиатуре с прямыми рядами через 2 недели можно побить свой рекорд.&lt;&#x2F;li&gt;
&lt;li&gt;Буквенную раскладку можно собирать постепенно.&lt;&#x2F;li&gt;
&lt;li&gt;Аккорды не так страшны как кажется.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;skorost-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#skorost-1&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Скорость&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Не зависит от клавиатуры.&lt;&#x2F;li&gt;
&lt;li&gt;Скорость приятней любых свитчей.&lt;&#x2F;li&gt;
&lt;li&gt;Скорость раскрепощает мысль.&lt;&#x2F;li&gt;
&lt;li&gt;Тренироваться ради набора скорости тоже приятно.&lt;&#x2F;li&gt;
&lt;li&gt;С увеличением скорости растёт и безошибочность.&lt;&#x2F;li&gt;
&lt;li&gt;Печатать быстро без смещения кистей нельзя.&lt;&#x2F;li&gt;
&lt;li&gt;Скорость = автоматизм.&lt;&#x2F;li&gt;
&lt;li&gt;Скорость и слои не друзья.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;prostota-pereuchivaniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prostota-pereuchivaniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Простота переучивания&lt;&#x2F;h2&gt;
&lt;p&gt;Так как в области правильных клавиатур переучивание происходит постоянно, важно понимать насколько сложно оно происходит для разных вещей. В статье я высказывал в разных местах о том насколько мне было сложно, а здесь же всё будет собрано воедино.&lt;&#x2F;p&gt;
&lt;p&gt;В этом списке чем ниже, тем сложнее. Всё на основании моего личного опыта.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Переучиться на Ъ в аккорде.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на другое положение F-клавиш и прочих несимвольных клавиш.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на прямые ряды после СК.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на стрелки на левой руке, когда они были на правой.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на другое положение препинаков.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на высокие клавиши после слим-клавиатуры.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться после перестановки пары букв.&lt;&#x2F;li&gt;
&lt;li&gt;Переучиться на новую буквенную раскладку.&lt;&#x2F;li&gt;
&lt;li&gt;Научиться печатать на Кладенце.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;zachem-nuzhna-podsvetka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zachem-nuzhna-podsvetka&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Зачем нужна подсветка&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Для подсветки текущего слоя.&lt;&#x2F;li&gt;
&lt;li&gt;Для подсветки предыдущих нажатых клавиш.&lt;&#x2F;li&gt;
&lt;li&gt;Для показывания другим людям своих зон.&lt;&#x2F;li&gt;
&lt;li&gt;Для красоты и солидности.&lt;&#x2F;li&gt;
&lt;li&gt;Поиграться.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так-то от подсветки каждого символа можно и отказаться, если будет альтернатива для индикации слоя. Три цветных лампочки не вариант, уже опробовано на эргодоксе. А вот один RGB светодиод — тема.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;printsipy&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#printsipy&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Принципы&lt;&#x2F;h2&gt;
&lt;div class=&quot;admonition violet-bg violet-border-left&quot;&gt;
&lt;div class=&quot;admonition-title violet-bg violet-border&quot;&gt;📖 Принцип&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Отказываюсь от СК.&lt;&#x2F;li&gt;
&lt;li&gt;Пользователь раскладки владеет десятипалом.&lt;&#x2F;li&gt;
&lt;li&gt;Предпочитаю клавиатуры с цифрорядом.&lt;&#x2F;li&gt;
&lt;li&gt;Предпочитаю клавиатуру, где как минимум 3 клавиши на каждый тамб.&lt;&#x2F;li&gt;
&lt;li&gt;Предпочитаю клавиатуру, которая больше использует внешние тамбы, чем внутренние.&lt;&#x2F;li&gt;
&lt;li&gt;Кейкапы должны быть без надписей.&lt;&#x2F;li&gt;
&lt;li&gt;На моей клавиатуре печатаю только я.&lt;&#x2F;li&gt;
&lt;li&gt;На клавиатуре должна быть возможность сообщить о текущем слое.&lt;&#x2F;li&gt;
&lt;li&gt;Я выделяю зоны цветом.&lt;&#x2F;li&gt;
&lt;li&gt;Стараюсь размещать на левой руке как можно больше удобных для использования вместе с мышью вещей.&lt;&#x2F;li&gt;
&lt;li&gt;Стараюсь делать раскладку такой, чтобы она потребляла как можно меньше мыслетоплива.&lt;&#x2F;li&gt;
&lt;li&gt;Логика дороже трёх процентов.&lt;&#x2F;li&gt;
&lt;li&gt;У каждого своя раскладка.&lt;&#x2F;li&gt;
&lt;li&gt;Не надо оверинжинирить.&lt;&#x2F;li&gt;
&lt;li&gt;Долой модификаторы.&lt;&#x2F;li&gt;
&lt;li&gt;Долой правые модификаторы особенно.&lt;&#x2F;li&gt;
&lt;li&gt;Слой должен активироваться в режиме &lt;code&gt;TG&lt;&#x2F;code&gt; при нажатии обычного слоефикатора три раза.&lt;&#x2F;li&gt;
&lt;li&gt;Выключение слоя должно быть на месте клавиши &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Основные слоефикаторы должны быть на большом пальце.&lt;&#x2F;li&gt;
&lt;li&gt;Отдельная клавиша для переключения языка.&lt;&#x2F;li&gt;
&lt;li&gt;Я использую аккорды с двукнопиями.&lt;&#x2F;li&gt;
&lt;li&gt;Аккорды должны быть только на нажатие нескльких клавиш одним пальцем.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; должен быть один и на большом пальце.&lt;&#x2F;li&gt;
&lt;li&gt;Отдельная клавиша для залипающего одиночного &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; должен быть близко.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Delete&lt;&#x2F;kbd&gt; должен быть на левой руке.&lt;&#x2F;li&gt;
&lt;li&gt;Отдельная клавиша для &lt;kbd&gt;Ctrl+Backspace&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Отдельные клавиши для копипасты и выделения всего.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+Z&lt;&#x2F;kbd&gt; должен быть симметрично &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;На левой руке и в удобном месте должна быть клавиша для скриншота области.&lt;&#x2F;li&gt;
&lt;li&gt;Пробел должен быть один.&lt;&#x2F;li&gt;
&lt;li&gt;Запятая должна нажиматься без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а.&lt;&#x2F;li&gt;
&lt;li&gt;В первую очередь должна быть запятая с пробелом, а потом обычная запятая.&lt;&#x2F;li&gt;
&lt;li&gt;Базовые текстовые препинаки должны быть в одинаковых позициях для русского и английского языков.&lt;&#x2F;li&gt;
&lt;li&gt;Все препинаки должны нажиматься из любого языка.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;_&lt;&#x2F;code&gt; должен быть отделён от &lt;code&gt;-&lt;&#x2F;code&gt;, и обе клавиши должны нажиматься без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, и на себе не иметь других вещей, которые нажимаются с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;li&gt;
&lt;li&gt;Цифры нажимаются с зажатым &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом. Важно, чтобы самые частые цифры нажимались более сильными пальцами, а не мизинцами.&lt;&#x2F;li&gt;
&lt;li&gt;Я всегда пишу Ё.&lt;&#x2F;li&gt;
&lt;li&gt;Я не размещаю ни одну букву в слой.&lt;&#x2F;li&gt;
&lt;li&gt;F-клавиши в слою на месте цифр.&lt;&#x2F;li&gt;
&lt;li&gt;Новые скобочки я всегда набираю парой.&lt;&#x2F;li&gt;
&lt;li&gt;Символы не должны быть в слое из-за проблем синхронизации.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Home&lt;&#x2F;kbd&gt; и &lt;kbd&gt;End&lt;&#x2F;kbd&gt; должны использоваться.&lt;&#x2F;li&gt;
&lt;li&gt;На слою со стрелками не должны использоваться клавиши для копипасты для чего-то другого, они должны остаться собой.&lt;&#x2F;li&gt;
&lt;li&gt;Должен быть слоефикатор на левой руке, позволяющий нажимать стрелки одной рукой.&lt;&#x2F;li&gt;
&lt;li&gt;Стрелки должны быть в слою.&lt;&#x2F;li&gt;
&lt;li&gt;Должны быть отдельные стрелки с зажатым контролом.&lt;&#x2F;li&gt;
&lt;li&gt;Стрелки полностью на домашней позиции, и мизинец в стрелках используется.&lt;&#x2F;li&gt;
&lt;li&gt;Кнопка вверх должна быть на среднем пальце.&lt;&#x2F;li&gt;
&lt;li&gt;У меня перемещение вбок располагается по краям, а перемещение вверх-вниз в центре.&lt;&#x2F;li&gt;
&lt;li&gt;У меня стрелки на левой руке.&lt;&#x2F;li&gt;
&lt;li&gt;Клавиши управления звуком должны быть на левой руке.&lt;&#x2F;li&gt;
&lt;li&gt;Должны быть хоткеи для управления вкладками.&lt;&#x2F;li&gt;
&lt;li&gt;Клавиши для управления мышью должны быть на левой руке.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Alt+Tab&lt;&#x2F;kbd&gt; не должен использоваться. Должен быть отдельный слой для клавиш, которые безусловно переключают в наиболее частые программы.&lt;&#x2F;li&gt;
&lt;li&gt;Слой с безусловным переходом в программы должен быть на левой руке.&lt;&#x2F;li&gt;
&lt;li&gt;Отдельный слой для игр.&lt;&#x2F;li&gt;
&lt;li&gt;Слой на случай ядерной войны.&lt;&#x2F;li&gt;
&lt;li&gt;Не доверяй предустановленной раскладке.&lt;&#x2F;li&gt;
&lt;li&gt;Картинки раскладки лучше снимать в разрешении повыше, чем на мониторе.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;neadekvatnost-sk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#neadekvatnost-sk&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Неадекватность СК&lt;&#x2F;h2&gt;
&lt;div class=&quot;admonition red-bg red-border-left&quot;&gt;
&lt;div class=&quot;admonition-title red-bg red-border&quot;&gt;❌ Неадекватность СК&lt;&#x2F;div&gt;
&lt;div&gt;
&lt;ul&gt;
&lt;li&gt;Неиспользование слоёв.&lt;&#x2F;li&gt;
&lt;li&gt;Стандартные зоны болезненны для левой руки.&lt;&#x2F;li&gt;
&lt;li&gt;Неравномерное смещение рядов.&lt;&#x2F;li&gt;
&lt;li&gt;Много далёких клавиш.&lt;&#x2F;li&gt;
&lt;li&gt;Неиспользование большого пальца.&lt;&#x2F;li&gt;
&lt;li&gt;Кривая.&lt;&#x2F;li&gt;
&lt;li&gt;Правые модификаторы.&lt;&#x2F;li&gt;
&lt;li&gt;Нету кнопки для переключения языка.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ы на мизинцах, и их два. А должен быть один на большом пальце.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt; не нужен.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Backspace&lt;&#x2F;kbd&gt; очень далеко.&lt;&#x2F;li&gt;
&lt;li&gt;Пробел слишком большой.&lt;&#x2F;li&gt;
&lt;li&gt;ЙЦУКЕН сделан так, что большинство клавиш нажимают указательные.&lt;&#x2F;li&gt;
&lt;li&gt;Утащили Ё далеко!&lt;&#x2F;li&gt;
&lt;li&gt;Далёкие стрелки, по умолчанию их нету на домашней позиции.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;
&lt;h2 id=&quot;tsifroriad&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tsifroriad&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Цифроряд&lt;&#x2F;h2&gt;
&lt;p&gt;Зачем он нужен:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Я туда размещаю препинаки, не цифры! Препинаки нажимаются без &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;а, а цифры с &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;&#x27;ом.&lt;&#x2F;li&gt;
&lt;li&gt;За счёт его наличия минимизируются проблемы синхронизации из-за использования слоёв.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;blagodarnost&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#blagodarnost&quot;&gt;#&lt;&#x2F;a&gt;Благодарность&lt;&#x2F;h1&gt;
&lt;p&gt;Спасибо тебе, читатель, что дочитал до этого момента. Статья получилась очень большой, по классификации даже больше книга чем статья, так что спасибо что потратил время.&lt;&#x2F;p&gt;
&lt;p&gt;Если у тебя есть критика или предложения по данной статье, то можешь отписаться в секции комментариев где она опубликована (я буду их все читать), или стукнуться ко мне в личку в телеграме: &lt;a href=&quot;t.me&#x2F;optozorax&quot;&gt;@optozorax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Я хочу чтобы данная статья была как можно качественней, поэтому буду принимать попытки её улучшения после всех релизов.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;soobshchestvo&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#soobshchestvo&quot;&gt;#&lt;&#x2F;a&gt;Сообщество&lt;&#x2F;h1&gt;
&lt;p&gt;Я состою в сообществе любителей нестандартных клавиатур. Там собираются люди, которые проектируют новые клавиатуры, собирают их, придумывают раскладки, программируют их и всячески исследуют как ещё можно улучшить клавиатуру. Наше сообщество не для людей, которые любят СК, это не наша тема.&lt;&#x2F;p&gt;
&lt;p&gt;У нас есть &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;rsG2fgyxX7&quot;&gt;сервер в дискорде&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Так же у нас развивается вики: &lt;a href=&quot;http:&#x2F;&#x2F;klavarog.tk&#x2F;page&#x2F;home&quot;&gt;klavarog.tk&lt;&#x2F;a&gt;. Там есть ссылки на другие раскладки и другие статьи от нашего сообщества.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Один репозиторий = Один пост в блоге</title>
            <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/submodules-jekyll/</link>
            <guid>https://testzorax.github.io/p/submodules-jekyll/</guid>
            <description>&lt;h1 id=&quot;chto-ia-sdelal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-ia-sdelal&quot;&gt;#&lt;&#x2F;a&gt;Что я сделал?&lt;&#x2F;h1&gt;
&lt;p&gt;Я сделал возможность отображать &lt;code&gt;.md&lt;&#x2F;code&gt; файлы в своих репозиториях как посты в блоге &lt;code&gt;username.github.io&lt;&#x2F;code&gt;. При этом:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Данный блог написан на &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;, и автоматически компилится &lt;a href=&quot;https:&#x2F;&#x2F;pages.github.com&#x2F;&quot;&gt;GitHub Pages&lt;&#x2F;a&gt; в статический сайт.&lt;&#x2F;li&gt;
&lt;li&gt;В одном репозитории может быть множество &amp;quot;блогпостов&amp;quot;.&lt;&#x2F;li&gt;
&lt;li&gt;В &lt;code&gt;.md&lt;&#x2F;code&gt; файле с основным контентом не добавляется ничего лишнего. Все настройки отображения блогпоста (теги, дата, урл итд) производятся в соседнем &lt;code&gt;.md&lt;&#x2F;code&gt; файле под любым названием и в любом месте.&lt;&#x2F;li&gt;
&lt;li&gt;Не нужно тупо дублировать информацию благодаря использованию &lt;code&gt;git submodules&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Есть немножко костылей.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;Пример:&lt;&#x2F;em&gt; у меня имеется такой репозиторий: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;4D&quot;&gt;@optozorax&#x2F;4D&lt;&#x2F;a&gt;, и его &lt;code&gt;README.md&lt;&#x2F;code&gt; продублировано в моём блоге на этой странице: &lt;a href=&quot;https:&#x2F;&#x2F;optozorax.github.io&#x2F;4D&quot;&gt;&#x2F;4D&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Зачем я это сделал? Ну, мне в последнее время частенько приходят письма от Яндекса о том как они индексируют мой сайт, и даже полтора человека кликают на мой блог в поисковой выдаче. А у меня есть много репозиториев с крутыми ридмишками, которые могли бы очень хорошо гуглиться (4D например). Поэтому я решил сделать это таким образом. Плюс я очень давно хотел отделить статьи от блога, и вынести каждую статью в свою репошку, со своей историей и локальными файлами.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;submodules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#submodules&quot;&gt;#&lt;&#x2F;a&gt;Submodules&lt;&#x2F;h1&gt;
&lt;p&gt;Чтобы рассказать как я это сделал, сначала надо ввести вас в контекст.&lt;&#x2F;p&gt;
&lt;p&gt;В git есть такая интересная вещь под названием &lt;code&gt;submodules&lt;&#x2F;code&gt;. Воспользоваться ей можно так: &lt;code&gt;git submodule add &amp;lt;path-to-repository&amp;gt;&lt;&#x2F;code&gt;. С точки зрения вашей локальной копии она делает то же самое что и &lt;code&gt;git clone &amp;lt;path-to-repository&amp;gt;&lt;&#x2F;code&gt;, а с точки зрения git&#x27;а она добавляет особое отслеживание состояния данной склонированной папки. На удалённое хранилище вашего репозитория (eg Github) отправляется минимальная информация о том, что находится в этой папке: адрес к репозиторию и хэш коммита. В гитхабе это отображается папкой со стрелкой и ведёт на репозиторий куда ссылается данный сабмодуль:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;214&quot;
    height=&quot;47&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;47646a2d20bd938c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;submodule.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;submodule.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Довольно удобная фича для старых языков программирования без пакетных менеджеров.&lt;&#x2F;p&gt;
&lt;p&gt;Что хорошо, GitHub Pages перед компиляцией сайта на Jekyll сначала клонирует локально себе все сабмодули, так что мы можем использовать это.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати обновить каждый репозиторий, который включён таким образом очень легко: &lt;code&gt;git submodule foreach git pull origin master&lt;&#x2F;code&gt;. Вообще после &lt;code&gt;foreach&lt;&#x2F;code&gt; выполняется любая bash-команда, так что так можно много чего делать массово.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;step-to-step&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#step-to-step&quot;&gt;#&lt;&#x2F;a&gt;Step-to-step&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;shag-0-nastroika-repozitoriia-kotoryi-budet-publikovat-sia-kak-stat-ia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-0-nastroika-repozitoriia-kotoryi-budet-publikovat-sia-kak-stat-ia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Шаг 0: настройка репозитория, который будет публиковаться как статья&lt;&#x2F;h2&gt;
&lt;p&gt;Необходимо в этом репозитории создать &lt;code&gt;blogpost.md&lt;&#x2F;code&gt; файл (назвать можно как угодно), со следующим содержимым:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;md&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-md &quot;&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span style=&quot;background-color:#234561;font-style:italic;color:#f8f8f8;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;layout: post
&lt;&#x2F;span&gt;&lt;span&gt;title: &amp;quot;4D&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;tags: [4D, систематизация]
&lt;&#x2F;span&gt;&lt;span&gt;permalink: 4D
&lt;&#x2F;span&gt;&lt;span&gt;description: &amp;quot;Сборник информации о четвёртом измерении. Если вы изучете всё что здесь находится, то сможете понять четвёртое измерение.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;image: submodules&#x2F;4D&#x2F;img&#x2F;inside4D_2.png
&lt;&#x2F;span&gt;&lt;span&gt;submodule: true
&lt;&#x2F;span&gt;&lt;span&gt;thisname: submodules&#x2F;4D
&lt;&#x2F;span&gt;&lt;span&gt;date: 2020-12-15
&lt;&#x2F;span&gt;&lt;span&gt;github: https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;4D
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b82812;&quot;&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% include_relative README.md %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Тэги здесь должны перечисляться не через пробелы, как это делается в обычных постах, а внутри квадратных скобок и через запятые. Почему-то это работает только так, я хз почему.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;image&lt;&#x2F;code&gt; - это моя опция, позволяющая добавлять к посту картинку на главной странице. Здесь я указываю картинку из текущего репозитория, так что к ней надо прописать абсолютный путь (y jekyll огроооомные проблемы с локальными путями, но об этом потом). Видно, что текущий репозиторий называется 4D и он будет храниться по адресу &lt;code&gt;submodules&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;submodule: true&lt;&#x2F;code&gt; - это опция, показывающая что данная страница сделана через механизм описываемый в этой статье. Далее этот флаг будет использоваться чтобы определить что данную страницу надо отобразить вместе с остальными блогпостами.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;thisname: submodules&#x2F;4D&lt;&#x2F;code&gt; - надо указать абсолютный путь к текущей папке внутри репозитория &lt;code&gt;username.github.io&lt;&#x2F;code&gt;. Это нужно для костыльного фикса картинок, но об этом позже.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;date&lt;&#x2F;code&gt; - дата &amp;quot;публикации&amp;quot; данного блогпоста.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;github&lt;&#x2F;code&gt; - показывает кнопочку &lt;code&gt;Эта страница на github&lt;&#x2F;code&gt;, которая перенаправляет на страницу репозитория где лежит данная ридмишка.&lt;&#x2F;li&gt;
&lt;li&gt;Остальные параметры редактируются так же как и для обычного блогпоста.&lt;&#x2F;li&gt;
&lt;li&gt;Контент в данном файле выглядит как &lt;code&gt;{% include_relative README.md %}&lt;&#x2F;code&gt;, потому что к счастью (или к сожалению) внутри &lt;code&gt;.md&lt;&#x2F;code&gt; файлов работает liquid синтаксис (язык (?), окружение (?) используемое jekyll). И данная команда позволяет заинклюдить нужный нам файл. Вместо &lt;code&gt;README.md&lt;&#x2F;code&gt; можно указать свой файл.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;shag-1-nastroika-submodules&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-1-nastroika-submodules&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;ШАГ 1: настройка submodules&lt;&#x2F;h2&gt;
&lt;p&gt;Заходим в репозиторий блога &lt;code&gt;username.github.io&lt;&#x2F;code&gt;, и создаём в корне папку &lt;code&gt;submodules&lt;&#x2F;code&gt;. Внутри этой папки добавляем все репозитории, которые мы настроили как в шаге 0.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще, даже без шага 0 все &lt;code&gt;.md&lt;&#x2F;code&gt; страницы на этом этапе уже как-то, где-то бы отображались. Шаг 0 просто позволяет это всё настроить и привести к нормальному виду.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь главный вопрос: почему мы создаём отдельную папку &lt;code&gt;submodules&lt;&#x2F;code&gt;, а не делаем это в папке &lt;code&gt;_posts&lt;&#x2F;code&gt;? Ну, проблема в том, что в итоговый статический сайт из папки &lt;code&gt;_posts&lt;&#x2F;code&gt; попадают только &lt;code&gt;.md&lt;&#x2F;code&gt; файлы, которые содержат &lt;a href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;docs&#x2F;front-matter&#x2F;&quot;&gt;Front Matter&lt;&#x2F;a&gt; - эту настройку вначале &lt;code&gt;.md&lt;&#x2F;code&gt; файла.&lt;&#x2F;p&gt;
&lt;p&gt;Соответственно никакие картинки не попадут в итоговый файл. Плюс, у jekyll большие проблемы с локальными путями. Если мы в папку &lt;code&gt;_posts&lt;&#x2F;code&gt; положим папку, внутри которой лежат картинки и &lt;code&gt;.md&lt;&#x2F;code&gt; файл, и этот файл ссылается на картинки следующим образом: &lt;code&gt;![](.&#x2F;my_image.png)&lt;&#x2F;code&gt;, то jekyll скажет что он не знает такой картинки и нифига не нарисует. Поэтому во всех туториалах к jekyll говорят что надо создавать папку &lt;code&gt;assets&lt;&#x2F;code&gt;, где ты хранишь все картинки для всех постов. И моё ИМХО: это отвратительное и очень неудобное решение. Картинки удобно хранить локально. Каждый пост удобно хранить локально. Жаль что авторы jekyll решили захардкодить такую архитектуру.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё одна важная деталь: папки, начинающиеся с &lt;code&gt;_&lt;&#x2F;code&gt; не попадают в итоговый статический сайт, а папки без него вначале, попадают. Благодаря этому папка &lt;code&gt;assets&lt;&#x2F;code&gt; работает, а картинки внутри &lt;code&gt;_posts&lt;&#x2F;code&gt; - нет.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому мы и создаём папку &lt;code&gt;submodules&lt;&#x2F;code&gt;, чтобы она полностью вошла в итоговый статический сайт, чтобы мы могли использовать картинки.&lt;&#x2F;p&gt;
&lt;p&gt;Но как будут работать картинки, если в репозиториях мы указываем к ним локальный адрес: &lt;code&gt;&#x2F;img&#x2F;1.png&lt;&#x2F;code&gt;, а надо абсолютный: &lt;code&gt;&#x2F;submodules&#x2F;4D&#x2F;img&#x2F;1.png&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;А об этом следующий шаг и первый костыль...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shag-2-zastavliaem-kartinki-rabotat&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-2-zastavliaem-kartinki-rabotat&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Шаг 2: заставляем картинки работать&lt;&#x2F;h2&gt;
&lt;p&gt;Открываем файл &lt;code&gt;_post.html&lt;&#x2F;code&gt; и чему-то, что оборачивает контент, задаём айдишник &lt;code&gt;content&lt;&#x2F;code&gt;. В моём случае было так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;- &amp;lt;div itemprop=&amp;quot;articleBody&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ &amp;lt;div itemprop=&amp;quot;articleBody&amp;quot; id=&amp;quot;content&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Затем после этого &lt;code&gt;div&lt;&#x2F;code&gt; вставляем такой js код:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% if page.submodule %}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6486ab;&quot;&gt;&amp;lt;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#c23f31;&quot;&gt;fixer&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.trying_to_fix &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#b3933a;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.src);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;quot;[SUBMODULES FIXER] Trying to fix img: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.src &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;quot;{{ page.thisname }}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.pathname;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.trying_to_fix &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#b3933a;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#a2a001;&quot;&gt;console&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#b39f04;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;quot;[SUBMODULES FIXER] Unable to fix: &amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.src);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;      };
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    };
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;collection &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#a2a001;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;quot;content&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;getElementsByTagName&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;quot;img&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.length; &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;item &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#668f14;&quot;&gt;var &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;= new &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;URL&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.src);
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.host &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#a2a001;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.location.host) {
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#d07711;&quot;&gt;&amp;#39;error&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;fixer&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;()(&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#5597d6;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#1f1f1f;&quot;&gt;  }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6486ab;&quot;&gt;&amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Во-первых данный код инклюдится только если данная страница устроена по механизму сабмодулей, тут нам пригождается &lt;code&gt;submodule: true&lt;&#x2F;code&gt;, что мы указали:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;{% if page.submodule %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Во-вторых, данный код перебирает все картинки, и в случае неудачи пытается добавить к ним абсолютный адрес. Тут нам пригождается &lt;code&gt;thisname: submodules&#x2F;4D&lt;&#x2F;code&gt; что мы указывали ранее.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;img.src = &amp;quot;{{ page.thisname }}&amp;quot; + url.pathname;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Хотел бы я картинки фиксить статически, но что поделать, нету доступа к коду jekyll. Захардкожено в нём всё. Поэтому фиксим такими костылями на фронтенде. Работает вполне незаметно, так что вроде даже норм.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shag-3-otobrazhaem-eti-stranitsy-v-toi-zhe-lente-chto-i-obychnye-blogposty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-3-otobrazhaem-eti-stranitsy-v-toi-zhe-lente-chto-i-obychnye-blogposty&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Шаг 3: отображаем эти страницы в той же ленте что и обычные блогпосты&lt;&#x2F;h2&gt;
&lt;p&gt;Так, значит на данный момент наши страницы существуют, но они не отображаются в ленте на домашней странице. Исправляем это, редактируя файл &lt;code&gt;_layouts&#x2F;home.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;- {% for post in site.posts %}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ {% assign pages_posts = site.pages | where: &amp;quot;submodule&amp;quot;, true %}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ {% assign concatted_posts = site.posts | concat: pages_posts %}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ {% assign result_posts = concatted_posts | sort_natural: &amp;quot;date&amp;quot; | reverse %}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ {% for post in result_posts %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;По сути тут мы просто заменяем обращение к постам на обращение к постам, сконкатенированным с нашими страницами &lt;code&gt;submodule: true&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, тут есть такой код как &lt;code&gt;sort_natural: &amp;quot;date&amp;quot;&lt;&#x2F;code&gt;. Он сортирует посты в хронологическом порядке, используя сравнение строк дат (обычный &lt;code&gt;sort&lt;&#x2F;code&gt; здесь не будет работать). Для того чтобы это работало, надо ещё кое-что сделать...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shag-4-zastavliaem-stranitsy-sortirovat-sia-v-khronologicheskom-poriadke&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-4-zastavliaem-stranitsy-sortirovat-sia-v-khronologicheskom-poriadke&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Шаг 4: заставляем страницы сортироваться в хронологическом порядке&lt;&#x2F;h2&gt;
&lt;p&gt;Вспоминаем что на домашней странице у нас есть такая фича как:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;✨⭐️ Сортировка по дате публикации ⭐️✨&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Кажется запахло жареными костылями.&lt;&#x2F;p&gt;
&lt;p&gt;Чтож. Скажу вам, что в liquid нету возможности сортировать по датам (простым &lt;code&gt;sort&lt;&#x2F;code&gt;), поэтому мы вставляем ещё один костыль: найдите где в настройках задаётся дата для всего блога, и поставьте там: &lt;code&gt;%Y-%M-%d&lt;&#x2F;code&gt;. Это чтобы дата отображалась в виде &lt;code&gt;YYYY-MM-DD&lt;&#x2F;code&gt;, чтобы при сортировке по строке, мы могли получить правильный хронологический порядок. Это работает, потому что при задании этой опции, где-то внутри jekyll для каждой страницы происходит преобразование даты в строку по этому формату...&lt;&#x2F;p&gt;
&lt;p&gt;У меня надо было поменять в &lt;code&gt;_config.yml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;cayman-blog&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;date_format&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;%Y-%M-%d&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Затем во всех местах где происходит обращение к этой дате по умолчанию &lt;code&gt;site.cayman-blog.date_format&lt;&#x2F;code&gt; замените на ту дату, которая у вас была до этого, и которая вам больше нравится. У меня надо было поменять лишь в двух местах:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;_layouts&#x2F;home.html&lt;&#x2F;code&gt;, &lt;code&gt;_layouts&#x2F;default.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;background-color:#6c1d15;color:#f8f8f8;&quot;&gt;- {% assign date_format = site.cayman-blog.date_format | default: &amp;quot;%b %-d, %Y&amp;quot; %}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#3b5a37;color:#f8f8f8;&quot;&gt;+ {% assign date_format = &amp;quot;%d %b %Y&amp;quot; %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;shag-5-fiksim-bagi-v-ostal-noi-chasti-bloga-u-menia-eto-tegi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#shag-5-fiksim-bagi-v-ostal-noi-chasti-bloga-u-menia-eto-tegi&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Шаг 5: фиксим баги в остальной части блога, у меня - это тэги&lt;&#x2F;h2&gt;
&lt;p&gt;Я пишу эту статью-инструкцию для своего блога, а я свой блог персонализировал, поэтому у меня вылилось ещё пара мест где пришлось фиксить всё и вся. Ну и плюс надо где-то вставить новые фичи, чтобы такие статьи по особому отображались.&lt;&#x2F;p&gt;
&lt;p&gt;Я вставил такой код в &lt;code&gt;_layouts&#x2F;default.html&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;{% if page.github %}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;a href=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;{{ page.github }}&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;class=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;btn&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;style=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#c5af75;&quot;&gt;margin&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#7f902a;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#ca7840;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#72ab00;&quot;&gt;px&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#b0b3ba14;color:#7f902a;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Эта страница на GitHub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f902a;&quot;&gt;&amp;lt;&#x2F;a&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;{% endif %}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Чтобы у меня на статьях, которые взяты с репозитория на гитхабе отображалась такая кнопка:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;336&quot;
    height=&quot;95&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0c95a0a6940f2f8200.webp&quot; 
    onclick=&quot;full_screen(&#x27;open-in-github.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;open-in-github.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Следующее место, которое у меня сломалось - это тэги. Я откуда-то из глубинок интернета стащил код, который генерит страницу с тегами: &lt;a href=&quot;&#x2F;tags&quot;&gt;&#x2F;tags&lt;&#x2F;a&gt;. Ну, чтобы её починить пришлось тупо написать много кода. Вставлять я все эти изменения я не буду, просто скажу что ВСЕ изменения что здесь описаны можно посмотреть в этом коммите: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optozorax.github.io&#x2F;commit&#x2F;f1efe22917146e9c53cd0b99c3efa3ed2bb3afb3&quot;&gt;@optozorax&#x2F;optozorax.github.io@f1efe22&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;В процессе я неоднократно обращался к этим двум страницам с документацией, может они тоже вам пригодятся:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;https:&#x2F;&#x2F;shopify.github.io&#x2F;liquid&#x2F;basics&#x2F;introduction&#x2F;&lt;&#x2F;li&gt;
&lt;li&gt;https:&#x2F;&#x2F;jekyllrb.com&#x2F;docs&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Во время написания этого кода я заметил, что весь этот синтаксис jekyll выглядит как какое-то обрезанное функциональное программирование. Там даже сложение пишется через псевдофункциональный стиль: &lt;code&gt;{% assign size = size | plus: 1 %}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Только к сожалению чего-то им не хватило чтобы привести это к полноценному функциональному коду, и в некоторых местах приходится вставлять for, и считать количество чего-то через мутабельную переменную 😑.&lt;&#x2F;p&gt;
&lt;p&gt;Так же хочется поругать сообщения об ошибках. Они ужасные, непонятно что, где и почему сломалось.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;konkretno-moi-blog&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#konkretno-moi-blog&quot;&gt;#&lt;&#x2F;a&gt;Конкретно мой блог&lt;&#x2F;h1&gt;
&lt;p&gt;Вот список статей, которые сделаны таким образом:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Раньше здесь был список статей сделанных таким образом, но теперь их нет, так как во-первых этот блог перехал на &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;zola&lt;&#x2F;a&gt;, а во-вторых я считаю такой подход плохим и просто скопировал все ридмишки в отдельное место вручную. Благо в золе можно для каждого поста иметь отдельную папку. Об этом будет будущая статья&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;!-- todo вставить ссылку на статью когда напишу её --&gt;
&lt;p&gt;Если вы их ещё не читали, то welcome!&lt;&#x2F;p&gt;
&lt;p&gt;Получил я этот список, кстати, довольно хитрым образом: =)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;{{ }}
&lt;&#x2F;span&gt;&lt;span&gt;{%- for item in site.pages -%}
&lt;&#x2F;span&gt;&lt;span&gt;{%- if item.submodule -%}
&lt;&#x2F;span&gt;&lt;span&gt;* [{{ item.title }}]({{ item.url }})
&lt;&#x2F;span&gt;&lt;span&gt;{{ }}
&lt;&#x2F;span&gt;&lt;span&gt;{%- endif -%}
&lt;&#x2F;span&gt;&lt;span&gt;{%- endfor -%}
&lt;&#x2F;span&gt;&lt;span&gt;{{ }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;vyvody&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvody&quot;&gt;#&lt;&#x2F;a&gt;Выводы&lt;&#x2F;h1&gt;
&lt;p&gt;Не используйте Jekyll только потому что он по умолчанию поддерживается GitHub Pages. Это движок с неправильной архитектурой организации блогпостов (нельзя сделать картинки локально к посту!!!!!1111), и с слабым языком &amp;quot;программирования&amp;quot; то ли функциональным, то ли императивным. Вместо этого публикуйте свой блог на отдельную ветку, которая будет отправляться на ваш &lt;code&gt;username.github.io&lt;&#x2F;code&gt; сразу html-ками. Используйте для их генерации любой удобный для вас движок. Вы, наверное, даже можете настроить чтобы html-ки сами билдились при пуше в репозиторий с исходным кодом блога через всякие бесплатные CI&#x2F;CD.&lt;&#x2F;p&gt;
&lt;p&gt;Я остаюсь на Jekyll, потому что уход на другой блог-движок займёт слишком много времени, а результат этой статьи я получил за один день.&lt;&#x2F;p&gt;
&lt;p&gt;Может быть этот пост вдохновит вас на своём блоге сделать всё аналогично через &lt;code&gt;git submodule&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Как записать перестановку в число</title>
            <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/permutation-into-number/</link>
            <guid>https://testzorax.github.io/p/permutation-into-number/</guid>
            <description>&lt;p&gt;Для предстоящей программки, где можно запускать обратимые клеточные автоматы я хочу сделать возможность задавать любые правила. Как я описывал в &lt;a href=&quot;&#x2F;critters&quot;&gt;посте про Critters&lt;&#x2F;a&gt;, любая перестановка массива от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;N&lt;&#x2F;code&gt; является корректным правилом. Значит должна быть возможность задавать перестановку в виде чего-то, что можно скопипастить и вставить в программу. &lt;&#x2F;p&gt;
&lt;p&gt;На &lt;a href=&quot;https:&#x2F;&#x2F;dmishin.github.io&#x2F;js-revca&#x2F;index.html&quot;&gt;одном сайте с обратимыми автоматами&lt;&#x2F;a&gt; перестановка задаётся так:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;0,2,8,3,1,5,6,7,4,9,10,11,12,13,14,15&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;По мне это довольно скучно и не очень удобно.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому я придумал, что это надо отображать одним числом, которое можно менять на &lt;code&gt;+1&lt;&#x2F;code&gt;, &lt;code&gt;-1&lt;&#x2F;code&gt;, и оно будет корректным. А затем вообще переводить это число в систему счисления с основанием &lt;code&gt;64&lt;&#x2F;code&gt;, чтобы оно было ещё короче.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, для массива из &lt;code&gt;N&lt;&#x2F;code&gt; различных элементов существует &lt;code&gt;N!&lt;&#x2F;code&gt; возможных вариантов перестановки. Значит можно как-то пронумеровать каждую перестановку одним числом. И если сделать так, то пользователь сможет играться, меняя числа, у него всегда будет получаться корректное правило. Если он, конечно, не задаст число больше &lt;code&gt;N!&lt;&#x2F;code&gt;, но не допустить такую ошибку довольно легко.&lt;&#x2F;p&gt;
&lt;p&gt;Итак, перестановка, показанная вначале может быть записана числом как:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;125023449600&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Или если же это число перевести в &lt;code&gt;64&lt;&#x2F;code&gt;-ричную систему счисления:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;08D+rQ1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Я сделал маленькую библиотечку чтобы вычислять все эти вещи: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;permutation_string&#x2F;blob&#x2F;master&#x2F;src&#x2F;lib.rs&quot;&gt;permutation_string&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Всеми этими тремя способами в моей программе можно будет задавать правила.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я хочу сделать GUI, чтобы правила можно было перетаскивать мышкой, и чтобы рядом писались все эти данные. Благо на &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fedor_games&#x2F;status&#x2F;1313119249146281986&quot;&gt;megaui&lt;&#x2F;a&gt; в &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;fedor_games&#x2F;status&#x2F;1313219605981204482&quot;&gt;macroquad&lt;&#x2F;a&gt; сделать это довольно легко. Не знал кстати что Immediate Mode GUI такой простой о_О. Какой-то диссонанс происходит после того как ты делал гуй на всех этих коллбэках. Попробуйте почитать код, и потыкаться.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь я расскажу как именно можно превратить перестановку в одно число.&lt;&#x2F;p&gt;
&lt;p&gt;Пусть у нас есть перестановка &lt;code&gt;А&lt;&#x2F;code&gt; из пяти элементов: &lt;code&gt;[4,1,2,3,0]&lt;&#x2F;code&gt;. Главное свойство любой перестановки - в ней все числа уникальны. Значит можно преобразовать этот массив в немного другой.&lt;&#x2F;p&gt;
&lt;p&gt;Пусть у нас ещё есть такой массив &lt;code&gt;Б&lt;&#x2F;code&gt;: &lt;code&gt;[0,1,2,3,4]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Далее берём нашу перестановку, и говорим по какому индексу находится первый её элемент? &lt;code&gt;4&lt;&#x2F;code&gt; находится по индексу &lt;code&gt;4&lt;&#x2F;code&gt;, так и записываем в массив &lt;code&gt;Ц&lt;&#x2F;code&gt;. Удаляем из массива &lt;code&gt;Б&lt;&#x2F;code&gt; и массива &lt;code&gt;А&lt;&#x2F;code&gt; число &lt;code&gt;4&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;А = [1,2,3,0]. Б = [0,1,2,3]. Ц = [4].&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Берём следующее число из &lt;code&gt;А&lt;&#x2F;code&gt;: &lt;code&gt;1&lt;&#x2F;code&gt;. По какому индексу находится? &lt;code&gt;1&lt;&#x2F;code&gt;. Так и записываем, удаляем из &lt;code&gt;Б&lt;&#x2F;code&gt; и &lt;code&gt;А&lt;&#x2F;code&gt; эти элементы. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;А = [2,3,0]. Б = [0,2,3]. Ц = [4,1].&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;И теперь начинается самое интересное. Берём следующее число из &lt;code&gt;А&lt;&#x2F;code&gt;: &lt;code&gt;2&lt;&#x2F;code&gt;. Оно находится по индексу &lt;code&gt;1&lt;&#x2F;code&gt;. Так и записываем, и удаляем из &lt;code&gt;А&lt;&#x2F;code&gt; и &lt;code&gt;Б&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;А = [3,0]. Б = [0,3]. Ц = [4,1,1].&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Ну и таким образом у нас в итоге получится: &lt;code&gt;А = []. Б = []. Ц = [4,1,1,1,0]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Что интересного в массиве &lt;code&gt;Ц&lt;&#x2F;code&gt;? У него в каждом следующем элементе максимальное возможное число уменьшается на &lt;code&gt;1&lt;&#x2F;code&gt;. То есть максимальный &lt;code&gt;Ц = [4,3,2,1,0]&lt;&#x2F;code&gt; возможен для перестановки: &lt;code&gt;[4,3,2,1,0]&lt;&#x2F;code&gt;. А &lt;code&gt;Ц = [0,0,0,0,0]&lt;&#x2F;code&gt; получается для перестановки &lt;code&gt;[0,1,2,3,4]&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Получается в &lt;code&gt;Ц&lt;&#x2F;code&gt; у нас хранятся цифры с необычной системой счисления, разной для каждого разряда. Ну и далее можно использовать &lt;code&gt;Ц&lt;&#x2F;code&gt; чтобы получить номер перестановки:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;0*0! + 1*1! + 1*2! + 1*3! + 4*4! = 105.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Получается это число находится в промежутке от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;N!-1&lt;&#x2F;code&gt;. Вот так мы и пронумеровали каждую перестановку.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати несложно модифицировать алгоритм, чтобы обрабатывать перестановки с повторяющимися элементами.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Говорят что я переизобрёл &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Factorial_number_system&quot;&gt;факториальную Систему Счисления&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Клеточный автомат на основе фильма «Довод»</title>
            <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/the-tenet-of-life/</link>
            <guid>https://testzorax.github.io/p/the-tenet-of-life/</guid>
            <description>&lt;p&gt;Сразу как у нас открыли кинотеатры, я побежал смотреть фильм &amp;quot;Довод&amp;quot; от Нолана. Мне очень понравилось. И весь дальнейший пост будет основан на концепции из этого фильма, так что если вы не любите спойлеры, то лучше не читайте дальше. Хотя, возможно, я рассказываю спойлеры только максимум на уровне трейлера, я хз, не смотрю трейлеры из-за ненависти к любым спойлерам. Короче, я вас предупредил.&lt;&#x2F;p&gt;
&lt;p&gt;Меня не особо интересуют всякие персонажи и прочие кожаные мешки, а вот концепции и идеи - очень даже. Поэтому мне ОООЧЕНЬ понравился этот фильм. И в &amp;quot;Доводе&amp;quot; как раз показывается ОЧЕНЬ интересная концепция, когда вещество, идущее обратно во времени, существует параллельно с веществом, идущим вперёд во времени. Это даже путешествием во времени назвать нельзя, потому что это не то читерство с гитовыми ветками, которое нам показывают в других фильмах, это очень органичная, сложная, противоречивая и интересная вещь. Сразу после фильма я задался единственным главным вопросом: возможно ли и как такое симулировать?! Интересует как минимум возможность симуляции такого через клеточный автомат, не то что физика. Как раз хорошим совпадением стало то, что я за пару месяцев до этого наконец &lt;a href=&quot;&#x2F;critters&quot;&gt;реализовал обратимый автомат Critters и немного его поисследовал&lt;&#x2F;a&gt;. Я сразу подумал, что обратимость Critters должна как-то помочь с концепцией Довода, но в первые дни я так и ничего не смог придумать.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я начал думать каким образом прошлое может знать о том каким будет будущее, так что наверняка обязательно придётся решать какую-то астрономически огромную систему уравнений, чтобы реализовать что-то подобное &amp;quot;Доводу&amp;quot;, поэтому концепция обычной пошаговой симуляции тут может быть неприменима.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я начал целенаправленно думать как это симулировать и наконец придумал. Обратимость Critters действительно помогла, и я сделал на основе него обратимый клеточный автомат, где существует одновременно три вещества: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;пустота - чёрные клетки, &lt;&#x2F;li&gt;
&lt;li&gt;вещество идущее вперёд во времени - синие клетки,&lt;&#x2F;li&gt;
&lt;li&gt;вещество идущее обратно во времени - красные клетки.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Блин, у меня цвета походу с фильмом не сходятся :(&lt;&#x2F;p&gt;
&lt;p&gt;При этом:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Если свапнуть цвет красного и синего, и ещё сделать одну мелочь, то симуляция времени вперёд будет равна симуляции времени назад до свапа. То есть все состояния корректно идут во времени в нужную сторону, и существует относительность направления времени!: красным кажется что они идут вперёд, а синие назад во времени, а синим что они идут вперёд, а красные назад.&lt;&#x2F;li&gt;
&lt;li&gt;Наборы клеток, которые состоят из пустоты, красных и синих клеток корректно обрабатываются.&lt;&#x2F;li&gt;
&lt;li&gt;Если правила для обычных Critters имеют размер &lt;code&gt;2^4&lt;&#x2F;code&gt;, то в моём автомате они размером &lt;code&gt;2*3^4&lt;&#x2F;code&gt;. Такой большой размер тоже составляет некоторую сложность в разработке правил.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Назвал я этот автомат гордым именем и с уважением к вдохновителю: The Tenet Of Life (Critters является самым близким аналогом The Game Of Life в мире обратимых автоматов, поэтому вполне логично). &lt;&#x2F;p&gt;
&lt;p&gt;Там были интересные проблемы и их решения, так что я хочу всё это подробно рассказать вместе с картинками, но сейчас у меня нет времени и мотивации. Надеюсь когда-нибудь в будущем доберусь.&lt;&#x2F;p&gt;
&lt;p&gt;Ладно, а теперь время картинок!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;В прошлом посте про Critters я не осилил управление мышью, поэтому там были очень шакальные картинки, и вы даже не смогли рассмотреть глайдера. Чтож, я исправил это недоразумение, теперь я сделал управление мышью и можно масштабировать, передвигать. И ещё интерфейс есть вместо клавиш на клавиатуре.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Это глайдер в обычном автомате Critters. Так как он синего цвета, видно что он идёт вперёд во времени. Здесь показывается как этот глайдер двигается в направлении куда он указывает. Так же здесь показывается сетка, чтобы можно было видеть как работают блочные правила обычного Critters, о которых я ранее рассказывал.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_2_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А здесь одновременно два глайдера с разными направлениями времени. Красный глайдер указывает влево, но идёт вправо, потому что он обращён во времени. И вообще эта гифка немного напоминает сцену из фильма с машинами) Я думаю это сделать логотипом моего автомата.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_3_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А тут просто куча клеток разных времён как-то взаимодействуют...&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_4_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А это так правила записываны в коде))))))))))000)0 Конечно, эти массивы вычисляется. Вычислением просто занимается другой код.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;546&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3366ce0f175281e600.webp&quot; 
    onclick=&quot;full_screen(&#x27;article_5.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;article_5.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А это я проектировал правила на draw.io. Не пытайтесь понять, просто спойлер, в будущем подробно расскажу об этом.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;396&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;800892818cb69b2700.webp&quot; 
    onclick=&quot;full_screen(&#x27;article_6.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;article_6.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Мне кажется ничего интересного или революционного я не увидел. Просто красные и синие клетки кипишатся и обладают хорошими математическими свойствами. Поэтому самое интересное - то как я его сделал, а не сам результат. Результаты не интересные потому что сам изначальный автомат Critters не очень интересный. Тут надо другие обратимые автоматы исследовать с таким подходом.&lt;&#x2F;p&gt;
&lt;p&gt;Ну и ещё результаты не очень интересные, потому что у меня нет самой главной фичи из фильма - устройства, которое обращает назад во времени всё что в него войдёт. Ведь именно такое устройство и создаёт интересные парадоксы и вынос мозга. А судя по тому что получилось у меня, просто параллельное существование двух временных типов материи не очень интересно и не очень противоречиво.&lt;&#x2F;p&gt;
&lt;p&gt;Мне кажется ввести клетки, которые делают такое инвертирование либо невозможно, либо придётся решать астрономическую систему уравнений, либо очень сложно. И если такое вводить, то надо заранее просчитывать вселенную чтобы она была согласована с этим устройством, потому что оно на вход должно принимать два одинаковых объекта с разными направлениями времени. То есть надо заранее пускать обратный и прямой глайдер в эту машину, чтобы они вошли в неё и исчезли, тогда результат этой машины будет как в фильме.&lt;&#x2F;p&gt;
&lt;p&gt;Если суметь создать такую машину, и направить туда прямой глайдер, но не направить обратный, то мне кажется что эта машина ещё до входа создаст много всякого шума, который самоаннигилируется с этим глайдером, и он умрёт, так и не попав назад во времени.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё, касательно простых обратимых автоматов могу посоветовать смотреть это:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=FiO6jkNkrb4&quot;&gt;Большой обзор клеточных автоматов от Онигири&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Quj5fP2Lqio&quot;&gt;Квантовый компьютер и обратимые вычисления от Онигири&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%9B%D0%B0%D0%BD%D0%B4%D0%B0%D1%83%D1%8D%D1%80%D0%B0&quot;&gt;Принцип Ландауэра на Википедии&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Я знаком с Онигири, и так интересно случается что у нас абсолютно случайно темы с этими автоматами пересеклись по времени и по смыслу в видео что я посоветовал) У него к сожалению видео не изобилуют сложными подробностями, и ориентированны на более молодую аудиторию, но в целом много нового можно узнать)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>5-бальная шкала оценки неверна</title>
            <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/5-point-ratings-are-wrong/</link>
            <guid>https://testzorax.github.io/p/5-point-ratings-are-wrong/</guid>
            <description>&lt;h1 id=&quot;konflikt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#konflikt&quot;&gt;#&lt;&#x2F;a&gt;Конфликт&lt;&#x2F;h1&gt;
&lt;p&gt;На данный пост меня вдохновило следующее сообщение: &lt;&#x2F;p&gt;
&lt;script async src=&quot;https:&#x2F;&#x2F;telegram.org&#x2F;js&#x2F;telegram-widget.js?15&quot; data-telegram-post=&quot;klavaorgwork&amp;#x2F;159174&quot; data-width=&quot;100%&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;В нём чувак говорит, что оценка &lt;code&gt;3&lt;&#x2F;code&gt; - это оценка &amp;quot;удовлетворительно&amp;quot;, когда сервис работает как полагается. &lt;code&gt;4&lt;&#x2F;code&gt; он ставит, когда есть что-то действительно хорошее. И тут я прозрел, что всю жизнь считал, что оценку &lt;code&gt;3&lt;&#x2F;code&gt; надо ставить за плохую работу. Поэтому по умолчанию ставил &lt;code&gt;5&lt;&#x2F;code&gt; звёзд, а если что-то работало нехорошо - ставил оценку ниже, в зависимости от того, насколько плохо. То есть для меня оценка &lt;code&gt;5&lt;&#x2F;code&gt; была аналогом &amp;quot;удовлетворительно&amp;quot;. И, думаю, я не один такой. Наше понимание этих оценок сломала школьная система, которая говорит, что на &lt;code&gt;3&lt;&#x2F;code&gt; нельзя учиться, истина только в &lt;code&gt;4&lt;&#x2F;code&gt;, а лучше в &lt;code&gt;5&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Мне кажется, эта проблема не только из-за школы, но ещё сам способ задания оценок неверен: он противоречит интуиции. Итак, у нас практически везде предлагается ставить оценку либо от &lt;code&gt;1&lt;&#x2F;code&gt; до &lt;code&gt;5&lt;&#x2F;code&gt;, либо от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;10&lt;&#x2F;code&gt;. Первая очевидная проблема этих оценок: они все состоят из положительных чисел. Нам предлагается оценивать что-то только степенью хорошести. То, что &amp;quot;хорошо&amp;quot; на &lt;code&gt;1&lt;&#x2F;code&gt; из &lt;code&gt;5&lt;&#x2F;code&gt;, означает на самом деле &amp;quot;плохо&amp;quot; - это контринтуитивно.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;predlozhenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#predlozhenie&quot;&gt;#&lt;&#x2F;a&gt;Предложение&lt;&#x2F;h1&gt;
&lt;p&gt;&amp;quot;Хорошо&amp;quot; надо оценивать положительными числами, а &amp;quot;плохо&amp;quot; - отрицательными. Поэтому система оценки должна быть в целых числах от &lt;code&gt;-2&lt;&#x2F;code&gt; до &lt;code&gt;+2&lt;&#x2F;code&gt;, где оценка &lt;code&gt;0&lt;&#x2F;code&gt; будет считаться нейтральной, &amp;quot;удовлетворительно&amp;quot;. &lt;code&gt;±2&lt;&#x2F;code&gt; будет считаться как максимальная степень хорошего и плохого. &lt;code&gt;+1&lt;&#x2F;code&gt; должно стать оценкой для обозначения чего-то достаточно хорошего, чтобы не быть нейтральным, но ещё не самое лучшее, то есть промежуточное. Больше не нужно промежуточных, иначе будет слишком сложно выбрать.&lt;&#x2F;p&gt;
&lt;p&gt;Я предлагаю называть это &lt;em&gt;симметричной шкалой оценки&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Помимо неинтуитивности, у пятибальной шкалы существует такое наследие, как идеология. Согласно этой идеологии любая оценка ниже &lt;code&gt;5&lt;&#x2F;code&gt; считается плохой и никто не хочет получать &lt;code&gt;3&lt;&#x2F;code&gt;. То есть &amp;quot;удовлетворительно&amp;quot; - это &amp;quot;плохо&amp;quot;, как бы противоречиво это не звучало. В школах же оценка &lt;code&gt;5&lt;&#x2F;code&gt; считается достигнутой, когда ты выполнил все задания. Например, на контрольной ты решил все задачи - значит ты получаешь &lt;code&gt;5&lt;&#x2F;code&gt;. Оценка &lt;code&gt;5&lt;&#x2F;code&gt; - это не самая лучшая оценка, это просто когда ты всё решил. Выше нету, существует только ниже. Если получил &lt;code&gt;4&lt;&#x2F;code&gt; или &lt;code&gt;3&lt;&#x2F;code&gt;, то ты считаешься ущербным, потому что не сделал все задания. Видимо поэтому я по умолчанию всем приложениям ставил &lt;code&gt;5&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё одна проблема любой положительной оценки - это то, что её промежуточные значения можно трактовать различным образом, и это трактование может отличаться от человека к человеку (10-бальная шкала в этом плане ещё хуже). Симметричную же шкалу трактовать иным образом очень сложно: там чётко обозначено понятие нейтралитета, негативного, позитивного и максимального.&lt;&#x2F;p&gt;
&lt;p&gt;С приходом новой шкалы должна прийти и новая идеология. Во-первых, все должны перестать гнаться за максимальной оценкой, социально допустимой нормой должен стать &lt;code&gt;0&lt;&#x2F;code&gt;. Должно быть нормально и не позорно делать что-то на &lt;code&gt;0&lt;&#x2F;code&gt; баллов. Аналогично в школе должно стать абсолютно нормально учиться на &lt;code&gt;0&lt;&#x2F;code&gt;, этой оценкой должен быть минимально необходимый минимум. Во-вторых, раз &lt;code&gt;0&lt;&#x2F;code&gt; стал нормальной оценкой, контрольные должны быть переделаны. Контрольные теперь не могут давать &lt;code&gt;+2&lt;&#x2F;code&gt; балла за полное их решение, они должны содержать различные секции: необходимое к решению (полное решение их даёт &lt;code&gt;0&lt;&#x2F;code&gt;) и дополнительные задания, которые уже позволяют показать, что вы умнее необходимого минимума. Для получения оценки &lt;code&gt;+2&lt;&#x2F;code&gt; должны даваться задачи, по сложности сопоставимые с профильными лицеями или олимпиадами. Так у школ появится возможность оценивать сверхпреуспевающих учеников, а не просто тех, кто упёрся в стенку &lt;code&gt;5&lt;&#x2F;code&gt; баллов.&lt;&#x2F;p&gt;
&lt;p&gt;Я считаю, что все шкалы оценки должны стать симметричными. Не только в школах, но ещё и в магазинах приложений, кинопоиске, imdb итд.&lt;&#x2F;p&gt;
&lt;p&gt;В целом, для разных целей шкалу можно расширить до &lt;code&gt;[-5, 5]&lt;&#x2F;code&gt; - главное, чтобы шкала оставалась симметричной и сохранялись все остальные принципы данной шкалы.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kritika-ot-drugikh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kritika-ot-drugikh&quot;&gt;#&lt;&#x2F;a&gt;Критика от других&lt;&#x2F;h1&gt;
&lt;p&gt;На эту тему советую ещё заценить статью моего друга: &lt;a href=&quot;https:&#x2F;&#x2F;telegra.ph&#x2F;steloj-10-20&quot;&gt;Бесит! 10 звёзд.&lt;&#x2F;a&gt;, или она же в &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;bpblog&#x2F;111&quot;&gt;телеге&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А ещё я погуглил про пятибальную шкалу, и на каждом углу говорят, что она плохая и в школах надо её заменить другой положительно определённой шкалой: 10, 12, 15 😂 ИМХО, без отрицательных чисел, а особенно нуля, это будет лишь полумерой.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё есть отличная &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;gaming&#x2F;comments&#x2F;ky7lqq&#x2F;how_gamers_see_review_scores_now&#x2F;&quot;&gt;иллюстрация с рэддита&lt;&#x2F;a&gt; о том, как геймеры видят оценки игр:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;658&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e6bf7399ba58953300.webp&quot; 
    onclick=&quot;full_screen(&#x27;gamer-marks.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;gamer-marks.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</description>
        </item>
        <item>
            <title>Проблема подписок</title>
            <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/subscription-problem/</link>
            <guid>https://testzorax.github.io/p/subscription-problem/</guid>
            <description>&lt;p&gt;Сейчас проблема подписок в том, что однажды подписавшись, ты скорее всего вряд ли отпишешься, потому что принимать такое решение очень сложно: «Ну зачем-то же я подписался», «Ну он же делал годноту». Обычно отписка происходит только если человек начал делать что-то очень плохое. Да и вообще отписываются очень сознательные люди, которые анализируют потребляемый контент.&lt;&#x2F;p&gt;
&lt;p&gt;Из-за этого у среднего человека становится слишком много подписок и ему становятся необходимы всякие умные ленты.&lt;&#x2F;p&gt;
&lt;p&gt;Другой вариант решения этой проблемы, который придумал я, — это предоставление статистики потребления контента на каждого автора, на которого ты подписан.&lt;&#x2F;p&gt;
&lt;p&gt;Как может выглядеть такая статистика на примере ютуба: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;показывается как часто ты ставишь лайки, дизлайки этому каналу; &lt;&#x2F;li&gt;
&lt;li&gt;сколько проходит времени с момента выпуска видео и как ты его посмотришь (заинтересованность); &lt;&#x2F;li&gt;
&lt;li&gt;сколько видео ты не смотришь.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;И ещё эта статистика должна быть разделена на два периода: до подписки и после. Потому что может быть так, что ты подписался на человека за то что он делал раньше, а щас он делает фигню, которую ты не смотришь.&lt;&#x2F;p&gt;
&lt;p&gt;Далее должна быть возможность ранжировать по этим критериям все каналы что у тебя есть и на основании этой статистики принимать решение об отписке, смотря в конец.&lt;&#x2F;p&gt;
&lt;p&gt;Может пусть сам ютуб предлагает каналы от которых нужно отписаться (умная анти-лента).&lt;&#x2F;p&gt;
&lt;p&gt;Конечно, эту идею надо распространить на всё: вк, твиттер, телега итд.&lt;&#x2F;p&gt;
&lt;p&gt;С такими инструментами станет проще жить, и возможно число подписчиков действительно начнёт что-то значить.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Обратимые клеточные автоматы</title>
            <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/critters/</link>
            <guid>https://testzorax.github.io/p/critters/</guid>
            <description>&lt;p&gt;Всем известно про такой клеточный автомат, как &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Conway%27s_Game_of_Life&quot;&gt;&amp;quot;Conway&#x27;s Game Of Life&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;У этого автомата есть такое свойство как необратимость, то есть у данного расположения клеток может быть от 0 до бесконечного числа предков, которые приводят к этому состоянию. Состояния, у которых не может быть предка, называются &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%A1%D0%B0%D0%B4_%D0%AD%D0%B4%D0%B5%D0%BC%D0%B0_%28%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F_%D0%BA%D0%BB%D0%B5%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B0%29&quot;&gt;Садом Эдема&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Легко понять что этот автомат необратим: в нём возможно создать состояния, приводящие к пустому пространству. Очевидно, у пустоты существует бесконечное число предков.&lt;&#x2F;p&gt;
&lt;p&gt;Для устранения этого свойства придумали обратимые клеточные автоматы, то есть у такого автомата всегда может быть потомок и причём только один, и его можно легко алгоритмически вычислить.&lt;&#x2F;p&gt;
&lt;p&gt;По сути такой автомат позволяет заглянуть в прошлое, если нам известно настоящее!&lt;&#x2F;p&gt;
&lt;p&gt;По этим автоматам очень мало информации в сети, из-за чего они меня так сильно заинтересовали. Пример такого автомата - &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Critters_%28block_cellular_automaton%29&quot;&gt;Critters&lt;&#x2F;a&gt;. Алгоритм его работы такой: без пересечений смотрятся все квадратики &lt;code&gt;2x2&lt;&#x2F;code&gt; и заменяются согласно трансформации на вики. Затем сетка квадратиков смещается на &lt;code&gt;1&lt;&#x2F;code&gt; по диагонали и делается то же самое. Теперь считается что прошёл один шаг и сетка снова двигается на &lt;code&gt;1&lt;&#x2F;code&gt; по диагонали (возвращается в прошлое состояние).&lt;&#x2F;p&gt;
&lt;p&gt;Введу пару обозначений: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; - текущее состояние,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;10&lt;&#x2F;code&gt; - симуляцию &lt;code&gt;10&lt;&#x2F;code&gt; шагов вперёд от текущего состояния,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-10&lt;&#x2F;code&gt; - симуляцию &lt;code&gt;10&lt;&#x2F;code&gt; шагов назад.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Меня интересовало в этом автомате: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;как будет выглядеть &lt;code&gt;-10&lt;&#x2F;code&gt;, если я что-то нарисую в &lt;code&gt;0&lt;&#x2F;code&gt;; &lt;&#x2F;li&gt;
&lt;li&gt;как будет выглядеть &lt;code&gt;0&lt;&#x2F;code&gt;, если просимулировать до &lt;code&gt;10&lt;&#x2F;code&gt;, затем там что-то модифицировать, а затем просимулировать обратно.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;По этим автоматам информации в сети настолько мало, что я не смог найти симуляцию Critters. Поэтому пришлось писать программу самому.&lt;&#x2F;p&gt;
&lt;p&gt;Быстренько накидал программку и выложил на &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;critters&quot;&gt;github:critters&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Так эволюционируют криттерсы при обычной симуляции вперёд из рисунка hi.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;hi_forward_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А вот эволюция рисунка hi в обратную сторону.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;hi_backward.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Сверху показано текущее состояние поля. Снизу показано как будет выглядеть поле, если его симулировать до &lt;code&gt;0&lt;&#x2F;code&gt; шага. Сначала происходит симуляция до &lt;code&gt;95&lt;&#x2F;code&gt; шага. Видно, что поле снизу остаётся неизменным. Но, затем я начинаю менять поле в настоящем, удаляя белые точки в некоторых местах. Видно, что от удаления одного глайдера или пары пикселей сразу сильно меняется прошлое. Причём эффект взрывной, ломается целая конструкция.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;to_zero.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Здесь показано как выглядят правила преобразования с википедии, и как они записаны у меня в программе. Массив для обратной симуляции вычисляется из этого. Вообще любая перестановка этого массива тоже является обратимым клеточным автоматом, наверное среди всех этих перестановок можно найти что-то интереснее.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;838&quot;
    height=&quot;682&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;016feabbd7f5b4e400.webp&quot; 
    onclick=&quot;full_screen(&#x27;rules.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;rules.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Пример одной из перестановок, данного массива.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;other_rules.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Я сделал этот автомат на зацикленном поле, следовательно количество состояний конечно, и ограничено &lt;code&gt;2^(WxH)&lt;&#x2F;code&gt;. А учитывая что у любого состояния всегда существует один потомок и один предок, любое состояние через какое-то количество шагов обязательно вернётся в самого себя. Таким же образом можно объяснить почему при применении одной и той же комбинации для Кубика Рубика, он всегда вернётся в изначальное состояние, через определённое число шагов. Таким же образом, если наш мир является конечным обратимым автоматом, то через определённое число больших взрывов и схлопываний он полностью повторит сам себя (напоминает одну серию в Футураме :) ).&lt;&#x2F;p&gt;
&lt;p&gt;Ещё этот автомат не может потерять информацию, потому что он должен быть обратимым. Что это значит можно объяснить на примере: допустим, вы захотели сделать на этом конечном автомате устройство для умножения двух чисел. Тогда такое устройство должно уметь симулироваться обратно, а значит оно должно уметь получать для одного числа два других, которые при умножении дали это число. Но самого числа будет недостаточно, нужна будет ещё мета-информация или &amp;quot;мусор&amp;quot;, чтобы вернуться в изначальное состояние. Скорее всего этот &amp;quot;мусор&amp;quot; будет кучей глайдеров, которые вышли из устройства умножения в процессе. Так что взломать RSA не получится)) Кстати, существуют обратимые языки программирования! Пример: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Janus_%28time-reversible_computing_programming_language%29&quot;&gt;Janus&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;В &amp;quot;Игре Жизнь&amp;quot; при создании устройства умножения никаких глайдеров не вылетает, всё работает очень чисто, и после умножения устройство может вернуться в изначальное состояние. Это потому что данный автомат теряет информацию. &lt;&#x2F;p&gt;
&lt;p&gt;А наш мир можно симулировать в обратную сторону? Я слышал, что согласно классической механике, да. Насчёт квантовых эффектов уже не уверен. Кстати, в физике существует такая проблема как &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%98%D1%81%D1%87%D0%B5%D0%B7%D0%BD%D0%BE%D0%B2%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8_%D0%B2_%D1%87%D1%91%D1%80%D0%BD%D0%BE%D0%B9_%D0%B4%D1%8B%D1%80%D0%B5&quot;&gt;исчезновение информации в чёрных дырах&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;На гифках видно, что critters выглядит довольно скучно в динамике, не сравнимо с тем как красиво выглядит &amp;quot;игра жизнь&amp;quot;. Возможно правила не очень удачные, но мне кажется главная проблема что critters не может терять информацию, поэтому его эволюция выглядит так скучно, и вообще там толком не происходит эволюции, просто шум шумит, благо хотя бы глайдеры существуют.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя если учесть что наш мир тоже обратим, то он выглядит слишком интересно. Думаю всё дело в том, что с первого взгляда он выглядит как &amp;quot;игра жизнь&amp;quot;, но при более внимательном взгляде весь &amp;quot;мусор&amp;quot;, нужный чтобы симулировать его обратно, хранится в виде тепла и электромагнитного излучения. Причём интересные состояния (атомы) сильно влияют на мир, а неинтересные состояния нужные для сохранения информации (тепло, электромагнитное излучение, фотоны), мало влияют на мир. Видимо надо тоже пытаться проектировать клеточный автомат, который всю скуку будет преобразовывать в слабые состояния, а самое интересное в сильные состояния.&lt;&#x2F;p&gt;
&lt;p&gt;В общем я немного разочарован с этим автоматом, его прошлое не интересно, будущее тоже, видимо надо придумывать более сложный автомат с большим числом состояний у одной клетки, может как-то воспользоваться идеей из прошлого абзаца.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Float — это динамическая типизация на уровне процессора</title>
            <pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/typed-float/</link>
            <guid>https://testzorax.github.io/p/typed-float/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;В этой статье предполагается что вы знакомы с языком Rust, и знаете что такое алгебраические типы данных (ADT).&lt;&#x2F;p&gt;
&lt;p&gt;Сравните эти два примера кода:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;something&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;number&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;string&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;something&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;f64 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;is_nan&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else if !&lt;&#x2F;span&gt;&lt;span&gt;a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;is_finite&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else if&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Казалось, бы, два совершенно разных языка, а код выглядит так одинаково: всё &lt;strong&gt;валидируется&lt;&#x2F;strong&gt; (кто не в теме, надо &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;498042&#x2F;&quot;&gt;парсить, а не валидировать&lt;&#x2F;a&gt;). Да, всё дело в том, что вещественные числа - это, по сути, динамическая типизация на уровне процессора. У нас в переменной вещественного числа может храниться множество состояний, которые мы должны проверять, если хотим узнать что там хранится. Так же там присутствует неявное приведение типов из &amp;quot;разных&amp;quot; категорий, например &lt;code&gt;1.0 + NaN = NaN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Что люди сделали с динамической типизацией в JavaScript? Они придумали TypeScript. И стало хорошо. Получается то же самое можно сделать с вещественными числами?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nan&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nan&quot;&gt;#&lt;&#x2F;a&gt;NaN&lt;&#x2F;h1&gt;
&lt;p&gt;Самая базовая проблема вещественных чисел - это &lt;code&gt;NaN&lt;&#x2F;code&gt;. Он обладает очень противным свойством: не равен самому себе.&lt;&#x2F;p&gt;
&lt;p&gt;Из-за этого мы в Rust&#x27;е не можем хранить вещественные числа в дереве, сортировать массив с ними, то есть реализовывать трейты &lt;code&gt;Eq&lt;&#x2F;code&gt;, &lt;code&gt;Ord&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Если вытащить из вещественного числа &lt;code&gt;NaN&lt;&#x2F;code&gt;, то оно сразу становится хорошим. Схематически это можно обозначить так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Float &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NaN,
&lt;&#x2F;span&gt;&lt;span&gt;    NotNanFloat(NotNanFloat),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;NotNanFloat &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Eq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;NotNanFloat &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Ord &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;NotNanFloat &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;И мы можем записать в массиве, что храним только &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Когда я писал &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;confidence&quot;&gt;github:confidence&lt;&#x2F;a&gt;, мне очень не хватало возможности матчиться по такой структуре данных, или говорить что я принимаю только &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Правда, появляется проблема, что некоторые операции над &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt; позволяют прийти к &lt;code&gt;NaN&lt;&#x2F;code&gt;, например: умножение бесконечности на ноль, деление на ноль. Получается, нам после любых арифметических вычислений нужно приводить тип из более широкого &lt;code&gt;Float&lt;&#x2F;code&gt; обратно к &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a: NotNanFloat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= ...&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b: NotNanFloat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= ...&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; c: Float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; d: NotNanFloat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; c.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;try_into&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;С одной стороны это даже хорошо, потому что мы не будем хранить фигню у себя в массивах, и в конце не получим что у нас огромная матрица перемножалась 100 раз с &lt;code&gt;NaN&lt;&#x2F;code&gt;&#x27;ами, а получим ошибку намного раньше.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;prodolzhenie-bezumiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#prodolzhenie-bezumiia&quot;&gt;#&lt;&#x2F;a&gt;Продолжение безумия&lt;&#x2F;h1&gt;
&lt;p&gt;Можно пойти дальше и ещё сильнее разделить вещественные числа:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;NotNanFloat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    InfiniteFloat(InfiniteFloat),
&lt;&#x2F;span&gt;&lt;span&gt;    FiniteFloat(FiniteFloat),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;InfiniteFloat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Negative,
&lt;&#x2F;span&gt;&lt;span&gt;    Positive,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FiniteFloat &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но в этом уже нет такой серьёзной причины как в отделении от &lt;code&gt;NaN&lt;&#x2F;code&gt;&#x27;а. Такое разделение можно использовать для более чёткого контроля типов данных на этапе компиляции.&lt;&#x2F;p&gt;
&lt;p&gt;Например, можно создать тип &lt;code&gt;FloatFrom0ToInf&lt;&#x2F;code&gt;, который содержит все положительные числа и включая ноль. И затем сказать что &lt;code&gt;fn div_one(down: FloatFrom0ToInf) -&amp;gt; FloatFrom0ToInf&lt;&#x2F;code&gt;. Ну и вообще рассчитать все операции друг из друга, и записать это на системах типов.&lt;&#x2F;p&gt;
&lt;p&gt;Либо же &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt; можно расписать так:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;NotNanFloat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    PositiveFloat(PositiveFloat),
&lt;&#x2F;span&gt;&lt;span&gt;    NegativeFloat(NegativeFloat),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;PositiveFloat &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Infinity,
&lt;&#x2F;span&gt;&lt;span&gt;    FinitePositiveFloat(FinitePositiveFloat),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;FinitePositiveFloat &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Здесь можно сделать метод: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;mul&lt;&#x2F;span&gt;&lt;span&gt;(PositiveFiniteFloat, PositiveFiniteFloat) -&amp;gt; PositiveFloat;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Или надо отделить ноль от всего остального, и можно получить деление, которое не должно вызывать &lt;code&gt;NaN&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;div&lt;&#x2F;span&gt;&lt;span&gt;(FiniteFloat, NonZeroFiniteFloat) -&amp;gt; NonZeroFiniteFloat;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;А ещё можно иметь крутые сообщения об ошибках, когда ты пытаешься преобразовать более широкий тип к более маленькому:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; a: Float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; b: PositiveFiniteFloat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;float_unwrap&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; &amp;quot;Can&amp;#39;t convert negative float `-1.2` to positive number in line N&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Такие типы могли бы быть очень удобны во всяких библиотечных функциях. Например, функция расчёта площади треугольника по трём сторонам, которая принимает только конечные положительные числа, чтобы не &lt;strong&gt;валидировать&lt;&#x2F;strong&gt; их внутри:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;triangle_area&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: PositiveNonZeroFiniteFloat, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: PositiveNonZeroFiniteFloat, 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;: PositiveNonZeroFiniteFloat,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a2a001;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;PositiveNonZeroFiniteFloat&amp;gt; { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; В этой функции возвращается `Option&amp;lt;_&amp;gt;`, потому что в процессе вычислений может возникнуть бесконечность.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;И таких способов расписать &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt; существует очень много. Для этого, бы, наверное, в Rust пришлось создать целую языковую конструкцию &lt;code&gt;safe union&lt;&#x2F;code&gt;, которая позволяет переключаться между этими представлениями &lt;code&gt;Float&lt;&#x2F;code&gt;, потому что они абсолютно эквивалентны.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;to-zhe-samoe-no-na-tipakh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#to-zhe-samoe-no-na-tipakh&quot;&gt;#&lt;&#x2F;a&gt;То же самое, но на типах&lt;&#x2F;h1&gt;
&lt;p&gt;Или это разделение можно записывать по-другому:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Yes&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;IsFloatParameter &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;IsFloatParameter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Yes&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;impl IsFloatParameter for No&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;struct Float&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;    HasNan: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasNegativeInfinity: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    HasNegativeFrom1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasNegative1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasNegativeFrom0To1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasNegative0: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    HasPositive0: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasPositiveFrom0To1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasPositive1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;    HasPositiveFrom1: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    HasPositiveInfinity: IsFloatParameter,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;type NotNanFloat&lt;&#x2F;span&gt;&lt;span&gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Float&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;
&lt;&#x2F;span&gt;&lt;span&gt;    No, 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Yes, 
&lt;&#x2F;span&gt;&lt;span&gt;    Yes, Yes, Yes, Yes, 
&lt;&#x2F;span&gt;&lt;span&gt;    Yes, Yes, Yes, Yes, 
&lt;&#x2F;span&gt;&lt;span&gt;    Yes,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но в таком случае теряется возможность матчиться по структуре данных, чтобы получить нужный промежуток. Не знаю что лучше.&lt;&#x2F;p&gt;
&lt;p&gt;Для подобного представления очень пригодятся умения программировать сложные вычисления на типах данных, чтобы автоматически получать все возможные преобразования для всех возможных комбинаций вещественных чисел.&lt;&#x2F;p&gt;
&lt;p&gt;Если же делать это вручную, то потребуется очень много кода. Вероятно, эту задачу было бы логичнее решать на зависимых типах? Или нужна новая, более сильная абстракция, чем ADT?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;podderzhka-ot-kompiliatora&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#podderzhka-ot-kompiliatora&quot;&gt;#&lt;&#x2F;a&gt;Поддержка от компилятора&lt;&#x2F;h1&gt;
&lt;p&gt;Ещё, если такая система будет существовать, например, на Rust, то она должна поддерживаться со стороны компилятора аналогично &lt;code&gt;NonNull&lt;&#x2F;code&gt;, чтобы паттерн-матчинг по флоату раскрывался в максимально эффективные ассемблерные команды проверки, и чтобы хранение такого флоата в enum&#x27;ах &lt;code&gt;PositiveFloat&lt;&#x2F;code&gt;, &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt; не тратило лишней памяти.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Наверное, поэтому даже в языках со статической типизацией, столько страданий приносят вещественные числа со своими бесконечностями и &lt;code&gt;NaN&lt;&#x2F;code&gt;&#x27;ами? Может быть, с этими типами данных, станет немного проще жить? Не знаю. Это лишь идея, возникающая на почве статической типизации головного мозга.&lt;&#x2F;p&gt;
&lt;p&gt;Динамическая типизация в JS легко сводится к статической типизации, потому что с логической точки зрения никакие операции над &lt;code&gt;int&lt;&#x2F;code&gt; не должны приводить к случайному возникновению &lt;code&gt;string&lt;&#x2F;code&gt;, а в вещественных числах всё сложнее, там все значения между собой очень сильно связаны, и вот простое сложение двух конечных чисел может дать бесконечность, а отношение двух конечных чисел может дать &lt;code&gt;NaN&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Надеюсь эта идея вдохновила вас.&lt;&#x2F;p&gt;
&lt;p&gt;А если хочется &lt;code&gt;NotNanFloat&lt;&#x2F;code&gt; иметь у себя в коде на Rust, то можно искать крейт по ключевым словам: &lt;code&gt;ordered float&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Симметричные вероятности или Уверенности</title>
            <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/symmetric-probabilities/</link>
            <guid>https://testzorax.github.io/p/symmetric-probabilities/</guid>
            <description>&lt;h1 id=&quot;v-chiom-moia-problema&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#v-chiom-moia-problema&quot;&gt;#&lt;&#x2F;a&gt;В чём моя проблема?&lt;&#x2F;h1&gt;
&lt;p&gt;Я хочу иметь какие-то абстрактные чиселки рядом с правилами формальной грамматики, которые будут преобразовываться по каким-то абстрактным правилам (не обязательно умножение или сложение), для достижения каких-то целей.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chto-za-tseli&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chto-za-tseli&quot;&gt;#&lt;&#x2F;a&gt;Что за цели?&lt;&#x2F;h1&gt;
&lt;p&gt;Я пишу парсер при помощи которого будет аппроксимироваться естественный язык через Контекстно-Свободные грамматики. Очевидно, так как это аппроксимация, не может быть чего-то абсолютно верного и точного. Значит какие-то правила могут лучше аппроксимировать некоторые фразы, а какие-то хуже. Для этого мне нужны чиселки, чтобы они как-то преобразовывались, и чтобы на выходе получалось примерно такое: вот для этой фразы такой-то факт с вероятностью &lt;code&gt;57%&lt;&#x2F;code&gt; правильный, для такой-то фразы с вероятностью &lt;code&gt;98%&lt;&#x2F;code&gt; правильный. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;pochemu-chiselki-abstraktnye-chto-tebe-nuzhno-ot-nikh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pochemu-chiselki-abstraktnye-chto-tebe-nuzhno-ot-nikh&quot;&gt;#&lt;&#x2F;a&gt;Почему чиселки абстрактные, что тебе нужно от них?&lt;&#x2F;h1&gt;
&lt;p&gt;Хотелось получить удобный интерфейс задания этих чиселок, который можно логически трактовать и который можно легко написать, будучи пользователем парсера (то есть без вмешательства численных методов).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;nu-naprimer-sushchestvuiut-obychnye-veroiatnosti-chisla-ot-0-do-1-beri-ikh-da-umnozhai&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#nu-naprimer-sushchestvuiut-obychnye-veroiatnosti-chisla-ot-0-do-1-beri-ikh-da-umnozhai&quot;&gt;#&lt;&#x2F;a&gt;Ну, например, существуют обычные вероятности - числа от 0 до 1, бери их да, умножай.&lt;&#x2F;h1&gt;
&lt;p&gt;Нет. Обычные вероятности не подходят по нескольким причинам:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Чем больше фраза, тем больше умножений чисел от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;1&lt;&#x2F;code&gt;, тем ближе результат к &lt;code&gt;0&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;В связи с этим абсолютные значения &amp;quot;вероятностей&amp;quot; не имеют никакого смысла.&lt;&#x2F;li&gt;
&lt;li&gt;Задавать их неудобно, нужны какие-то магические числа &lt;code&gt;0.57&lt;&#x2F;code&gt;, &lt;code&gt;0.98&lt;&#x2F;code&gt;, &lt;code&gt;0.05&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Накладывается ограничение в виде того что сумма вероятностей для одного нетерминала должна быть &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Смотри пример в &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;199&quot;&gt;&#x2F;199&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Вроде разъяснил, дальше продолжу обычное повествование.&lt;&#x2F;p&gt;
&lt;p&gt;В &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;184&quot;&gt;&#x2F;184&lt;&#x2F;a&gt; я предложил интерфейс описания &amp;quot;абстрактных чиселок&amp;quot;, который можно логично трактовать:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+20%&lt;&#x2F;code&gt; - значит что-то увеличивается на что-то, увеличивается на число больше что больше чем &lt;code&gt;+10%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-20%&lt;&#x2F;code&gt; - аналогично верхнему уменьшается, и уменьшается сильнее, чем на &lt;code&gt;-10%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;60%&lt;&#x2F;code&gt; - задаёт обычную вероятность&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Вскоре я понял что нельзя смешивать обычную вероятность и эти &lt;code&gt;+20%&lt;&#x2F;code&gt;, &lt;code&gt;-20%&lt;&#x2F;code&gt;. Потому что обычная вероятность их съедает, и вообще всё заражает собой.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому выкидываем её и добавляем элемент: &lt;code&gt;0%&lt;&#x2F;code&gt; - он означает, что ничего не изменится.&lt;&#x2F;p&gt;
&lt;p&gt;Назовём эту величину &amp;quot;уверенность&amp;quot;. И введём операцию объединения &amp;quot;уверенностей&amp;quot; под символом ★.&lt;&#x2F;p&gt;
&lt;p&gt;Теперь главная проблема состоит в том, чтобы определить как эти уверенности задавать, какие у них свойства и как вычислять ★.&lt;&#x2F;p&gt;
&lt;p&gt;Я решил что &lt;code&gt;-20%&lt;&#x2F;code&gt; должно мапиться в &lt;code&gt;-0.2&lt;&#x2F;code&gt;, &lt;code&gt;+20%&lt;&#x2F;code&gt; в &lt;code&gt;+0.2&lt;&#x2F;code&gt;, а в итоге область определения должна быть &lt;code&gt;[-1; 1]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Я начал с создания &lt;a href=&quot;https:&#x2F;&#x2F;www.desmos.com&#x2F;calculator&#x2F;njsni62kej&quot;&gt;такой функции&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1280&quot;
    height=&quot;436&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;6f6002d469d77b2300.webp&quot; 
    onclick=&quot;full_screen(&#x27;1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Её проблема в том что она не гладкая, и она даёт разные результаты в зависимости от порядка когда её применять. А ведь в грамматиках не задан конкретный порядок, и не знаешь когда надо выполнить ★, а когда нет. К тому же она получала данные в области &lt;code&gt;[-1; 1]&lt;&#x2F;code&gt;, а возврщала в области &lt;code&gt;[0; 1]&lt;&#x2F;code&gt;. Но это легко поправляется.&lt;&#x2F;p&gt;
&lt;p&gt;Значит, самое главное свойство, которое мне нужно, это: (a ★ b) ★ c = (a ★ c) ★ b.&lt;&#x2F;p&gt;
&lt;p&gt;Далее я пытался гуглить, но безрезультатно. Пытался читать теорему Байеса, думать как её применить к своей задаче, тоже безрезультатно.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я осознал, что я могу применить грубую силу!!! Я чёртов программист численных методов, я должен это использовать чтобы численно найти нужную мне функцию! &lt;&#x2F;p&gt;
&lt;p&gt;Итак, я должен был сделать следующую последовательность действий:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Сформулировать свойства необходимой мне функции&lt;&#x2F;li&gt;
&lt;li&gt;Запрограммировать расчёт выполнения этих свойств при помощи интегралов&lt;&#x2F;li&gt;
&lt;li&gt;Найти библиотеку для задания гладких 2D функций по каким-то числам&lt;&#x2F;li&gt;
&lt;li&gt;Использовать методы оптимизации, чтобы найти такие числа, которые на этих интегралах дают минимум&lt;&#x2F;li&gt;
&lt;li&gt;Достаточно оптимизировать и использовать&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Я думал что такой функции может не существовать, уж слишком хорошей она должна была быть.&lt;&#x2F;p&gt;
&lt;p&gt;Свойства я легко сформулировал, написал интеграл и начал тестировать. Моя линейная функция возвращала на этих свойствах 2. А идеальная функция должна 0. Самое плохое что там было - тройной интеграл для самого важного свойства (поэтому для точности с 10 точками требовалось 1000 вычислений функции).&lt;&#x2F;p&gt;
&lt;p&gt;Библиотеку для построения гладких 2D функций я не нашёл, поэтому пришлось применять свои знания с МКЭ, и самому программировать вычисление функции по числам-точкам.&lt;&#x2F;p&gt;
&lt;p&gt;Для методов оптимизации (нахождения минимума функции) я взял &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;argmin-rs&#x2F;argmin&quot;&gt;argmin-rs&lt;&#x2F;a&gt;. Советую квазиньютоновские методы.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я совместил это всё с методами оптимизации и...&lt;&#x2F;p&gt;
&lt;p&gt;Оно работало очень долго. Для задания 2D функции я требовал слишком много параметров, и многие из них были избыточны, так что времени тратилась уйма. &lt;&#x2F;p&gt;
&lt;p&gt;Затем я понял, что нужна визуализация! А тут как раз &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;dereference_pointer_there&#x2F;538&quot;&gt;Антон&lt;&#x2F;a&gt; рассказал про встраиваемый Питон в Rust! Немного повоевав с ним, я смог вывести получающуюся функцию через &lt;code&gt;matplotlib&lt;&#x2F;code&gt;, и даже &lt;code&gt;plt.show()&lt;&#x2F;code&gt; работало!&lt;&#x2F;p&gt;
&lt;p&gt;Я вывел график, и...&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;642&quot;
    height=&quot;542&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;bddb2c25aad133ca00.webp&quot; 
    onclick=&quot;full_screen(&#x27;bad.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;bad.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Функция получалась... ужасная, она была очень шумной, не монотонной, явно переобучалась где-то. Ну и метрика кое-как доходила до &lt;code&gt;0.04&lt;&#x2F;code&gt;. Я ставил оптимизацию функции на несколько часов, и безрезультатно, в итоге у меня получалась полная чушь, да к тому же вырожденная, получалась функция, которая стремится сохранить первое значение.&lt;&#x2F;p&gt;
&lt;p&gt;Я сильно расстроился.&lt;&#x2F;p&gt;
&lt;p&gt;Но на следующий день мне пришло в голову, что на самом деле мои &amp;quot;веса&amp;quot; из &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;199&quot;&gt;&#x2F;199&lt;&#x2F;a&gt;, были очень даже подходящими! Они идеально подходили для отрезка от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;1&lt;&#x2F;code&gt; и умножения &lt;code&gt;0.8&lt;&#x2F;code&gt; на &lt;code&gt;1.2&lt;&#x2F;code&gt;, но были неудобны для отрезка от &lt;code&gt;1&lt;&#x2F;code&gt; до &lt;code&gt;∞&lt;&#x2F;code&gt;. Тогда я решил просто сворачивать эту бесконечность до &lt;code&gt;1&lt;&#x2F;code&gt; путём деления. Тогда &lt;code&gt;+20%&lt;&#x2F;code&gt; превращалось в &lt;code&gt;1+1&#x2F;(1-0.2)=2.25&lt;&#x2F;code&gt;. И знаете что? Я получил идеальную функцию, которую хотел! Она идеально удовлетворяла всем свойствам и была очень даже гладкой. А ещё она симметричная: от &lt;code&gt;-1&lt;&#x2F;code&gt; до &lt;code&gt;0&lt;&#x2F;code&gt; ведёт себя так же как от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;1&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Эх, так просто. А я даже не верил что она существует.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1060&quot;
    height=&quot;377&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7457597ac35567e100.webp&quot; 
    onclick=&quot;full_screen(&#x27;good.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;good.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Вот она, моя идеальная функция ❤️&lt;&#x2F;p&gt;
&lt;p&gt;А покрутить её можно &lt;a href=&quot;https:&#x2F;&#x2F;www.desmos.com&#x2F;calculator&#x2F;nadaxdx40e&quot;&gt;здесь&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Результат я опубликовал здесь: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;confidence&quot;&gt;github:confidence&lt;&#x2F;a&gt;, старался написать код очень красиво и безопасно. В итоге понял, float - это динамическая типизация на уровне процессора, и я хочу чтобы он был на алгебраических типах данных)))0)&lt;&#x2F;p&gt;
&lt;p&gt;Но это уже совсем другая история, и тема следующего поста...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;otrezok-1-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#otrezok-1-1&quot;&gt;#&lt;&#x2F;a&gt;Отрезок [-1, 1]&lt;&#x2F;h1&gt;
&lt;p&gt;Вообще я очень люблю отрезок &lt;code&gt;[-1, 1]&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Год назад, когда я писал &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;72e893134ee23ff39607e02c94b3a30d05cd4a53&#x2F;coursework&#x2F;report&#x2F;report.pdf&quot;&gt;курсовую&lt;&#x2F;a&gt; по &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D1%8B%D1%85_%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82%D0%BE%D0%B2&quot;&gt;МКЭ&lt;&#x2F;a&gt;, мне нужно было провести исследование того насколько хорошо метод работает на неравномерных квадратных сетках, построить графики или таблицы.&lt;&#x2F;p&gt;
&lt;p&gt;Если вы не знаете что такое неравномерная сетка, то вот иллюстрация (которую я нарисовал &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;bufdraw&#x2F;blob&#x2F;b466ecf8e3aa8936fc410809b3644462004fa46e&#x2F;examples&#x2F;grid.rs&quot;&gt;кодом&lt;&#x2F;a&gt;). Свойство этой сетки в том, что каждый следующий элемент больше другого в &lt;code&gt;c&lt;&#x2F;code&gt; раз, где &lt;code&gt;c&lt;&#x2F;code&gt; - какое-то положительное число от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;∞&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;900&quot;
    height=&quot;390&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c0f22f2615f12af100.webp&quot; 
    onclick=&quot;full_screen(&#x27;grid.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;grid.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Все обычно строили таблицы, где брали несколько неравномерных сеток и точности на ней, и делали какие-то выводы. А я грёбаный перфекционист, я заставлял компьютер трудиться не покладая транзисторов, и поэтому перебирал с очень маленьким шагом всё что можно, и строил графики через латех.&lt;&#x2F;p&gt;
&lt;p&gt;Сначала я, как и все задавал число c от &lt;code&gt;0&lt;&#x2F;code&gt; до &lt;code&gt;∞&lt;&#x2F;code&gt;. Получается, чем ближе c к нулю, тем сгущённей сетка к правому краю, а чем ближе она к бесконечности, тем сгущённей к левому.&lt;&#x2F;p&gt;
&lt;p&gt;Но проводить исследования на чём-то до бесконечности не удобно, взгляните на этот график:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;841&quot;
    height=&quot;380&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5e3debe8697ea3f800.webp&quot; 
    onclick=&quot;full_screen(&#x27;graph1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;graph1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Где мне здесь остановиться? На &lt;code&gt;10^5&lt;&#x2F;code&gt;? На &lt;code&gt;10^10&lt;&#x2F;code&gt;? Делать экспоненциальное возрастание икса и логарифмическую шкалу? Непонятно. Тем более это очень неудобно логически воспринимать: несимметрично право и лево как-то получается.&lt;&#x2F;p&gt;
&lt;p&gt;Тогда я принял решение придумать такую функцию, которая позволяет задавать неравномерные сетки очень удобно, чтобы для значения коэффициента -1, сетка сгущалась к левому краю, а при значении коэффициента 1 сетка сгущалась к правому краю.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1046&quot;
    height=&quot;709&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c9d0f7e18f5a189f00.webp&quot; 
    onclick=&quot;full_screen(&#x27;text.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;text.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Придумал и &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;72e893134ee23ff39607e02c94b3a30d05cd4a53&#x2F;coursework&#x2F;report&#x2F;file.tex#L503-L521&quot;&gt;описал&lt;&#x2F;a&gt; в отчёте.&lt;&#x2F;p&gt;
&lt;p&gt;А вот так офигенно выглядят исследования где одновременно меняется параметр сетки по осям &lt;code&gt;X&lt;&#x2F;code&gt; и &lt;code&gt;Y&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;480&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;470cbfaf1af290f900.webp&quot; 
    onclick=&quot;full_screen(&#x27;1.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;1.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;480&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e42e4b861f07502100.webp&quot; 
    onclick=&quot;full_screen(&#x27;2.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;2.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</description>
        </item>
        <item>
            <title>Произвольная нейросеть</title>
            <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/arbitrary-nn/</link>
            <guid>https://testzorax.github.io/p/arbitrary-nn/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;У вас не возникало ощущения что все текущие нейросети какие-то слишком линейные? Посмотрим, например, на перцептрон:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;395&quot;
    height=&quot;354&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;5faa13a2b78bbd8600.webp&quot; 
    onclick=&quot;full_screen(&#x27;perceptron.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;perceptron.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D0%B5%D1%80%D1%86%D0%B5%D0%BF%D1%82%D1%80%D0%BE%D0%BD#&#x2F;media&#x2F;%D0%A4%D0%B0%D0%B9%D0%BB:Perceptron-ru.svg&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Или на многослойную нейронную сеть:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;958&quot;
    height=&quot;455&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;87116efccecb22a700.webp&quot; 
    onclick=&quot;full_screen(&#x27;multilayered.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;multilayered.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D0%B5%D1%80%D1%86%D0%B5%D0%BF%D1%82%D1%80%D0%BE%D0%BD#&#x2F;media&#x2F;%D0%A4%D0%B0%D0%B9%D0%BB:Neuro.PNG&quot;&gt;Источник&lt;&#x2F;a&gt;&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;Когда я только изучал эту тему, у меня была такая мысль:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Почему в них сигнал распространяется только в направлении слева-направо? Где циклы? Как без циклов возможны сложные вычисления?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Но на самом деле нейросети и не обязаны быть произвольными. Уже в таком виде они справляются с большим количеством задач. &lt;&#x2F;p&gt;
&lt;p&gt;Кстати, благодаря этой линейнойсти мы можем выжимать максимум из наших текущих вычислительных мощностей, используя очень большие нейросети. На них сигнал распространяется без всяких циклов, а значит это быстрее вычислять. &lt;&#x2F;p&gt;
&lt;p&gt;Да и для таких нейросетей придумали в своё время алгоритм обратного распространения ошибки.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;primer-proizvol-noi-neiroseti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#primer-proizvol-noi-neiroseti&quot;&gt;#&lt;&#x2F;a&gt;Пример произвольной нейросети&lt;&#x2F;h1&gt;
&lt;p&gt;Не знаю откуда мы все это берём, но мы точно знаем, что в мозгу не могут быть такие однонаправленные связи, там полюбому должны присутсововать циклы и прочие очень сложные штуки. Нейросеть в нашем мозгу должна выглядеть примерно так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;932&quot;
    height=&quot;482&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;16889bdb07c4ab4a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;arbitrary_nn.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;arbitrary_nn.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;То есть как просто простой направленный граф без всяких ограничений.&lt;&#x2F;p&gt;
&lt;p&gt;Очевидно, что такая нейросеть должна обладать возможность что-то &amp;quot;запоминать&amp;quot; на краткосрочный период, делать цикличные движения. Такая нейросеть идеально подходит для использования в агентах внутри симуляций.&lt;&#x2F;p&gt;
&lt;p&gt;Если мы симулируем агента в какой-то среде, то мы должны напрямую симулировать процесс &amp;quot;движения сигнала&amp;quot;, задавать какие-то ограничения по количество этих передвижений сигнала для одного шага, накапливать результат на красных выходных нейронах и что-то подобное.&lt;&#x2F;p&gt;
&lt;p&gt;Я не стал на этом изображении расставлять веса нейронных связей, чтобы не загромождать изображение, но по факту они там должны быть.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, произвольная нейросеть была использована в этом видео:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;5lJuEW-5vr8&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;И ведь действительно, интуитивно очевидно, что для симуляции агентов, пытающихся развиваться в виртуальном или реальном мире, надо использовать максимально общий класс нейросетей - произвольные! &lt;&#x2F;p&gt;
&lt;p&gt;Меня очень долго волновала проблема, почему нигде в интернете я не могу найти как учёные используют такие прозвольные нейросети, неужто целая категория нейронных сетей берёт и простаивает??? Значит могу прийти я со своими произвольными нейросетями и взорвать науку?!&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению, нет.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;rekkurentnaia-neironnaia-set&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#rekkurentnaia-neironnaia-set&quot;&gt;#&lt;&#x2F;a&gt;Реккурентная нейронная сеть&lt;&#x2F;h1&gt;
&lt;p&gt;Чтобы понять дальнейшее повествование, надо понять что такое реккурентная нейросеть. Для ознакомления рекомендую это видео:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;ADcu9rWK_3I&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Тут расскажут не только как это работает в общем виде, но ещё и расскажут про одну очень хитрую современную архитектуру LSTM.&lt;&#x2F;p&gt;
&lt;p&gt;Ну, или можете это проигнорировать (всё-таки час идёт) и просто попытаться понять суть из контекста.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;svodim-proizvol-nuiu-neiroset-k-rekkurentnoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#svodim-proizvol-nuiu-neiroset-k-rekkurentnoi&quot;&gt;#&lt;&#x2F;a&gt;Сводим произвольную нейросеть к реккурентной&lt;&#x2F;h1&gt;
&lt;p&gt;Сначала пронумеруем все нейроны.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;931&quot;
    height=&quot;481&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d21fc5fc32af109600.webp&quot; 
    onclick=&quot;full_screen(&#x27;arbitrary_nn_enumerated.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;arbitrary_nn_enumerated.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Затем уберём все связи, и расположим все нейроны сверху-вниз, и сделаем второй столбик-дубликат первого. Это показано на следующей картинке слева. &lt;&#x2F;p&gt;
&lt;p&gt;Теперь просто остаётся добавить связи, но добавлять будем таким образом, что связь может быть направлена только из левого столбика в правый. Результат показан на правой части картинки.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;428&quot;
    height=&quot;806&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d1aa4d3e234ebbde00.webp&quot; 
    onclick=&quot;full_screen(&#x27;arbitrary_nn_two.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;arbitrary_nn_two.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Это и есть реккурентная нейросеть, мы свели всё к ней! Значит, реккурентная нейросеть способна представить любую топологию нейросети, и нет смысла изобретать свои собственные велосипеды.&lt;&#x2F;p&gt;
&lt;p&gt;Как видно, здесь слева не используются выходные нейроны, а справа не используются входные нейроны.&lt;&#x2F;p&gt;
&lt;p&gt;И действительно, если подумать как здесь протекают сигналы, это просто другой способ обозначения нейросети с произвольной архитектурой. Это даже напоминает матрицу смежности для представления графа. То есть можно визуализировать это так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;808&quot;
    height=&quot;798&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1b74f95829bf076c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;matrix_nn.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;matrix_nn.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Так как веса не заданы, то можно просто обозначить наличие связи при помощи красного квадрата. И в таком виде очевидно, что входные и выходные данные надо представлять как вектор, а саму нейросеть как матрицу.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати в таком виде невозможно обозначить больше чем одну связь из одной ноды в другую. Вообще не знаю зачем это может понадобиться, кроме как использовать разные функции активации, да и это тоже вполне бессмысленная вещь, так что оставим этот случай.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;241&quot;
    height=&quot;81&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;968306985082cb6500.webp&quot; 
    onclick=&quot;full_screen(&#x27;not_allowed.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;not_allowed.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;pochemu-eto-luchshe&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pochemu-eto-luchshe&quot;&gt;#&lt;&#x2F;a&gt;Почему это лучше&lt;&#x2F;h1&gt;
&lt;p&gt;И я даже скажу, что в таком виде произвольная нейросеть получается лучше, чем её изначальный интуитивный вид. Почему?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Во-первых&lt;&#x2F;strong&gt; вы можете использовать всю мощь, что развилась вокруг реккурентных нейросетей, будь то софт для их обучения или множество научных работ, например про преодоление взрыва градиентов.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Во-вторых&lt;&#x2F;strong&gt; представлять её таким образом в памяти вычислительно эффективней. Предположим как бы вы стали реализовывать класс, обрабатывающий нейросеть, которую мы нарисовали в самом начале? Наверняка бы делали напрямик: хранили бы где-то массив импульсов, хранили бы граф связей и перемещали бы импульсы по этому графу. А распараллеливать это добро очень сложно.&lt;&#x2F;p&gt;
&lt;p&gt;А реккурентные нейросети очень легко представляются матрицей, которую можно просто умножать на вектор чисел. Это даже с точки зрения кэша процессора куда эффективнее. Тем более для умножения матриц уже написали вагон и маленькую тележку сверх-быстрых параллельных библиотек, не говоря о умножении матриц на видеокарте.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kak-ia-prishiol-k-etoi-idee&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-ia-prishiol-k-etoi-idee&quot;&gt;#&lt;&#x2F;a&gt;Как я пришёл к этой идее&lt;&#x2F;h1&gt;
&lt;p&gt;Совершенно случайно. Нигде об этом прямым текстом не пишется. Мне непонятно, почему, ведь это очень важно! Можно же было просто написать:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Реккурентная нейронная сеть позволяет имитировать нейросеть, представляющую из себя произвольный граф.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Так что не взорвём мы науку с нашими произвольными нейросетями, они уже существовали до нас, но скрывались под другим названием, просто никто толком не знал, что это они.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь в следующий раз, когда надумаете писать свою эволюцию агентов с произвольными нейросетями и аниме-тянками, вы не наступите на грабли велосипедостроения, и сможете использовать отлаженный и оптимизированный инструментарий реккурентных нейросетей!&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, приглашаю всех людей, заинтересованных в симуляции эволюции, в чатик в телеграме: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;emergevolution&quot;&gt;https:&#x2F;&#x2F;t.me&#x2F;emergevolution&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Обозначения для линейной алгебры</title>
            <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/linear-algebra/</link>
            <guid>https://testzorax.github.io/p/linear-algebra/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Знаете же эту байку, что после внедрения арабских цифр вместо римских, развитие математики пошло семимильными шагами?&lt;&#x2F;p&gt;
&lt;p&gt;Из этой байки можно сделать вывод, что иногда хорошая система обозначений или кодировки чего-то, может оказывать значительное влияние на то, как люди это воспринимают и насколько легко могут этим оперировать.&lt;&#x2F;p&gt;
&lt;p&gt;В данной статье рассказывается об обозначениях для базисов, векторов и линейных операторов, при помощи которых можно намного лучше понимать что же, чёрт возьми, происходит в линейной алгебре.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;abstraktnyi-vektor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#abstraktnyi-vektor&quot;&gt;#&lt;&#x2F;a&gt;Абстрактный вектор&lt;&#x2F;h1&gt;
&lt;script type=&quot;math&#x2F;tex&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;Со школы мы привыкли, что вектор - это набор &lt;strong&gt;чисел&lt;&#x2F;strong&gt; &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x} = (1, 2, 3)^T&lt;&#x2F;script&gt;. Но в линейной алгебре любой вектор - это &lt;em&gt;абстрактный объект&lt;&#x2F;em&gt;, обладающий определёнными свойствами. &lt;&#x2F;p&gt;
&lt;p&gt;Например у нас может быть два вектора: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x} =&lt;&#x2F;script&gt;апельсиновый сок, &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{y}=&lt;&#x2F;script&gt; яблочный сок. И тогда результатом их суммы может быть: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x}+2\mathbf{y}=&lt;&#x2F;script&gt;однояблочно-двуапельсиновый сок.&lt;&#x2F;p&gt;
&lt;p&gt;Свойства вектора задаются определением &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%92%D0%B5%D0%BA%D1%82%D0%BE%D1%80%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D1%81%D1%82%D1%80%D0%B0%D0%BD%D1%81%D1%82%D0%B2%D0%BE&quot;&gt;линейного пространства&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;oboznacheniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oboznacheniia&quot;&gt;#&lt;&#x2F;a&gt;Обозначения&lt;&#x2F;h1&gt;
&lt;p&gt;При помощи долларов будет обозначаться, как это пишется в &lt;code&gt;TeX&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Число&lt;&#x2F;strong&gt; - маленькая буква, обычный шрифт, &lt;code&gt;$x$&lt;&#x2F;code&gt;, &lt;code&gt;$y$&lt;&#x2F;code&gt;, &lt;code&gt;$z$&lt;&#x2F;code&gt;: &lt;script type=&quot;math&#x2F;tex&quot;&gt;x&lt;&#x2F;script&gt;, &lt;script type=&quot;math&#x2F;tex&quot;&gt;y&lt;&#x2F;script&gt;, &lt;script type=&quot;math&#x2F;tex&quot;&gt;z&lt;&#x2F;script&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Абстрактный вектор&lt;&#x2F;strong&gt; - маленькая буква, жирным прямым шрифтом, &lt;code&gt;$\mathbf{x}$&lt;&#x2F;code&gt;: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x}&lt;&#x2F;script&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Базис&lt;&#x2F;strong&gt; - маленькая буква, ажурным шрифтом, &lt;code&gt;$\mathbb{e}$&lt;&#x2F;code&gt;: 𝕖. Является вектор-строкой из абстрактных векторов:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;𝕖=(\mathbf{e}_1, \mathbf{e}_2, \dots, \mathbf{e}_n)&lt;&#x2F;script&gt;
&lt;p&gt;&lt;strong&gt;Линейный оператор&lt;&#x2F;strong&gt; - большая буква, жирным шрифтом, &lt;code&gt;$\mathbf{A}$&lt;&#x2F;code&gt;: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{A}(\mathbf{x})&lt;&#x2F;script&gt;, обязательно использование скобок после него.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Численный вектор&lt;&#x2F;strong&gt; - абстрактный вектор, заключённый в квадратные скобки, и с дописанным снизу базисом, куда он спроецирован, &lt;code&gt;$[\mathbf{x}]_\mathbb{e}$&lt;&#x2F;code&gt;: &lt;script type=&quot;math&#x2F;tex&quot;&gt;[\mathbf{x}]_𝕖&lt;&#x2F;script&gt;. Это вектор &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x}&lt;&#x2F;script&gt; в базисе &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕖&lt;&#x2F;script&gt;. Является вектор-столбцом чисел.&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{x}]_𝕖 = 
\begin{pmatrix}
	x_1\\
	x_2\\
	\ldots\\
	x_n
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;p&gt;Любой абстрактный вектор можно представить в виде:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{x} = 𝕖\cdot [\mathbf{x}]_𝕖&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{x} = (\mathbf{e}_1, \mathbf{e}_2, \dots, \mathbf{e}_n)\cdot\begin{pmatrix}
	x_1\\
	x_2\\
	\ldots\\
	x_n
\end{pmatrix}&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{x} = x_1\mathbf{e}_1 + x_2\mathbf{e}_2 + \dots + x_n\mathbf{e}_n&lt;&#x2F;script&gt;
&lt;p&gt;Эти формулы задают соответствие между абстрактным и численными векторами!&lt;&#x2F;p&gt;
&lt;p&gt;Заметьте, что можно ввести базис &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕒=(\mathbf{a}_1, \mathbf{a}_2, \dots, \mathbf{a}_n)&lt;&#x2F;script&gt;. Тогда можно записать вектор &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{x}&lt;&#x2F;script&gt; через этот базис:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{x} = 𝕒\cdot [\mathbf{x}]_𝕒&lt;&#x2F;script&gt;
&lt;p&gt;И в другом базисе будут другие числа, но вектор останется одним и тем же. Конечно, на практике мы никогда не столкнёмся с абстрактными векторами, а всегда будем работать с числовыми столбцами, но это удобная абстракция, чтобы обозначить один и тот же объект.&lt;&#x2F;p&gt;
&lt;p&gt;По сути численный вектор - это &lt;em&gt;проекция&lt;&#x2F;em&gt; абстрактного вектора на базис.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, линейные операции над вектором равносильны линейным операциям над его координатным столбцом:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[c\cdot \mathbf{x}]_𝕖 = c\cdot [\mathbf{x}]_𝕖 &lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\displaystyle [\mathbf{x} + \mathbf{y}]_𝕖 = [\mathbf{x}]_𝕖 + [\mathbf{y}]_𝕖 &lt;&#x2F;script&gt;
&lt;h1 id=&quot;perekhod-iz-odnogo-bazisa-v-drugoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#perekhod-iz-odnogo-bazisa-v-drugoi&quot;&gt;#&lt;&#x2F;a&gt;Переход из одного базиса в другой&lt;&#x2F;h1&gt;
&lt;p&gt;В этой задаче данные обозначения проявляют свою силу, потому что со стандартными обозначениями в ней происходит больше всего путаницы при решении задач.&lt;&#x2F;p&gt;
&lt;p&gt;Скажем, мы смогли выразить вектора базиса &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕒&lt;&#x2F;script&gt; через вектора базиса &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕖&lt;&#x2F;script&gt;:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
\left\{
\begin{aligned}
	&amp;\mathbf{a_1} = 𝕖 \cdot [a_1]_𝕖 = \alpha_{1,1}\mathbf{e_1} + \alpha_{1,2}\mathbf{e_2} + \ldots + \alpha_{1,n}\mathbf{e_n} \\
	&amp;\mathbf{a_2} = 𝕖 \cdot [a_2]_𝕖 = \alpha_{2,1}\mathbf{e_1} + \alpha_{2,2}\mathbf{e_2} + \ldots + \alpha_{2,n}\mathbf{e_n} \\
	&amp;\ldots \\
	&amp;\mathbf{a_n} = 𝕖 \cdot [a_n]_𝕖 = \alpha_{n,1}\mathbf{e_1} + \alpha_{n,2}\mathbf{e_2} + \ldots + \alpha_{n,n}\mathbf{e_n}
\end{aligned}
\right.
&lt;&#x2F;script&gt;
&lt;p&gt;И ввёдем такую матрицу:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
P_{𝕖𝕒} = 
\left([a_1]_𝕖, [a_2]_𝕖, \ldots, [a_n]_𝕖\right)
&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
P_{𝕖𝕒} = 
\begin{pmatrix}
	\alpha_{1,1}&amp; \alpha_{2, 1}&amp; \ldots&amp; \alpha_{n,1} \\
	\alpha_{1,2}&amp; \alpha_{2, 2}&amp; \ldots&amp; \alpha_{n,2} \\
	\ldots&amp; \ldots&amp; \ldots&amp; \ldots \\
	\alpha_{1,n}&amp; \alpha_{2, n}&amp; \ldots&amp; \alpha_{n,n}
\end{pmatrix}
&lt;&#x2F;script&gt;
&lt;p&gt;Тогда изначальная система равносильна следующим записям:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
\begin{matrix}
	&amp;P_{𝕖𝕒}^T \cdot 𝕖^T &amp;= &amp;𝕒^T \\
	&amp;𝕖 \cdot P_{𝕖𝕒} &amp;= &amp;𝕒 \\
	&amp;𝕒 \cdot P_{𝕖𝕒}^{-1} &amp;= &amp;𝕖 \\
	&amp;𝕒 \cdot P_{𝕒𝕖} &amp;= &amp;𝕖
\end{matrix}
&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex&quot;&gt;P_{𝕖𝕒}&lt;&#x2F;script&gt; называется матрицей перехода от базиса 𝕖 к базису 𝕒.
&lt;p&gt;Из имеющихся у нас формул можно вывести ещё несколько полезных:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt; P_{𝕖𝕒} = P_{𝕒𝕖}^{-1} &lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt; 𝕒 = 𝕖 \cdot P_{𝕖𝕒} &lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt; P_{𝕒𝕕} = P_{𝕒𝕖}\cdot P_{𝕖𝕕} &lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt; [\mathbf{x}]_𝕒 = P_{𝕖𝕒} \cdot [\mathbf{x}]_𝕖 &lt;&#x2F;script&gt;
&lt;p&gt;Благодаря полученным формулам мы теперь знаем как переводить численные вектора из одного базиса в другой.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;lineinyi-operator&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#lineinyi-operator&quot;&gt;#&lt;&#x2F;a&gt;Линейный оператор&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Линейный оператор&lt;&#x2F;strong&gt; - это функция, принимающая на вход вектор, и возвращающая вектор. При этом пространство первого вектора может отличаться от пространства второго вектора. &lt;&#x2F;p&gt;
&lt;p&gt;В математике любят писать: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{A}\mathbf{x}&lt;&#x2F;script&gt;, что означает, что &amp;quot;оператор применяется к вектору&amp;quot;. Меня эта нотация бесит. Она похожа на умножение, и всегда надо заранее знать, что &lt;script type=&quot;math&#x2F;tex&quot;&gt;\mathbf{A}&lt;&#x2F;script&gt; - функция.&lt;&#x2F;p&gt;
&lt;p&gt;Этот &amp;quot;оператор&amp;quot; называется &lt;em&gt;линейным&lt;&#x2F;em&gt;, потому что он обладает линейными свойствами (как и практически всё в линейной алгебре).&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{A}(\mathbf{x} + \mathbf{y}) = \mathbf{A}(\mathbf{x}) + \mathbf{A}(\mathbf{y})&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\mathbf{A}(c\cdot\mathbf{x}) = c\cdot\mathbf{A}(\mathbf{x})&lt;&#x2F;script&gt;
&lt;p&gt;Чем же является линейный оператор в нашем мире чисел? Оказывается, можно доказать, что любой линейный оператор для данных базисов можно свести к единственной матрице! При этом операция &amp;quot;применения оператора к вектору&amp;quot; будет являться умножением матрицы на этот вектор. &lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
[\mathbf{A}]_{𝕖𝕒}\cdot[\mathbf{x}]_𝕖 = [\mathbf{y}]_𝕒
&lt;&#x2F;script&gt;
&lt;p&gt;Именно из-за этого я стараюсь не использовать применения оператора без скобочек, потому что у нас появляется ещё больше шансов спутать абстрактный оператор с матрицей.&lt;&#x2F;p&gt;
&lt;p&gt;Заметьте, что матрица зависит от двух базисов: от входных данных и от результатов! Ведь результат может быть 50-мерный вектор, а вход - 2-мерный. Конечно, на практике чаще встречается, что вход и выход находятся в одном базисе и следовательно имеют одинаковую размерность. Поэтому покажу обозначение именно для этого случая:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;
[\mathbf{A}]_𝕖\cdot[\mathbf{x}]_𝕖 = [\mathbf{y}]_𝕖
&lt;&#x2F;script&gt;
&lt;p&gt;Ещё раз подчеркну, линейный оператор ≠ матрице линейного оператора. &lt;&#x2F;p&gt;
&lt;p&gt;Линейный оператор - это абстрактная функция, а матрица - это конкретная её реализация в виде набора чисел.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vyvod-formuly-perevoda-matritsy-lineinogo-operatora&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvod-formuly-perevoda-matritsy-lineinogo-operatora&quot;&gt;#&lt;&#x2F;a&gt;Вывод формулы перевода матрицы линейного оператора&lt;&#x2F;h1&gt;
&lt;p&gt;Скажем, мы знаем как линейный оператор представляется в пространстве &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕖&lt;&#x2F;script&gt;:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{A}]_𝕖\cdot[\mathbf{x}]_𝕖 = [\mathbf{y}]_𝕖&lt;&#x2F;script&gt;
&lt;p&gt;И нам нужно получить его матрицу в базисе &lt;script type=&quot;math&#x2F;tex&quot;&gt;𝕒&lt;&#x2F;script&gt;, то есть такую матрицу, чтобы выполнялось следующее равенство:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{A}]_𝕒\cdot[\mathbf{x}]_𝕒 = [\mathbf{y}]_𝕒&lt;&#x2F;script&gt;
&lt;p&gt;Тогда для вывода нам понадобится следующее:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt; [\mathbf{x}]_𝕖 = P_{𝕒𝕖} \cdot [\mathbf{x}]_𝕒 &lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{y}]_𝕖 = P_{𝕒𝕖} \cdot [\mathbf{y}]_𝕒&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{A}]_𝕖\cdot[\mathbf{x}]_𝕖 = [\mathbf{y}]_𝕖&lt;&#x2F;script&gt;
&lt;p&gt;Подставляем первые две формулы в третью:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{A}]_𝕖\cdot P_{𝕒𝕖} \cdot [\mathbf{x}]_𝕒 = P_{𝕒𝕖} \cdot [\mathbf{y}]_𝕒&lt;&#x2F;script&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;P_{𝕒𝕖}^{-1} \cdot [\mathbf{A}]_𝕖\cdot P_{𝕒𝕖} \cdot [\mathbf{x}]_𝕒 = [\mathbf{y}]_𝕒&lt;&#x2F;script&gt;
&lt;p&gt;И получаем такой ответ:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;[\mathbf{A}]_𝕒 = P_{𝕒𝕖}^{-1} \cdot [\mathbf{A}]_𝕒\cdot P_{𝕒𝕖}&lt;&#x2F;script&gt;
&lt;h1 id=&quot;pochemu-eti-oboznacheniia-khoroshi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pochemu-eti-oboznacheniia-khoroshi&quot;&gt;#&lt;&#x2F;a&gt;Почему эти обозначения хороши?&lt;&#x2F;h1&gt;
&lt;p&gt;Вы могли заметить, что впервые в жизни поняли что происходит в этой чертовой линейной алгебре, и это неспроста. В стандартных обозначениях нет никакого разделения между вектором, его проекцией на базис, и базисом. Всё &lt;strong&gt;тупо&lt;&#x2F;strong&gt; и &lt;strong&gt;лениво&lt;&#x2F;strong&gt; обозначается обычными нежирными неажурными буквами. &lt;&#x2F;p&gt;
&lt;p&gt;Именно из-за этого тебе постоянно приходится помнить о контексте. И ещё хорошо, если тебе расскажут разницу между абстрактным вектором и числовым столбцом. Обычно преподаватели сами толком не знают разницу, или не знают что на неё надо обратить внимание студентов.&lt;&#x2F;p&gt;
&lt;p&gt;Минус тупого обозначения всего обычными буквами в том, что &lt;strong&gt;обычные буквы начинают обозначать слишком много&lt;&#x2F;strong&gt;. У них появляется многозначность. В зависимости от контекста &lt;script type=&quot;math&#x2F;tex&quot;&gt;a&lt;&#x2F;script&gt; мог быть чем угодно: числом, вектором, базисом и даже оператором младшим.&lt;&#x2F;p&gt;
&lt;p&gt;Соглашусь, что эта система обозначения координатных столцом слишком многосимвольна: для её написания требуется писать &lt;code&gt;[&lt;&#x2F;code&gt;, &lt;code&gt;]&lt;&#x2F;code&gt;, &lt;code&gt;𝕖&lt;&#x2F;code&gt;, а как писать последнее при помощи ручки вообще непонятно. Применять её на практике для решения задач в линейной алгебре невозможно. Поэтому я предлагаю использовать такие обозначения для:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Книг и методичек,&lt;&#x2F;li&gt;
&lt;li&gt;На бумаге, когда в задании фигурирует переход из одного базиса в другой,&lt;&#x2F;li&gt;
&lt;li&gt;На начальных этапах, чтобы различать абстрактный вектор и столбец чисел,&lt;&#x2F;li&gt;
&lt;li&gt;Когда забыл как всё работает.
Далее же, &lt;em&gt;когда научишься всё понимать&lt;&#x2F;em&gt;, можно использовать обычные буквы, для сокращения записей.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Данная система является немного доработанной системой обозначений, рассказанной &lt;a href=&quot;https:&#x2F;&#x2F;ciu.nstu.ru&#x2F;kaf&#x2F;persons&#x2F;3080&quot;&gt;Овчинниковой Еленой Викторовной&lt;&#x2F;a&gt; на факультете АВТ, университета НГТУ.&lt;&#x2F;p&gt;
&lt;p&gt;Главными фичами этой системы обозначений является:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Вектор разделён на два понятия: абстрактный и числовой.&lt;&#x2F;li&gt;
&lt;li&gt;Для каждого из классов придуманы особые обозначения.&lt;&#x2F;li&gt;
&lt;li&gt;Базис у числого вектора не игнорируется и находится в его обозначении.&lt;&#x2F;li&gt;
&lt;li&gt;Для базиса выбран особый шрифт, чтобы его нельзя было спутать с вектором или числом.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;vyvod&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvod&quot;&gt;#&lt;&#x2F;a&gt;Вывод&lt;&#x2F;h1&gt;
&lt;center&gt;&lt;big&gt;Правильные обозначения важны.&lt;&#x2F;big&gt;&lt;&#x2F;center&gt;</description>
        </item>
        <item>
            <title>Эволюция виртуальных существ (перевод видео 1994 года)</title>
            <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/evolution-virtual-creatures/</link>
            <guid>https://testzorax.github.io/p/evolution-virtual-creatures/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Случайно встретил на просторах интернета этот занимательный видос, и мне он настолько понравился, что я решил поделиться им с русским зрителем: перевести и озвучить. Результат опубликовал на ютуб:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;2ZJijzzJzWU&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Далее я приведу ссылки и немного подробнее расскажу о том, как это работает, расскажу какие идеи у меня возникли после его просмотра.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ssylki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ssylki&quot;&gt;#&lt;&#x2F;a&gt;Ссылки&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;details&#x2F;sims_evolved_virtual_creatures_1994&quot;&gt;Оригинал&lt;&#x2F;a&gt; видео на сайте archive.org.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.karlsims.com&#x2F;evolved-virtual-creatures.html&quot;&gt;Страница&lt;&#x2F;a&gt; на сайте Карла Симса об этом проекте.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.karlsims.com&#x2F;papers&#x2F;alife94.pdf&quot;&gt;Научная статья&lt;&#x2F;a&gt; об этой работе, её можно найти на странице выше.&lt;&#x2F;li&gt;
&lt;li&gt;Немного дополненная &lt;a href=&quot;http:&#x2F;&#x2F;www.karlsims.com&#x2F;papers&#x2F;siggraph94.pdf&quot;&gt;статья&lt;&#x2F;a&gt; для конференции SIGGRAPH. Крайне рекомендую прочитать, в ней нет никаких сложных формул, только идеи и результаты. Плюс в ней больше информации, чем в статье выше. Всё, кроме моих идей, далее основывается на этой статье.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=WmrTNrtE-Lk&quot;&gt;Видео&lt;&#x2F;a&gt;, где тоже самое, что и в оригинальном видео рассказывает сам Карл. Никакой особо новой информации там нет, но на всякий случай пусть будет.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;patents.google.com&#x2F;patent&#x2F;US5511158?oq=5511158&quot;&gt;Патент #5511158&lt;&#x2F;a&gt;, где подробно рассказывается о том, как создавать и мутировать направленные графы, на основе которых строится тело и мозг существ.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;evoliutsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#evoliutsiia&quot;&gt;#&lt;&#x2F;a&gt;Эволюция&lt;&#x2F;h1&gt;
&lt;p&gt;Кто не понял, в этом видео показываются результаты, полученные путём симуляции эволюции для неких существ в симулируемой физической среде. Лучшие существа отбирались в соответствии с эффективностью решения своих задач. Например, в самом начале говорят что для существ использовалась скорость плавания как критерий для отбора. Все существа эволюционировали независимо, каждое умеет выполнять только свою задачу, там нет того, кто бы делал все три.&lt;&#x2F;p&gt;
&lt;p&gt;Предполагаю, что читатель данной статьи знаком с тем, как работает эволюция или &lt;code&gt;генетический алгоритм&lt;&#x2F;code&gt;, и особо об этом рассказывать не надо. Если же нет, то срочно бегите смотреть &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;dN_6B1auRV4&quot;&gt;это&lt;&#x2F;a&gt; или &lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;SfEZSyvbj2w&quot;&gt;это&lt;&#x2F;a&gt; видео. А вообще я планирую в ближайшее время собрать множество материалов по симуляции эволюции, так что подписывайтесь на группу в ВК.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;1994-god-ser-iozno&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#1994-god-ser-iozno&quot;&gt;#&lt;&#x2F;a&gt;1994 год, серьёзно?&lt;&#x2F;h1&gt;
&lt;p&gt;Я тоже был невероятно удивлен! Получены отличные результаты, и удивительно, что в то время вообще могли помыслить об симуляции 3D существ. Я бы предпочел симулировать 2D ввиду ограниченной вычислительной мощности тех времён.&lt;&#x2F;p&gt;
&lt;p&gt;Тем более, судя по теням и картинкам на сайте, для визуализации использовали &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%A2%D1%80%D0%B0%D1%81%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0_%D0%BB%D1%83%D1%87%D0%B5%D0%B9&quot;&gt;рейтрейсинг&lt;&#x2F;a&gt;, тоже очень требовательный к вычислениям метод.&lt;&#x2F;p&gt;
&lt;p&gt;Согласно научной статье, программа вычислялась на суперкомпьютере &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Connection_Machine&quot;&gt;CM-5&lt;&#x2F;a&gt;, который, на минуточку, в 1993 году был первым в списке &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;TOP500&quot;&gt;TOP500&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Так же в статье приведён пример времени работы программы: при размере популяции в 300 особей, обработка 100 поколений на 32 ядрах этого компьютера занимала 3 часа. Мне кажется, в 2019 наши домашние ПК могут работать с такой же скоростью для подобной программы.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению, далее Карл Симс, если изучить его сайт, не занимался этой темой.&lt;&#x2F;p&gt;
&lt;p&gt;Зато занимался чем-то подобным ранее:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;aUdCS1lLiYs&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen style=&quot;width: 560px; height: 315px;&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;center&gt;
&lt;h1 id=&quot;ustroistvo-sushchestva&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ustroistvo-sushchestva&quot;&gt;#&lt;&#x2F;a&gt;Устройство существа&lt;&#x2F;h1&gt;
&lt;p&gt;У данных существ мозг и тело идейно связаны, поэтому нельзя объяснить принцип устройства одного без объяснения принципа устройства другого.&lt;&#x2F;p&gt;
&lt;p&gt;Существо состоит из жёстких кубоидов (параллелепипедов), соединенных шарнирами.&lt;&#x2F;p&gt;
&lt;p&gt;Этот внешний вид строится на основе генетического кода, который является направленным графом, описывающим какие части могут соединяться с какими и в каких местах. На основе одного генетического кода можно сгенерировать множество различных существ.&lt;&#x2F;p&gt;
&lt;p&gt;Ниже изображён пример генов и результирующих существ. Обратите внимание на то, что некоторые части могут строиться рекурсивно.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;661&quot;
    height=&quot;900&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;54270424b3b3a76800.webp&quot; 
    onclick=&quot;full_screen(&#x27;graph_creature.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;graph_creature.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;На данной картинке разные части подписаны для удобства, это лишь рукотворный пример.&lt;&#x2F;p&gt;
&lt;p&gt;Каждая вершина графа генетического материала содержит иформацию:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Относительный размер параллелепипеда.&lt;&#x2F;li&gt;
&lt;li&gt;Ограничения на рекурсивность данной части тела (если она ссылается сама на себя).&lt;&#x2F;li&gt;
&lt;li&gt;Локальная нейронная сеть (в статье это называется вложенный граф).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Каждое ребро графа содержит информацию:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Тип шарнира, связующего две части: закрепленный, свободный, вокруг определенной оси, и другие которые я не понял (revolute, twist, universal, bend-twist, twist-bend).&lt;&#x2F;li&gt;
&lt;li&gt;Ограничения на вращение.&lt;&#x2F;li&gt;
&lt;li&gt;В каком месте кубоида и под каким углом расположено соединение.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Обратите внимание на то, что у каждой части тела есть своя локальная нейросеть! Вообще это решение кажется логичным, когда у тебя может быть сгенерировано множество существ одной конфигурации. Не эволюционировать же для них каждый раз с нуля новую нейросеть! &lt;&#x2F;p&gt;
&lt;p&gt;Итоговая нейросеть, которая получается объединением и копированием локальных нейросетей в одну конфигурацию вида я называю &lt;code&gt;глобальной нейронной сетью&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ustroistvo-mozga&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#ustroistvo-mozga&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Устройство мозга&lt;&#x2F;h2&gt;
&lt;p&gt;Современные нейросети представляют собой жёсткую линейную архитектуру (в виде &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9D%D0%B0%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%BD%D1%8B%D0%B9_%D0%B0%D1%86%D0%B8%D0%BA%D0%BB%D0%B8%D1%87%D0%B5%D1%81%D0%BA%D0%B8%D0%B9_%D0%B3%D1%80%D0%B0%D1%84&quot;&gt;ацикличного ориентированного графа&lt;&#x2F;a&gt;), и иногда рекуррентную архитектуру. В данной же работе никаких таких ограничений нет, и любой нейрон может связываться с любым другим нейроном, единственное условие - чтобы граф был связным. Части, не принадлежащие основному графу, удаляются сборщиком мусора.&lt;&#x2F;p&gt;
&lt;p&gt;Такая нейросеть в отличие от обычной не является функцией, которую вызвал и на входные данные сразу получил ответ, нет, здесь надо симулировать распространение сигнала, и как далеко пройдет сигнал решать проектировщику. Это ближе к биологическому подходу, и потенциально позволяет добиваться большего разнообразия поведения.&lt;&#x2F;p&gt;
&lt;p&gt;В данной работе на каждую итерацию симуляции приходится две итерации движения сигнала в нейронной сети.&lt;&#x2F;p&gt;
&lt;p&gt;Так же в современных нейросетях все числа на входе умножаются на некоторую константу и складываются, главное различие только в функции активации. В этой же работе реализованы произвольные функции над входными данными, даже умножение и деление. Но для деления есть ограничения на количество входных параметров. А для всех функций количество входных параметров не более трех. Список всех функций:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;&#x2F;code&gt;, &lt;code&gt;*&lt;&#x2F;code&gt;, &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sum-threshold&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sign-of&lt;&#x2F;code&gt;, &lt;code&gt;abs&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;min&lt;&#x2F;code&gt;, &lt;code&gt;max&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;greater-than&lt;&#x2F;code&gt;, &lt;code&gt;if&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;interpolate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sin&lt;&#x2F;code&gt;, &lt;code&gt;cos&lt;&#x2F;code&gt;, &lt;code&gt;atan&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;log&lt;&#x2F;code&gt;, &lt;code&gt;exp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sigmoid&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;integrate&lt;&#x2F;code&gt;, &lt;code&gt;differentiate&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;smooth&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;memory&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;oscillate-wave&lt;&#x2F;code&gt;, &lt;code&gt;oscillate-saw&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;К сожалению я знаю о том, что делают эти функции не больше вашего, и нам остается только догадываться.&lt;&#x2F;p&gt;
&lt;p&gt;Некоторые функции не просто вычисляют ответ на основе своих входных данных, но ещё и &lt;em&gt;хранят некоторое внутреннее состояние&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Аналогично обычным НС, здесь каждый вход умножается на какое-то число. На вход даже может подаваться константа.&lt;&#x2F;p&gt;
&lt;p&gt;Наиболее интересными мне показались функции для осцилляции, благодаря им можно заставить существо двигать частями тела, когда внешние сигналы особо не поступают. Это как будто включился режим &amp;quot;двигаться&amp;quot;, когда выполнилось некоторое условие.&lt;&#x2F;p&gt;
&lt;p&gt;С другой стороны это же разнообразие архитектуры нейронной сети и такого количества функций с намного большей вероятностью может сделать фигню, чем обычные нейронные сети.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moia-ideia-naschiot-konechnykh-avtomatov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moia-ideia-naschiot-konechnykh-avtomatov&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Моя идея насчёт конечных автоматов&lt;&#x2F;h3&gt;
&lt;p&gt;Кстати, на основе этого у меня появилась идея, что поведение существа это по сути --- множество простых режимов с простыми действиями и кучей правил переключения между ними. Поэтому можно сделать мозг сущеста в виде конечного автомата, где каждое состояние обозначает некоторое поведение, а переходы между состояниями осуществляются так же с помощью нейросетей.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом можно эволюционировать не только нейросети, но и конечные автоматы, мне этот подход даже видется более перпективным.&lt;&#x2F;p&gt;
&lt;p&gt;Вдохновлялся &lt;a href=&quot;https:&#x2F;&#x2F;tproger.ru&#x2F;translations&#x2F;finite-state-machines-theory-and-implementation&#x2F;&quot;&gt;этой статьёй&lt;&#x2F;a&gt; про создание NPC на основе конечного автомата. Картинка оттуда для привлечения внимания:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;580&quot;
    height=&quot;350&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1e80164aabc544a900.webp&quot; 
    onclick=&quot;full_screen(&#x27;attention.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;attention.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;vkhodnye-parametry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vkhodnye-parametry&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Входные параметры&lt;&#x2F;h2&gt;
&lt;p&gt;Не забываем что у каждой части тела есть своя локальная нейронная сеть.&lt;&#x2F;p&gt;
&lt;p&gt;У каждой локальной нейронной сети есть следующие входы для своей физической части:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Угол наклона соединения&lt;&#x2F;strong&gt; - передается отдельным нейроном для каждого соединения.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Сенсор касания&lt;&#x2F;strong&gt; - аналогично для каждой грани создаётся отдельный нейрон. Передаёт 1, если контакт есть, и -1, если нет.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;&amp;quot;Фотосенсор&amp;quot;&lt;&#x2F;strong&gt;, для каждой части имеется своя копия. Передает нормализованный относительный вектор направления на источник света или зелёный куб. Название взято в кавычки, потому что настоящее явление света не симулируется, и существо видит свет, даже если по факту оно загорожено другими объектами.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В своей работе Карл Симс говорит, что в качестве сенсоров было бы интересно использовать: акселерометры, &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D1%80%D0%BE%D0%BF%D1%80%D0%B8%D0%BE%D1%80%D0%B5%D1%86%D0%B5%D0%BF%D1%82%D0%BE%D1%80&quot;&gt;проприорецепторы&lt;&#x2F;a&gt;, детекторы запаха и звука. Но в его работе ничего такого не используется, потому что уже имеющихся достаточно для получения интересного поведения.&lt;&#x2F;p&gt;
&lt;p&gt;Одним словом это называется &lt;code&gt;сенсоры&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vykhodnye-parametry&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vykhodnye-parametry&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Выходные параметры&lt;&#x2F;h2&gt;
&lt;p&gt;Далее каждая локальная нейронная сеть имеет выходы, чтобы управлять телом.&lt;&#x2F;p&gt;
&lt;p&gt;На выход каждому шарниру подается пара чисел, задающих силу вращения по разным осям. Для некоторых типов шарниров может подаваться и одно число (но это я уже сам додумал, на самом деле там это не уточняется).&lt;&#x2F;p&gt;
&lt;p&gt;Как я понял каждая часть направляет сигналы на те шарниры, которые соединяют эту часть с родительской.&lt;&#x2F;p&gt;
&lt;p&gt;Для симметрии с предложенными сенсорами, Карл Симс отмечает что было бы интересно использовать издаватели запахов и звуков.&lt;&#x2F;p&gt;
&lt;p&gt;Одним словом это называется &lt;code&gt;эффекторы&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;moia-ideia-o-novykh-effektorakh&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moia-ideia-o-novykh-effektorakh&quot;&gt;#&lt;sup&gt;3&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Моя идея о новых эффекторах&lt;&#x2F;h3&gt;
&lt;p&gt;От себя же добавлю, что было бы интересно использовать эффекторы, которые посылают числа ближайшему существу напрямую в мозг. Так можно было бы сделать простой прототип взаимодействия существ, чтобы, например, научить рыбоподобных существ плавать стаей.&lt;&#x2F;p&gt;
&lt;p&gt;И только когда получится на основе такого хака эволюционировать социальное поведение, можно подумать чтобы они научились общаться через внешнюю среду посредством запахов, визуальных образов итд.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vzaimodeistvie-lokal-nyi-neironnykh-setei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vzaimodeistvie-lokal-nyi-neironnykh-setei&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Взаимодействие локальный нейронных сетей&lt;&#x2F;h2&gt;
&lt;p&gt;Идея распространять на каждую часть тела свою одну и ту же локальную нейронную сеть звучит мега-круто. Например можно создать одну нейронную сеть для части хвоста этого существа:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;creatures_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;В итоге каждая часть будет двигаться единообразно, и такое существо можно легко расширить или уменьшить, или добавить ему пару хвостов. Аналогично можно добавить ноги к существу с 2 и более ногами.&lt;&#x2F;p&gt;
&lt;p&gt;Всё в этой идее хорошо, только непонято каким образом строится глобальная нейронная сеть для собранного существа. Постараюсь рассказать об этом сложном процессе, основываясь на статьях.&lt;&#x2F;p&gt;
&lt;p&gt;Ниже на картинке показан пример из первой статьи. Он довольно простой. Взаимодействие локальных нейросетей между собой представлено через сенсор P1, который отправляет информацию локальным нейронным сетям.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;954&quot;
    height=&quot;814&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8d00044a60b5156900.webp&quot; 
    onclick=&quot;full_screen(&#x27;brain1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;brain1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Следующий пример взят из дополненной статьи для siggraph. &lt;&#x2F;p&gt;
&lt;p&gt;Пунктирной линией показана центральная нейронная сеть, не связанная ни с какой частью. &lt;&#x2F;p&gt;
&lt;p&gt;Обратие внимание, что в ней сенсор &lt;code&gt;J1&lt;&#x2F;code&gt; подает сигнал на вход &lt;code&gt;itp&lt;&#x2F;code&gt;, а в глобальной нейронной сети, с несколькими частями, только один сенсор &lt;code&gt;J1&lt;&#x2F;code&gt; смог послать свой сигнал на &lt;code&gt;itp&lt;&#x2F;code&gt;. Очевидно, что это проблема того, что максимум входов может быть 3. И просто обрезать случайные - не очень красивое решение. Как решаются такие проблемы в статье не говорится.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;945&quot;
    height=&quot;730&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;66533e112d7b88ef00.webp&quot; 
    onclick=&quot;full_screen(&#x27;brain2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;brain2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;moia-ideia-vzaimodeistviia-lokal-nykh-neironnykh-setei&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moia-ideia-vzaimodeistviia-lokal-nykh-neironnykh-setei&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Моя идея взаимодействия локальных нейронных сетей&lt;&#x2F;h2&gt;
&lt;p&gt;У меня появилась собственная идея как организовывать взаимодействие локальных нейронных сетей так, чтобы это было красиво, и чтобы подобных проблем не возникало.&lt;&#x2F;p&gt;
&lt;p&gt;Идея состоит в том, чтобы каждая локальная нейронная сеть стала независима от внутреннего устройства остальных, чтобы у неё появился &lt;em&gt;интерфейс&lt;&#x2F;em&gt;, по которому другие сети могут взаимодействовать с ней и она с другими. &lt;&#x2F;p&gt;
&lt;p&gt;То есть к каждой нейросети помимо собственных входных параметров (сенсоров)&#x2F;собственных выходных параметров (эффекторов) добавляются входные&#x2F;выходные параметры от&#x2F;для других нейросетей. Какие именно нейросети могут отправлять&#x2F;получать информацию, определяется генетическим графом.&lt;&#x2F;p&gt;
&lt;p&gt;Например, возьмем уже известный нам генетический граф и сгенерированное на его основе существо:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1040&quot;
    height=&quot;312&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e196254fea12565c00.webp&quot; 
    onclick=&quot;full_screen(&#x27;build.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;build.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тогда, согласно моей идее, для него получатся следующие локальные нейронные сети:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;761&quot;
    height=&quot;441&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e37043ae0cb8ca0a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;abnn.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;abnn.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Здесь надо много рассказать про обозначения:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Желтые нейроны&lt;&#x2F;strong&gt; - входные нейроны, получающие информацию от других локальных нейронных сетей.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Красные нейроны&lt;&#x2F;strong&gt; - выходные нейроны отправляющие информацию на другие локальные нейронные сети.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Голубые нейроны с надписью S&lt;&#x2F;strong&gt; - нейроны сенсоров.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Фиолетовые нейроны с надписью E&lt;&#x2F;strong&gt; - нейроны эффекторов.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Здесь я обозначаю одним кружком сразу много нейронов, &lt;em&gt;вектор нейронов&lt;&#x2F;em&gt;, очевидно, что сенсоров у части тела много, я просто не стал их все рисовать, так как это сложно и мусорно. Если количество эффекторов и сенсоров вполе понятно, то вот количество нейронов для обмена информацией с каждой другой локальной нейросетью может задаваться генетически. Это может быть 0, 1, 2 или даже 10 чисел.&lt;&#x2F;p&gt;
&lt;p&gt;Черный ящик я не зря нарисовал таким, потому что он и является черным ящиком. Это и есть локальная нейронная сеть. Неважно, как она устроена внутри, главное, что к ней на вход поступают некоторые сигналы, и на выход она тоже отправляет сигналы.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я сделал так, чтобы родительская часть тела могла не только отправлять дочерним информацию, но и получать её от них.&lt;&#x2F;p&gt;
&lt;p&gt;А у локальной нейросети A так много входов и выходов, потому что ей надо общаться не только с двумя B, но и ещё с дочерней A и потенциально с родительской A.&lt;&#x2F;p&gt;
&lt;p&gt;В итоге после объединения локальных нейросетей получается такая глобальная нейросеть:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1121&quot;
    height=&quot;882&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;20bf2ba2ba27bfcf00.webp&quot; 
    onclick=&quot;full_screen(&#x27;all.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;all.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Заметьте, что некоторые нейроны в итоге ни с кем не соединились. Это нормально.&lt;&#x2F;p&gt;
&lt;p&gt;Так же здесь важно то, что Da, Db просто копируются в нужном количестве.&lt;&#x2F;p&gt;
&lt;p&gt;Правда в этой идее не нашлось места для центральной нейронной сети, которая не зависит от частей тела, и по идее должна выполнять основную, центральную, мыслительную деятельность.&lt;&#x2F;p&gt;
&lt;p&gt;Наверное, можно добавить её в виде ещё одних входных и выходных нейронов для A, и подключить её только к одной копии A:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;736&quot;
    height=&quot;679&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dd83851564fe507b00.webp&quot; 
    onclick=&quot;full_screen(&#x27;Global.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;Global.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;moia-ideia-ob-obedinenii-mozgov-ot-raznykh-zadach&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#moia-ideia-ob-obedinenii-mozgov-ot-raznykh-zadach&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Моя идея об объединении мозгов от разных задач&lt;&#x2F;h2&gt;
&lt;p&gt;Когда показывали существо, которое плывёт к красной точке, даже в видео упоминается что оно двигается как-то непонятно, но &lt;code&gt;каким-то образом достигает цели&lt;&#x2F;code&gt;. Мне кажется это проблема той эволюции --- она &lt;strong&gt;переобучается&lt;&#x2F;strong&gt;. Ведь то движение нельзя назвать красивым или естественным, оно уродливо, и не требует от существа быть не уродливым по форме. Поэтому я придумал некоторое решение, которое может заставить то существо двигаться куда красивей.&lt;&#x2F;p&gt;
&lt;p&gt;В общем идея состоит в:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Чтобы сначала обучить две разных нейросети одного существа:
&lt;ul&gt;
&lt;li&gt;Одно стремится плыть максимально прямолинейно и быстро&lt;&#x2F;li&gt;
&lt;li&gt;Второе стремится поворачиваться на месте максимально неподвижно и быстро, чтобы достичь нужного угла&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;А затем заставить эволюцию как-то объединить эти две нейросети, не модифицируя их, чтобы получить существо, которое комбинирует поведение движения по прямой и разворота для выполнения изначального действия достижения красной точки. &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Кажется, в результате должно возникнуть красивое поведение, и само тело существа будет оптимизироваться под эффективное движение вперёд и разворот, оно, возможно, станет симметричным.&lt;&#x2F;p&gt;
&lt;p&gt;Для обозначений возьмём глобальную нейросетью, полученную в предыдущем пункте, и вытащим из неё наружу все сенсоры и эффекторы:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;401&quot;
    height=&quot;81&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;44ac7baa8faba67a00.webp&quot; 
    onclick=&quot;full_screen(&#x27;global_brain.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;global_brain.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Обозначим нейросеть плавающего по прямой существа как 🏊, а разворачивающегося как ⚙️, тогда задача эволюции состоит в том, чтобы обучить нейросети &lt;code&gt;Din&lt;&#x2F;code&gt; и &lt;code&gt;Dout&lt;&#x2F;code&gt; на следующей диаграмме:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;641&quot;
    height=&quot;241&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b9999ebdf3b640cc00.webp&quot; 
    onclick=&quot;full_screen(&#x27;combined_brain.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;combined_brain.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Наверняка существо научиться делать что-то вроде: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Разворачивайся, пока твоё тело не будет направлено на цель&lt;&#x2F;li&gt;
&lt;li&gt;Двигайся прямо&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Может быть там даже возникнет поведение, позволяющее делать эти действия более-менее одновременно без ущерба ко времени достижения цели и длине траектории.&lt;&#x2F;p&gt;
&lt;p&gt;Согласитесь, это решение выглядит намного красивей? Даже похоже на вынесение функций на уровне нейронных сетей, которые обычно представляют собой кашу из чисел и нейронов.&lt;&#x2F;p&gt;
&lt;p&gt;Вообще это выглядит как какой-то &lt;strong&gt;конструктор&lt;&#x2F;strong&gt;. Мне кажется мощь эволюции по отношению к другим методам оптимизации как раз должна быть в таком конструкторе: &lt;em&gt;Мы должны придумать алгоритмы, позволяющие создавать максимально крутые строительные блоки, чтобы потом из этих строительных блоков строились существа, которых невозможно наэволюционировать без строительных блоков.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Может быть и в нашей эволюции гены являются этими строительными блоками?&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, я уже давно придумывал идею о генах внутри нейронных сетей, и нарисовал её как-то так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;949&quot;
    height=&quot;606&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;fa9fc5725789b7c900.webp&quot; 
    onclick=&quot;full_screen(&#x27;genes_in_neural_network.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;genes_in_neural_network.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;razmnozhenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#razmnozhenie&quot;&gt;#&lt;&#x2F;a&gt;Размножение&lt;&#x2F;h1&gt;
&lt;p&gt;Согласно научной статье, в 40% случаях осуществляется простое копирование существа с применение мутации, в 30% случаях скрещивание под названием &lt;code&gt;crossovers&lt;&#x2F;code&gt;, и в 30% оставшихся случаев скрещивание под названием &lt;code&gt;grafting&lt;&#x2F;code&gt; (прививание).&lt;&#x2F;p&gt;
&lt;p&gt;Мутация графа подробно описана в научной статье, обращайтесь к ней за более подробной информацией, хотя и каждый сам вполне может придумать свой алгоритм мутации графа, общая идея там очевидна, ничего интересного.&lt;&#x2F;p&gt;
&lt;p&gt;А насчет скрещивания - тоже обращайтесь к статье, если интересно. Первый метод похож на обычное скрещивание битов, а второй на прививание ветки груши к яблоне.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя лично я очень скепически отношусь к скрещиванию. Даже как-то &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;optozorax&#x2F;status&#x2F;1141021230176227328&quot;&gt;высказывался об этом в твитере.&lt;&#x2F;a&gt; Если цель скрещивания в получении генов, которые могут потенциально использоваться другими существами, или в том, чтобы гены эволюционировали, борясь между собой, как это описано в &amp;quot;Эгоистичном гене&amp;quot; Ричарда Докинза, то у меня придумываются совсем другие алгоритмы, созданные специально с этой целью, но никак не скрещивание.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Например:&lt;&#x2F;em&gt; брать и напрямую симулировать наличие некоторых категорий &amp;quot;генов&amp;quot;, которые могут представлять собой куски нейронных сетей, и принудительно использовать эти гены в различных существах, которые занимаются различными действиями: плавают, бегают, прыгают. Далее отбирать лучшие гены и при помощи симуляции эволюции двигаться к самым полезным и лучшим. Тогда можно будет получить гены, или лучше сказать строительные блоки, с высоким уровнем абстракции, которые потенциально могут использоваться в других существах, для совсем других целей. Правда, я почти уверен, что там будет множество подводных камней.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;uspeshnoe-povedenie-sil-no-zavisit-ot-protivnika&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#uspeshnoe-povedenie-sil-no-zavisit-ot-protivnika&quot;&gt;#&lt;&#x2F;a&gt;&amp;quot;Успешное поведение сильно зависит от противника.&amp;quot;&lt;&#x2F;h1&gt;
&lt;p&gt;Когда я услышал эту фразу, на меня сразу нашло озарение, что вот она --- золотая жила бесконечно увеличивающейся сложности для эволюции: сражения между двумя соперниками! Можно сначала натаскать двух соперников сильно друг против друга, а затем поменять их всех друг между другом, и снова эволюционировать, и так повторять до бесконечности, и получать очень интересных существ!&lt;&#x2F;p&gt;
&lt;p&gt;Просто обычно симуляция эволюции представляет собой подобный график:&lt;&#x2F;p&gt;
&lt;figure&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;791&quot;
    height=&quot;553&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;589201de50e5785500.webp&quot; 
    onclick=&quot;full_screen(&#x27;fitness_function.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;fitness_function.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;figcaption&gt;Взято &lt;a href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;221472180_Skin_Lesion_Diagnosis_Using_Fluorescence_Images&quot;&gt;отсюда&lt;&#x2F;a&gt;.&lt;&#x2F;figcaption&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;strong&gt;Фитнес-функция&lt;&#x2F;strong&gt; --- это функция, которая оценивает эффективность решения особью поставленной задачи. Как видим из графика, в процессе эволюции значение этой функции растет, а затем сходится к какому-то пределу и далее не изменяется.&lt;&#x2F;p&gt;
&lt;p&gt;Это является одной из главных проблем в эволюционных алгоритмах --- как заставить эволюцию протекать таким образом, чтобы у существ постоянно возрастала сложность, чтобы они решали задачу лучше и лучше, создавали генетический конструктор, и чтобы в пределе мы могли запустить эволюцию на суперкомпьютере, оставить на пару лет и получить скайнет. :) (лично у меня это главная мотивация в изучении эволюции)&lt;&#x2F;p&gt;
&lt;p&gt;По моим предположениям одним из таких двигателей постоянно возрастающей сложности может стать соревновательная система, представленная в видео. В ней успех существа не зависит от среды, и не является какой-то статичной функцией, которая может к чему-то сойтись, нет, она зависит от постоянно меняющегося противника, который меняется в зависимости от своего оппонента!&lt;&#x2F;p&gt;
&lt;p&gt;И даже можно сделать, чтобы эволюция противника останавливалась, когда один слишком слабый, чтобы он превзошел оппонента, и они снова поменялись местами, но при этом оставались максимально различными.&lt;&#x2F;p&gt;
&lt;p&gt;Но интуиция прожённого прагматика подсказывает мне, что нет, не будет эта система сходиться к сложным и эффективным решениям. Надеюсь, что я ошибаюсь, и надеюсь, что мы в ближайшем будущем создать такую &lt;code&gt;эмерджентную эволюцию&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Кстати, в научной статье показываются и обсуждаются различные соревновательные системы, как между существами одной популяции, так и между двумя:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;929&quot;
    height=&quot;465&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;b702be156eb3c99000.webp&quot; 
    onclick=&quot;full_screen(&#x27;tournaments.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;tournaments.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;future-work&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#future-work&quot;&gt;#&lt;&#x2F;a&gt;Future work&lt;&#x2F;h1&gt;
&lt;p&gt;В этом разделе своей работы автор предлагает развить эту идею до симуляции целых экосистем, где одновременно находится множество существ, которые могут не только соревноваться, но и объединяться.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению, учитывая ту информацию, что я нагуглил, ничего путного из этого не вышло. :( &lt;&#x2F;p&gt;
&lt;p&gt;Например, в &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=_m97_kL4ox0&quot;&gt;этом&lt;&#x2F;a&gt; видео о программе &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Polyworld&quot;&gt;Polyworld&lt;&#x2F;a&gt; обсуждается система, похожая на эволюцию виртуальных существ, но уже с полноценной симуляцией экосистемы, где по идее существа должны придумывать сложное поведение. Результаты печальные: никакого сложного поведения не возникало, сложность мозга в итоге сошлась к какому-то пределу, и в самом видео автор серьезно поднимает эту тему. Кстати именно отсюда я и узнал про существование видео Карла Симса. :)&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;748&quot;
    height=&quot;570&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;fe60900c5f3b62f300.webp&quot; 
    onclick=&quot;full_screen(&#x27;neural_complexity.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;neural_complexity.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;malen-kaia-razmernost&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#malen-kaia-razmernost&quot;&gt;#&lt;&#x2F;a&gt;Маленькая размерность&lt;&#x2F;h1&gt;
&lt;p&gt;Наивный читатель может подумать, что можно поставить перед существами требование выполнять какие-то сверх-сложные операции, по типу получать изображение с камеры и на основе него ходить при помощи ног, поставить эволюцию на супер-компьютер и получить какой-то результат, а в потенциале и сильный ИИ.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению нет, эволюция отлично работает на маленьких размерностях мозга и поведения, но при большой размерности мы вряд ли сможем получить что-то адекватное, или вообще сойтись к решению. Я такими данными не располагаю, просто уверен в этом. Да и если бы на самом деле такое было бы возможно, уже бы давно в современных играх были бы NPC на основе тех же самых нейронных сетей, что описал Карл Симс, но к сожалению такого даже близко не видно, все NPC пишутся вручную на &lt;a href=&quot;https:&#x2F;&#x2F;tproger.ru&#x2F;translations&#x2F;finite-state-machines-theory-and-implementation&#x2F;&quot;&gt;конечных автоматах&lt;&#x2F;a&gt;, а движение их ног задаётся обычными анимациями вместо адаптивного движения.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;В первую очередь это видео заинтересовало меня результатами и кучей идей, которые появились в процессе его просмотра. Поэтому я написал эту статью в надежде, что кого-то она вдохновит аналогичным образом. Кстати, буду рад, если вы реализуете мои идеи и проверите их на прочность! Только не забывайте указать источник. :)&lt;&#x2F;p&gt;
&lt;p&gt;Симуляция эволюции --- моя самая любимая тема среди всех тем в принципе, так что в будущем вас ждёт ещё не одна подобная статья, поэтому подписывайтесь на &lt;a href=&quot;https:&#x2F;&#x2F;vk.com&#x2F;optoblog&quot;&gt;вк&lt;&#x2F;a&gt;. :)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>О моей библиотеке Space Objects и дереве Пифагора</title>
            <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/space-objects/</link>
            <guid>https://testzorax.github.io/p/space-objects/</guid>
            <description>&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Недавно я разработал и опубликовал библиотеку под названием Space Objects. Это библиотека для работы с векторами, прямыми, плоскостями; она реализует преобразования координат; нахождения пересечений этих объектов и т. д. Эта библиотека выросла из моего другого проекта.&lt;&#x2F;p&gt;
&lt;p&gt;После того, как я её опубликовал и начал придумывать примеры использования, я осознал всю её мощь. Она является апогеем множества проектов, которыми я ранее занимался: 2D графика, фракталы, рендеринг 3D. Всё это в кратком виде имеется в примерах этой библиотеки на &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;space_objects&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Лого библиотеки, на ней показаны все основные объекты и действия для двумерного пространства.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;900&quot;
    height=&quot;450&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;fffa763c65d843da00.webp&quot; 
    onclick=&quot;full_screen(&#x27;img&amp;#x2F;logo.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;img&amp;#x2F;logo.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Я расскажу об особенностях этой библиотеки на основе задачи рисования фрактала &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%94%D0%B5%D1%80%D0%B5%D0%B2%D0%BE_%D0%9F%D0%B8%D1%84%D0%B0%D0%B3%D0%BE%D1%80%D0%B0&quot;&gt;дерево Пифагора&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;А для начала немного изучим логотип библиотеки. Здесь стандартной системой координат изображается та система, что находится в центре. Другие системы координат показаны без сетки, только с положением центра и направляющими векторами. &lt;&#x2F;p&gt;
&lt;p&gt;Как можно увидеть, система координат может быть не только смещена относительно стандартной в любое место, но ещё наклонена, и повернута на любой угол, она даже может быть зеркально отраженной. &lt;&#x2F;p&gt;
&lt;p&gt;Для каждой системы координат рисуется квадрат с координатами &lt;code&gt;(0, 0)&lt;&#x2F;code&gt;, &lt;code&gt;(0, 1)&lt;&#x2F;code&gt;, &lt;code&gt;(1, 1)&lt;&#x2F;code&gt;, &lt;code&gt;(1, 0)&lt;&#x2F;code&gt;, а так же буква &lt;code&gt;A&lt;&#x2F;code&gt;, чтобы показать возможность преобразования координат. Если говорить подробнее, то прежде чем нарисовать квадрат, его координаты преобразуются по текущей системе координат при помощи функции &lt;code&gt;from()&lt;&#x2F;code&gt; (&amp;quot;из&amp;quot; системы координат), и только преобразованные координаты рисуются отрезком.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;risuem-derevo-pifagora&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#risuem-derevo-pifagora&quot;&gt;#&lt;&#x2F;a&gt;Рисуем дерево Пифагора&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;kak-ego-stroit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-ego-stroit&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Как его строить&lt;&#x2F;h2&gt;
&lt;p&gt;Пусть у нас есть начальные координаты самого первого квадрата. Далее, согласно определению этого фрактала, надо построить на его верхней стороне прямоугольный треугольник с координатами, затем же надо получить оба катета этого прямоугольного треугольника и рекурсивно проделать тоже самое на них.&lt;&#x2F;p&gt;
&lt;p&gt;Наглядно этот процесс можно увидеть на следующей гифке.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;anim_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;p&gt;Самое сложное в рисовании этого фрактала - вычисления координат каждого квадрата.&lt;&#x2F;p&gt;
&lt;p&gt;Так же, очевидно, для рисования дерева Пифагора необходимо использовать рекурсию. И нам необходимо написать такую рекурсивную процедуру, которая будет строить дерево Пифагора на основании любого отрезка. Ведь каждая новая его часть все-же строится на основании стороны треугольника, то есть отрезка с произвольными координатами.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;slozhnyi-i-plokhoi-put&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#slozhnyi-i-plokhoi-put&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Сложный и плохой путь&lt;&#x2F;h2&gt;
&lt;p&gt;Когда я в 10 классе, ещё программируя на Паскале, задался задачей нарисовать этот фрактал, я пошел самым сложным путем, вычисляя громоздкие формулы, с использованием геометрии и тригонометрии. В итоге у меня вышел такой код:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;pascal&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-pascal &quot;&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; alpha:real; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Угол при основании прямоугольного треугольника
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;recur&lt;&#x2F;span&gt;&lt;span&gt;(x,y, x1,y1:real; g:integer);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; dx,dy,lx,ly:real;
&lt;&#x2F;span&gt;&lt;span&gt;    x2,y2,x3,y3:real;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (g=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; ((sqr(x-x1)+sqr(y-y1))&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;     	&#x2F;&#x2F; Выходим из рекурсии, если достигнута максимальная глубина или
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;     	&#x2F;&#x2F; размер квадрата слишком мал
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{1)}&lt;&#x2F;span&gt;&lt;span&gt;dx:=x1-x;
&lt;&#x2F;span&gt;&lt;span&gt;               dy:=y1-y;
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{2)}&lt;&#x2F;span&gt;&lt;span&gt;x2:=x-dy; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Вычисляем две другие точки квадрата по имеющимся
&lt;&#x2F;span&gt;&lt;span&gt;               y2:=y+dx; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; точкам x,y, x1,y1.
&lt;&#x2F;span&gt;&lt;span&gt;               x3:=x1-dy;
&lt;&#x2F;span&gt;&lt;span&gt;               y3:=y1+dx;
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{3)}&lt;&#x2F;span&gt;&lt;span&gt;draw_Rect(x,y, x1,y1, x2,y2, x3,y3); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Рисуем квадрат на экран
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;           &#x2F;&#x2F; Вычисляем координаты вершины прямоугольного треугольника
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{4)}&lt;&#x2F;span&gt;&lt;span&gt;lx:=sin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*alpha)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*dy-sqr(cos(alpha))*dx;
&lt;&#x2F;span&gt;&lt;span&gt;               ly:=sqr(cos(alpha))*dy+sin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*alpha)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*dx;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;           &#x2F;&#x2F; Вызываем рекурсию для каждого катета прямоугольного треугольника
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{5)}&lt;&#x2F;span&gt;&lt;span&gt;recur(x2,y2, x2-lx,y2+ly, g-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;               recur(x2-lx,y2+ly, x3,y3, g-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Если необходимо понять каждое действия, есть комментарии, да и вообще код довольно простой, даже если вы не знаете Паскаль, вы его наверняка поймете. Но разбираться в нём не нужно, он лишь служит демонстрацией сложного подхода.&lt;&#x2F;p&gt;
&lt;p&gt;В функцию recur передаются координаты двух точек, на основе отрезка, на основании отрезка, образованного этими двумя точками, строится квадрат; этот квадрат рисуется; на стороне квадрата, которая параллельна данному отрезку, строится прямоугольный треугольник, и для его катетов вызывается эта же функция.&lt;&#x2F;p&gt;
&lt;p&gt;Минусы этого кода: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Здесь не используются классы векторов, которые бы позволили сократить часть кода, связанную с суммой по координате x и y, вычисления длины стороны квадрата и сокращения количества передаваемых параметров.&lt;&#x2F;li&gt;
&lt;li&gt;Весь квадрат задается лишь одной стороной, и далее непонятными формулами вычисляются координаты других его вершин.&lt;&#x2F;li&gt;
&lt;li&gt;Координаты прямоугольного треугольника на основе квадрата, заданного лишь одной стороной, вычисляются очень сложно, и непонятно как эти формулы работают.&lt;&#x2F;li&gt;
&lt;li&gt;Код применим только для построения дерева на верхней стороне квадрата, если захочется построить на боковой, или чередовать это, то придется вычислять новые формулы.&lt;&#x2F;li&gt;
&lt;li&gt;Данное решение применимо только к квадрату. Его нельзя использовать для произвольного многоугольника.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Но, благо, здесь хотя бы можно менять угол при основании прямоугольного треугольника. И в то время я получил примерно следующую анимацию:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;angle_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h2 id=&quot;put-poluchshe-i-s-ispol-zovaniem-biblioteki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#put-poluchshe-i-s-ispol-zovaniem-biblioteki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Путь получше и с использованием библиотеки&lt;&#x2F;h2&gt;
&lt;p&gt;Библиотека предоставляет две вещи, которые нам сейчас пригодятся: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Преобразование вектора из одной системы координат в другую.&lt;&#x2F;li&gt;
&lt;li&gt;Создание системы координат из двух точек при помощи функции &lt;code&gt;makeLine2&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;makeLine2(a, b)&lt;&#x2F;code&gt; работает следующим образом: создается система координат с центром в точке &lt;code&gt;a&lt;&#x2F;code&gt;, вектор первой оси направлен в сторону &lt;code&gt;b&lt;&#x2F;code&gt; и по длине равен &lt;code&gt;(b-a)&lt;&#x2F;code&gt;. Второй вектор оси равен первому, повернутому на 90 градусов против часовой стрелке. То есть такая система координат всегда ортогональна (оси перпендикулярны).&lt;&#x2F;p&gt;
&lt;p&gt;Построение дерева Пифагора будет аналогично предыдущему пункту, только мы будем передавать в функцию не координаты отрезка, на основании которого строить дальше, а систему координат, в которой надо строить дальше.&lt;&#x2F;p&gt;
&lt;p&gt;Так как мы можем легко преобразовывать координаты, то для любой фигуры, будь то квадрат, прямоугольный треугольник или дерево Пифагора, нам надо знать их координаты, когда они одной своей стороной полностью лежат на красной оси &lt;code&gt;X&lt;&#x2F;code&gt;, которая задается вектором &lt;code&gt;i&lt;&#x2F;code&gt;. Такое необходимо, потому что далее мы будем преобразовывать их координаты к некоторой системе, полученной с помощью функции &lt;code&gt;makeLine2&lt;&#x2F;code&gt;, и в итоге преобразованный многоугольник автоматически будет располагаться как бы прикрепленным к какой-то стороне, сразу масштабированный под размер этой стороны.&lt;&#x2F;p&gt;
&lt;p&gt;Получившийся код:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; space2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Выходим из рекурсии, если одна из осей (аналогично и сторона квадрата) имеет длину меньше, чем 2
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Задаем координаты квадрата
&lt;&#x2F;span&gt;&lt;span&gt;	vec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Высчитываем координаты прямоугольного треугольника, который лежит своей гипотенузой на оси X, с углом alpha при основании
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;spob::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;deg2rad&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	vec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;tr_a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;tr_b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;tr_c&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(alpha), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	tr_c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(tr_c, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), alpha);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Преобразуем квадрат из текущих координат к координатам переданного пространства
&lt;&#x2F;span&gt;&lt;span&gt;	a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(a);
&lt;&#x2F;span&gt;&lt;span&gt;	b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(b);
&lt;&#x2F;span&gt;&lt;span&gt;	c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;	d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(d);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Рисуем квадрат
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(a, b);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(b, c);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(c, d);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(d, a);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Строим пространство, которое находится на верхней стороне квадрата
&lt;&#x2F;span&gt;&lt;span&gt;	space2 tr_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(b, c);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Переводим координаты треугольника к этому пространству
&lt;&#x2F;span&gt;&lt;span&gt;	tr_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_a);
&lt;&#x2F;span&gt;&lt;span&gt;	tr_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_b);
&lt;&#x2F;span&gt;&lt;span&gt;	tr_c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_c);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Строим пространства, которые находятся на обоих катетах этого треугольника
&lt;&#x2F;span&gt;&lt;span&gt;	space2 l1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(tr_a, tr_c);
&lt;&#x2F;span&gt;&lt;span&gt;	space2 l2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(tr_c, tr_b);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Рекурсивно строим дерево в этих пространствах
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(l1);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(l2);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Пошаговое описание действий с визуализацией вычислений:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1216&quot;
    height=&quot;828&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;103f877dd94e418f00.webp&quot; 
    onclick=&quot;full_screen(&#x27;explanation_4&amp;#x2F;explanation.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_4&amp;#x2F;explanation.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ol&gt;
&lt;li&gt;Создаем координаты квадрата.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Высчитываем координаты прямоугольного треугольника. Здесь никаких сложных формул нет, только простейшая геометрия, и использование функции &lt;code&gt;rotate(что, вокруг чего, на какой угол)&lt;&#x2F;code&gt;.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vec2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;tr_a&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;tr_b&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;tr_c&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(alpha), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;tr_c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(tr_c, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), alpha);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Видно, что координаты квадрата заданы без привязки к какой-то системе координат, просто нули и единицы. Поэтому переводим его координаты из системы координат, которую нам предоставили в функции.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(a);
&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(b);
&lt;&#x2F;span&gt;&lt;span&gt;c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(c);
&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(d);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
Заодно сразу же рисуем этот квадрат.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(a, b);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(b, c);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(c, d);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(d, a);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Создаем систему координат на верхней стороне квадрата с помощью функции &lt;code&gt;makeLine2&lt;&#x2F;code&gt;.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;space2 tr_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(d, c);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Преобразуем координаты треугольника к координатам только что полученной системы координат.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;tr_a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_a);
&lt;&#x2F;span&gt;&lt;span&gt;tr_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_b);
&lt;&#x2F;span&gt;&lt;span&gt;tr_c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tr_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(tr_c);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Строим новые системы координат на каждом катете полученного треугольника.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;space2 l1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;space2 l2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Повторяем всю процедуру рекурсивно для каждой системы координат, предварительно преобразовав её из переданной системы координат. Вообще от этого преобразования можно было бы избавиться, если бы мы изначально преобразовали координаты квадрата, как это сделали с треугольником.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(l1));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(l2));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Если для написания кода, из плохого пункта выше, я убил много времени на расчет формул на бумажке, на поиск багов и подбор параметров, то первичную версию данного решения я написал реально за полчаса, и занимала она, грубо говоря, 7 строк. Следующие версии модифицировались, чтобы быть более понятными для других людей.&lt;&#x2F;p&gt;
&lt;div class=&quot;pros&quot;&gt;
&lt;span style=&quot;color: #090&quot;&gt;&lt;big&gt;&lt;b&gt;Плюсы:&lt;&#x2F;b&gt;&lt;&#x2F;big&gt;&lt;&#x2F;span&gt;
&lt;ul&gt;
&lt;li&gt;Здесь используются классы векторов и систем координат.&lt;&#x2F;li&gt;
&lt;li&gt;Координаты квадрата вычисляются интуитивно понятным образом.&lt;&#x2F;li&gt;
&lt;li&gt;Координаты прямоугольного треугольника вычисляются очень просто.&lt;&#x2F;li&gt;
&lt;li&gt;Код применим для построения дерева Пифагора на любой стороне квадрата, надо лишь изменить параметры в строке &lt;code&gt;space2 tr_line = makeLine2(b, c);&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Данное решение можно применить к любому многоугольнику (главное, чтобы он своей стороной полностью лежал на оси Х).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;И вот, например построение дерева Пифагора на 0 и 1 стороне квадрата:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;space2 tr_line = makeLine2(b, a);&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;video class=&quot;img-one-two&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;4_0_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;639&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7288181475b1419300.webp&quot; 
    onclick=&quot;full_screen(&#x27;explanation_4&amp;#x2F;pythagor_0.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_4&amp;#x2F;pythagor_0.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.7&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;code&gt;space2 tr_line = makeLine2(a, c);&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;video class=&quot;img-one-two&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;4_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;640&quot;
    height=&quot;639&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7a82177313171f8500.webp&quot; 
    onclick=&quot;full_screen(&#x27;explanation_4&amp;#x2F;pythagor_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_4&amp;#x2F;pythagor_1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.7&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Далее я немного изменил рисование, теперь вместо рисования лишь линий, рисуются многоугольники, в итоге картинка выглядит намного красивей. Так же из-за того, что размеры всё время меняются, я каждый раз вычисляю новые границы, где задано изображение, и смещаю фрактал так, чтобы он полностью помещался в изображении. Вот анимация для каждого дерева Пифагора на основе квадрата:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;pyth_0_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;pyth_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_4&amp;#x2F;pyth_2_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;risuem-derevo-pifagora-na-osnove-proizvol-nogo-mnogougol-nika&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#risuem-derevo-pifagora-na-osnove-proizvol-nogo-mnogougol-nika&quot;&gt;#&lt;&#x2F;a&gt;Рисуем дерево Пифагора на основе произвольного многоугольника&lt;&#x2F;h1&gt;
&lt;p&gt;Как уже упоминалось раннее, хорошее решение можно использовать для любого многоугольника в принципе, с небольшими модификациями. После написания той программы в 10 классе я не остановился, и захотел сделать решение для правильного многоугольника. Так получилось...&lt;&#x2F;p&gt;
&lt;h1 id=&quot;staroe-i-koshmarnoe-reshenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#staroe-i-koshmarnoe-reshenie&quot;&gt;#&lt;&#x2F;a&gt;Старое и кошмарное решение&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;pascal&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-pascal &quot;&gt;&lt;code class=&quot;language-pascal&quot; data-lang=&quot;pascal&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;mnogoug&lt;&#x2F;span&gt;&lt;span&gt;(n,m:integer; x,y,x1,y1:real;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; x2,y2,x3,y3:real);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Очень универсальная процедура для построения правильных многоугольников!!!}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Процедура строит многоугольник с количеством сторон равным n, и причем строится он так,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; чтобы основанием была сторона с координатами x,y,x1,y1 , и когда его основание это
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; данная сторона,то ещё надо вернуть координаты стороны с номером m, в x2,y2,x3,y3 ,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; и так как дается только количество сторон и координаты основания,то размер фигуры выбирается
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; в соответствии с исходными данными, угол наклона,и координаты центра точно так же,причем,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; важную роль играет куда положить первую точку, в x,y или в x1,y1 , в зависимости
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; от этого ваша фигура может быть перевернутой или нет}
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; v:integer;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Находим координаты центра}
&lt;&#x2F;span&gt;&lt;span&gt;	rx:=(x1+x)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;+((cos(pi&#x2F;n)&#x2F;sin(pi&#x2F;n))*(y1-y))&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	ry:=(y1+y)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;-(cos(pi&#x2F;n)&#x2F;sin(pi&#x2F;n)*(x1-x))&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Находим угол наклона многоугольника}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (y1=y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; (x1=x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt; fi:=pi&#x2F;n
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;                     fi:=-arctan((x1-x)&#x2F;(y1-y))+pi&#x2F;n;
&lt;&#x2F;span&gt;&lt;span&gt;    	
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (y1&amp;gt;y) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt; fi:=fi+pi;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; y1=y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x1&amp;gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then&lt;&#x2F;span&gt;&lt;span&gt; fi:=fi+pi&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;         fi:=fi+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;*pi&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Находим радиус многоугольника}
&lt;&#x2F;span&gt;&lt;span&gt;	r:=sqrt(sqr(x1-x)+sqr(y1-y))&#x2F;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*sin(pi&#x2F;n));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Строим все стороны по очереди}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; v:=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt;	   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Формулы для нахождения координат точек вершин многоугольника, чтобы
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;          их найти надо знать координаты центра, радиус,и угол наклона, но так
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;          как мы их нашли,то можно спокойно строить многоугольник, формула взята
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;          с Википедии}
&lt;&#x2F;span&gt;&lt;span&gt;	       xi:=rx+r*cos(fi+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*v*pi&#x2F;n);
&lt;&#x2F;span&gt;&lt;span&gt;	       yi:=ry+r*sin(fi+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*v*pi&#x2F;n);
&lt;&#x2F;span&gt;&lt;span&gt;	       
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Если мы дошли до нужной нам стороны, то возвращаем
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;          её координаты}
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (v=m) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;	          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;	          	x2:=xb; y2:=yb;
&lt;&#x2F;span&gt;&lt;span&gt;	          	x3:=xi; y3:=yi;
&lt;&#x2F;span&gt;&lt;span&gt;	          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	       
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Рисуем линию одной стороны мнгоугольника}
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; v&amp;lt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;	       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;         &#x2F;&#x2F;line(trunc(xb),round(yb),trunc(xi),trunc(yi));
&lt;&#x2F;span&gt;&lt;span&gt;         line_m(trunc(xb),round(yb),trunc(xi),trunc(yi));
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	       xb:=xi; yb:=yi;
&lt;&#x2F;span&gt;&lt;span&gt;	   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt; i,j:integer;
&lt;&#x2F;span&gt;&lt;span&gt;    alpha:real;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;procedure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;recur&lt;&#x2F;span&gt;&lt;span&gt;(x,y,x1,y1:real; g:integer);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Процедура строит на стороне x,y,x1,y1 многоугольник, с количеством сторон i ,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; и в этом многоугольнике на стороне j строит прямоугольный треугольник с углом alpha
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; ,а на его катетах всё повторяется сначал, и так в итоге строится фрактал под названием
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt; &amp;quot;Дерево Пифагора&amp;quot;, и не обычное, квадратное, а на основании любого многоугольника}
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;var
&lt;&#x2F;span&gt;&lt;span&gt;    lx,ly:real; x2,y2,x3,y3:real;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (g=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt; ((sqr(x-x1)+sqr(y-y1))&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;then
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Когда радиус многоугольника уже меньше единицы, то строить дальше не стоит,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;         и когда превышен лимит допустимой глубины}
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;begin
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Строим многоугольник с данным основанием, и данным количеством сторон}
&lt;&#x2F;span&gt;&lt;span&gt;         	     mnogoug(i,j,x,y,x1,y1,x3,y3,x2,y2);
&lt;&#x2F;span&gt;&lt;span&gt;         	     
&lt;&#x2F;span&gt;&lt;span&gt;         	     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{Так как мы нашли искомую сторону, то на ней находим вершину
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;                прямоугольного треугольника, гипотенузой которого является сторона
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;                которую мыы нашли в прошлом действии, и причем угол при основании
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;                этого треугольника равен alpha}
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{1)}&lt;&#x2F;span&gt;&lt;span&gt;dx:=x3-x2;
&lt;&#x2F;span&gt;&lt;span&gt;               dy:=y3-y2;
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{4)}&lt;&#x2F;span&gt;&lt;span&gt;lx:=sin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*alpha)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*dy-sqr(cos(alpha))*dx;
&lt;&#x2F;span&gt;&lt;span&gt;               ly:=sqr(cos(alpha))*dy+sin(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*alpha)&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*dx;
&lt;&#x2F;span&gt;&lt;span&gt;               
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{А теперь на катетах этого прямоугольного треугольника и строим
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;                новые многоугольники, а на них опять треугольники ... это и называется
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;                фрактал &amp;quot;Дерево Пифагора&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;{5)}&lt;&#x2F;span&gt;&lt;span&gt;recur(x2-lx,y2+ly,x2,y2,g-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;               recur(x3,y3,x2-lx,y2+ly,g-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Вообще, мне страшно смотреть на этот код и вспоминать как я с ним возился... Я старался привести его к красивому виду как мог, но его суть остается в костылях и фиговых решениях. И данная картинка прекрасно его описывает:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;369&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8fc19cef614544d900.webp&quot; 
    onclick=&quot;full_screen(&#x27;img&amp;#x2F;code.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;img&amp;#x2F;code.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Но я постараюсь это всё изложить, чтобы вы прочувствовали весь ужас.&lt;&#x2F;p&gt;
&lt;p&gt;Главной проблемой в этом коде была часть с вычислением угла в функции &lt;code&gt;mnogoug&lt;&#x2F;code&gt;. Там много разных ифов, которые стоят черт знает зачем, и работают черт знает как. Вообще те строки с углом, были найдены эмпирическим путем, методом тыка. Именно на этой части, в процессе метода тыка, я убил n часов при дебаге. &lt;&#x2F;p&gt;
&lt;p&gt;А потом, в процессе изучения языка &lt;code&gt;C&lt;&#x2F;code&gt; я узнал что существует, посланная с небес, функция &lt;code&gt;atan2&lt;&#x2F;code&gt;... Да, в тех строках написана моя костыльно-велосипедная реализация &lt;code&gt;atan2&lt;&#x2F;code&gt;. Это стало настоящим откровением! Обязательно почитайте об этой функции и используйте &lt;strong&gt;её&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;А так же я понял, что тот код мог бы написать намного проще, без танцев с бубном, если бы с самого начала выводил эти формулы с углом строго по математике.&lt;&#x2F;p&gt;
&lt;p&gt;А теперь, что же здесь делается? Да всё по сути написано в комментариях. Главная идея в том, что для генерации правильного многоугольника есть формула, взятая с &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D1%80%D0%B0%D0%B2%D0%B8%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9_%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D1%83%D0%B3%D0%BE%D0%BB%D1%8C%D0%BD%D0%B8%D0%BA&quot;&gt;Википедии&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;208&quot;
    height=&quot;112&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;01805f785303e1fb00.webp&quot; 
    onclick=&quot;full_screen(&#x27;img&amp;#x2F;polygon_f.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;img&amp;#x2F;polygon_f.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Если изучить её, то можно понять, что у правильного многоугольника есть несколько параметров, которые определяют его однозначно: координаты центра &lt;code&gt;C&lt;&#x2F;code&gt;, радиус &lt;code&gt;R&lt;&#x2F;code&gt; и угол поворота &lt;code&gt;ф&lt;&#x2F;code&gt;. И можно вычислить эти параметры, зная &lt;code&gt;n&lt;&#x2F;code&gt;, и координаты одной стороны. &lt;&#x2F;p&gt;
&lt;p&gt;Я выводил формулы для этого на бумажке, и заняло у меня это значительно больше времени, чем просто вывод формул для дерева Пифагора. Именно эти формулы можно видеть в функции &lt;code&gt;mnogoug&lt;&#x2F;code&gt; до цикла. Далее применяется эта формула, чтобы найти координаты стороны многоугольника, на которой будет строиться следующая итерация. Там же сразу рисуются все стороны.&lt;&#x2F;p&gt;
&lt;p&gt;Если смотреть на функцию &lt;code&gt;recur&lt;&#x2F;code&gt;, то там мало чего изменилось, даже формулы для вычисления координат треугольника остались те же.&lt;&#x2F;p&gt;
&lt;p&gt;Ну вот и результаты тех страданий:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Пояснение:&lt;&#x2F;em&gt; тип &lt;code&gt;20_3&lt;&#x2F;code&gt; означает, что берется 20-угольник и на его третьей стороне строится остальной фрактал.&lt;&#x2F;p&gt;
&lt;!-- Calculate max height to have consistent size for each element --&gt;


  
  
  
    
  

  
  
  
    
  

  
  
  

  
  
  
    
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  

  
  
  



&lt;div class=&quot;gallery-container&quot;&gt;





  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  

  
  

  
  
  


&lt;!-- Images --&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_0&quot; style=&quot;display:block;&quot;&gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;1 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;3_0&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.09202538104218194&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;1f4d9e4e5c17a2a700.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;3_0.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;3_0.png&#x27;)&quot;
    width=&quot;921&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.09202538104218194&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_1&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;2 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;3_1&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.052680176049880734&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dca572c52805d6e000.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;3_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;3_1.png&#x27;)&quot;
    width=&quot;861&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.052680176049880734&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_2&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;3 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;5_1&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.218648303450935&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c76d284067d3d80400.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;5_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;5_1.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;911&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.218648303450935&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_3&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;4 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;5_2&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f27ed46b3fc095b900.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;5_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;5_2.png&#x27;)&quot;
    width=&quot;798&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_4&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;5 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;6_1&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.22105214960478115&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f0dacfc3d12d1e3b00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;6_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;6_1.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;906&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.22105214960478115&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_5&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;6 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;10_3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18932138037401192&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;accfb2b9d7e4eef800.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;10_3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;10_3.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;972&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18932138037401192&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_6&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;7 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_1&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.04486436679935124&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;94c02f59ceee766e00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_1.png&#x27;)&quot;
    width=&quot;850&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.04486436679935124&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_7&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;8 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_2&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.12219947350390359&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3c9d7dc671017c5300.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_2.png&#x27;)&quot;
    width=&quot;973&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.12219947350390359&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_8&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;9 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_3&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18499445729708885&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;c191b8003099ada900.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_3.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;981&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18499445729708885&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_9&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;10 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_4&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23884061114324268&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e445e74ac808196400.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_4.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;869&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23884061114324268&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_10&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;11 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_5&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23547522652785807&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;832dd49c3836d89300.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_5.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;876&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23547522652785807&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_11&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;12 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_6&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.20374445729708884&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;38aec41ca738afa700.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_6.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_6.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;942&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.20374445729708884&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_12&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;13 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_7&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06437394739696622&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f3756185de0a286900.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_7.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_7.png&#x27;)&quot;
    width=&quot;878&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06437394739696622&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_13&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;14 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_8&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.016234984011753495&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;295d57346cf8242c00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_8.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_8.png&#x27;)&quot;
    width=&quot;812&quot; height=&quot;1040&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.016234984011753495&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;

&lt;div class=&quot;gallery-slide&quot; id=&quot;slide_1_14&quot; &gt;
  
  

  &lt;div class=&quot;gallery-text&quot;&gt;15 &#x2F; 15&lt;hr style=&quot;margin: 2px;&quot;&gt;20_9&lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.21480214960478117&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;div class=&quot;magnifier-container&quot;&gt;
  &lt;img class=&quot;gallery-img full-screen-img not-default&quot; 
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e42a0dda73668e1300.jpg&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;20_9.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;20_9.png&#x27;)&quot;
    width=&quot;1040&quot; height=&quot;919&quot;&gt;
  &lt;div class=&quot;magnifier-display&quot;&gt;
  &lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;&#x2F;div&gt;
  &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.21480214960478117&quot;&gt;&lt;&#x2F;svg&gt;
&lt;&#x2F;div&gt;


&lt;!-- Next and previous buttons --&gt;
&lt;a class=&quot;gallery-prev&quot; onclick=&quot;gallery_plus(1, -1)&quot;&gt;&amp;#10094;&lt;&#x2F;a&gt;
&lt;a class=&quot;gallery-next&quot; onclick=&quot;gallery_plus(1, 1)&quot;&gt;&amp;#10095;&lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;

&lt;!-- Thumbnail images --&gt;
&lt;div class=&quot;gallery-row&quot;&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.09202538104218194&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo gallery-active&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;1f4d9e4e5c17a2a700.jpg&quot; 
      id=&quot;demo_1_0&quot; 
      onclick=&quot;gallery_set(1, 0)&quot;
      width=&quot;921&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.09202538104218194&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.052680176049880734&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;dca572c52805d6e000.jpg&quot; 
      id=&quot;demo_1_1&quot; 
      onclick=&quot;gallery_set(1, 1)&quot;
      width=&quot;861&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.052680176049880734&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.218648303450935&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;c76d284067d3d80400.jpg&quot; 
      id=&quot;demo_1_2&quot; 
      onclick=&quot;gallery_set(1, 2)&quot;
      width=&quot;1040&quot; height=&quot;911&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.218648303450935&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;f27ed46b3fc095b900.jpg&quot; 
      id=&quot;demo_1_3&quot; 
      onclick=&quot;gallery_set(1, 3)&quot;
      width=&quot;798&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.0050000000000000044&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.22105214960478115&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;f0dacfc3d12d1e3b00.jpg&quot; 
      id=&quot;demo_1_4&quot; 
      onclick=&quot;gallery_set(1, 4)&quot;
      width=&quot;1040&quot; height=&quot;906&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.22105214960478115&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18932138037401192&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;accfb2b9d7e4eef800.jpg&quot; 
      id=&quot;demo_1_5&quot; 
      onclick=&quot;gallery_set(1, 5)&quot;
      width=&quot;1040&quot; height=&quot;972&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18932138037401192&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.04486436679935124&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;94c02f59ceee766e00.jpg&quot; 
      id=&quot;demo_1_6&quot; 
      onclick=&quot;gallery_set(1, 6)&quot;
      width=&quot;850&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.04486436679935124&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.12219947350390359&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;3c9d7dc671017c5300.jpg&quot; 
      id=&quot;demo_1_7&quot; 
      onclick=&quot;gallery_set(1, 7)&quot;
      width=&quot;973&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.12219947350390359&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18499445729708885&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;c191b8003099ada900.jpg&quot; 
      id=&quot;demo_1_8&quot; 
      onclick=&quot;gallery_set(1, 8)&quot;
      width=&quot;1040&quot; height=&quot;981&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.18499445729708885&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23884061114324268&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;e445e74ac808196400.jpg&quot; 
      id=&quot;demo_1_9&quot; 
      onclick=&quot;gallery_set(1, 9)&quot;
      width=&quot;1040&quot; height=&quot;869&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23884061114324268&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23547522652785807&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;832dd49c3836d89300.jpg&quot; 
      id=&quot;demo_1_10&quot; 
      onclick=&quot;gallery_set(1, 10)&quot;
      width=&quot;1040&quot; height=&quot;876&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.23547522652785807&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.20374445729708884&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;38aec41ca738afa700.jpg&quot; 
      id=&quot;demo_1_11&quot; 
      onclick=&quot;gallery_set(1, 11)&quot;
      width=&quot;1040&quot; height=&quot;942&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.20374445729708884&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06437394739696622&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;f3756185de0a286900.jpg&quot; 
      id=&quot;demo_1_12&quot; 
      onclick=&quot;gallery_set(1, 12)&quot;
      width=&quot;878&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.06437394739696622&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.016234984011753495&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;295d57346cf8242c00.jpg&quot; 
      id=&quot;demo_1_13&quot; 
      onclick=&quot;gallery_set(1, 13)&quot;
      width=&quot;812&quot; height=&quot;1040&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.016234984011753495&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

  &lt;div class=&quot;gallery-column&quot; style=&quot;width: 6.666666666666667%;&quot;&gt;
    
    
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.21480214960478117&quot;&gt;&lt;&#x2F;svg&gt;
    &lt;img class=&quot;gallery-demo&quot; src=&quot;&amp;#x2F;processed_images&amp;#x2F;e42a0dda73668e1300.jpg&quot; 
      id=&quot;demo_1_14&quot; 
      onclick=&quot;gallery_set(1, 14)&quot;
      width=&quot;1040&quot; height=&quot;919&quot;&gt;
    &lt;svg class=&quot;gallery-svg&quot; viewBox=&quot;0 0 1 0.21480214960478117&quot;&gt;&lt;&#x2F;svg&gt;
  &lt;&#x2F;div&gt;

&lt;&#x2F;div&gt;

&lt;script&gt;
slide_index[1] = 0;
slide_count[1] = 15;
&lt;&#x2F;script&gt;
&lt;p&gt;Минусы этого решения:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Применимо только к правильным многоугольникам.&lt;&#x2F;li&gt;
&lt;li&gt;Требует &lt;strong&gt;ещё более сложных&lt;&#x2F;strong&gt; вычислений формул.&lt;&#x2F;li&gt;
&lt;li&gt;Большинство минусов плохого решения для простого дерева Пифагора.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;khoroshii-put-s-ispol-zovaniem-biblioteki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#khoroshii-put-s-ispol-zovaniem-biblioteki&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Хороший путь с использованием библиотеки&lt;&#x2F;h2&gt;
&lt;p&gt;Это может показаться удивительным, но по сравнению с предыдущим хорошим решением, это совсем немного отличается. Главные отличия: координаты фигуры теперь пишутся не &lt;code&gt;a&lt;&#x2F;code&gt;, &lt;code&gt;b&lt;&#x2F;code&gt;, &lt;code&gt;c&lt;&#x2F;code&gt;, а пишутся в массив. Так же есть строчки для вычисления правильного многоугольника.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; space2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;space&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Выходим из рекурсии, если одна из осей (аналогично и сторона квадрата) имеет длину меньше, чем 2
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(space.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Считаем правильный многоугольник
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;vec2&amp;gt; poly;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; angle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;deg2rad&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;360.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; i);
&lt;&#x2F;span&gt;&lt;span&gt;		poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(angle), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(angle)));
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Преобразуем координаты так, чтобы он своим первым ребром находится на оси X
&lt;&#x2F;span&gt;&lt;span&gt;	space2 poly_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(poly[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], poly[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;	poly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;toMas&lt;&#x2F;span&gt;&lt;span&gt;(poly_line, poly);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Высчитываем координаты прямоугольного треугольника, который лежит своей гипотенузой на оси X, с углом alpha при основании
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; alpha &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;spob::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;deg2rad&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;45&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	std::vector&amp;lt;vec2&amp;gt; triangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), 
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), 
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(alpha), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), alpha)
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Преобразуем многоугольник из текущих координат к координатам переданного пространства
&lt;&#x2F;span&gt;&lt;span&gt;	poly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromMas&lt;&#x2F;span&gt;&lt;span&gt;(space, poly);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Рисуем многоугольник
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_line&lt;&#x2F;span&gt;&lt;span&gt;(poly[i], poly[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Строим пространство, которая находится на m-й стороне многоугольника
&lt;&#x2F;span&gt;&lt;span&gt;	space2 tr_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(poly[m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], poly[m]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Переводим координаты треугольника к этому пространству
&lt;&#x2F;span&gt;&lt;span&gt;	triangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromMas&lt;&#x2F;span&gt;&lt;span&gt;(tr_line, triangle);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Строим пространства, которые находятся на обоих катетах этого треугольника
&lt;&#x2F;span&gt;&lt;span&gt;	space2 l1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;	space2 l2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;], triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Рекурсивно строим дерево в этих пространствах
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(l1);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw_pythagoras_tree&lt;&#x2F;span&gt;&lt;span&gt;(l2);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Пошаговое объяснение создания многоугольника:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;1204&quot;
    height=&quot;366&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;f52fb55b5344361400.webp&quot; 
    onclick=&quot;full_screen(&#x27;explanation_5&amp;#x2F;explanation_poly.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;explanation_5&amp;#x2F;explanation_poly.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ol&gt;
&lt;li&gt;Для начала, самое главное, построение координат правильного многоугольника:&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span&gt; m &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;vec2&amp;gt; poly;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; n; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; angle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;deg2rad&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;360.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; i);
&lt;&#x2F;span&gt;&lt;span&gt;	poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;push_back&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(angle), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(angle)));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
Можно заметить, что это просто вышеописанная формула с Википедии, только максимально упрощенная, без радиуса, без угла смещения. Но к сожалению полученный многоугольник не обладает важным свойством полного нахождения на оси X.&lt;&#x2F;li&gt;
&lt;li&gt;Поэтому сначала мы создаем систему координат из первой стороны многоугольника&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;space2 poly_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(poly[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;], poly[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;А затем переводим каждую координату этого многоугольника к этой системе координат.&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;poly &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;toMas&lt;&#x2F;span&gt;&lt;span&gt;(poly_line, poly);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
В итоге наш многоугольник полностью находится на оси X, и его можно использовать в построении.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Кстати, абсолютно аналогичным образом можно было и создать треугольник:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;std::vector&amp;lt;vec2&amp;gt; triangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(alpha), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;vec2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b39f04;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(alpha))};
&lt;&#x2F;span&gt;&lt;span&gt;space2 triangle_line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeLine2&lt;&#x2F;span&gt;&lt;span&gt;(triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], triangle[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;triangle &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;toMas&lt;&#x2F;span&gt;&lt;span&gt;(triangle_line, triangle);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ведь намного проще понять координаты треугольника заданного так, что прямой угол лежит в центре координат, и все его катеты сонаправлены осям.&lt;&#x2F;p&gt;
&lt;p&gt;Здесь используется функция &lt;code&gt;toMas&lt;&#x2F;code&gt; для сокращения кода. Её действие аналогично следующему:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; poly) i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; poly_line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Также есть небольшая хитрость: в цикле генерации правильного многоугольника цикл идёт не до &lt;code&gt;n&lt;&#x2F;code&gt;, а до &lt;code&gt;n+1&lt;&#x2F;code&gt;. Сделано это потому что мы не можем зациклить массив, чтобы нарисовать все стороны многоугольника. Поэтому последняя точка является как бы первой.&lt;&#x2F;p&gt;
&lt;p&gt;Немного построения:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;video class=&quot;img-one-two&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_5&amp;#x2F;post_3_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one-two&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_5&amp;#x2F;post_5_2_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;А теперь наиболее интересные по моему мнению анимации изменения угла для разных многоугольников:&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_5&amp;#x2F;3_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_5&amp;#x2F;5_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;explanation_5&amp;#x2F;5_2_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;h1 id=&quot;puti-dal-neishego-razvitiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#puti-dal-neishego-razvitiia&quot;&gt;#&lt;&#x2F;a&gt;Пути дальнейшего развития&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;oboshchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#oboshchenie&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Обощение&lt;&#x2F;h2&gt;
&lt;p&gt;Вообще, все фракталы, что здесь были нарисованы, являются вариацией одного класса фракталов, которые строятся одинаково. Итак, пусть у нас есть некоторый многоугольник. Некоторая его сторона является основанием, так же задано на каких сторонах строить фрактал. Далее рекурсивно осуществляется следующий алгоритм:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;Нарисовать многоугольник так, чтобы он своим основанием стоял на заданной системе координат
&lt;&#x2F;span&gt;&lt;span&gt;Получить пространства всех сторон многоугольника, которые заданы
&lt;&#x2F;span&gt;&lt;span&gt;Применить рекурсию ко всем этим пространствам
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Тогда для дерева Пифагора этим многоугольником является объединение квадрата и прямоугольного треугольника. Стороны, на которых надо рисовать - катеты треугольника.&lt;&#x2F;p&gt;
&lt;p&gt;Все стороны, по которым надо строить фрактал, должны быть меньше по длине, чем основание. Если они будут больше или равны основанию, тогда фрактал получится бесконечно большим, и с каждой итерацией он может возрастать в размерах.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uluchshenie-effektivnosti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#uluchshenie-effektivnosti&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Улучшение эффективности&lt;&#x2F;h2&gt;
&lt;p&gt;Вообще данное решение является очень топорным, и работает недостаточно эффективно при маленьких углах. Вот мои старые замеры времени генерации кадра в зависимости от угла при основании прямоугольного треугольника для стандартного дерева Пифагора:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;828&quot;
    height=&quot;661&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;e888431497bc6b3800.webp&quot; 
    onclick=&quot;full_screen(&#x27;img&amp;#x2F;time.4.3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;img&amp;#x2F;time.4.3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Вот такие повышения времени идут когда рисуется при очень маленьком угле, либо угле, близком к 90 градусов. В этом случае дерево выглядит как-то так:&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;540&quot;
    height=&quot;373&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0d9c2ff566d2331700.jpg&quot; 
    onclick=&quot;full_screen(&#x27;img&amp;#x2F;angle_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;img&amp;#x2F;angle_2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Хотя здесь максимальная глубина задана 1000. Такое долгое время вычислений получается из-за того что дерево слишком большое.&lt;&#x2F;p&gt;
&lt;p&gt;Чтобы оптимизировать это, можно пользоваться свойством самоподобности этого фрактала: сначала рисуем его в одно изображение в маленьком разрешении, а затем просто перерисовываем эту картинку, вместо того, чтобы вычислять координаты для каждой ветки и рисовать отдельно каждый квадрат. Затем применяем это как-нибудь рекурсивно, чтобы на каждой итерации увеличивать степень точности изображения. &lt;&#x2F;p&gt;
&lt;p&gt;Но это лишь идея в общих чертах. Она так же применима и к общему решению.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vyvody&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vyvody&quot;&gt;#&lt;&#x2F;a&gt;Выводы&lt;&#x2F;h1&gt;
&lt;p&gt;Можно заметить, что в моем коде задача каждый раз решается полностью с нуля, и считается, как будто не существует вообще ничего, кроме этой задачи; и задачу никак не планируется расширять. Вследствие этого, для задачи вычислялись сложные формулы, которые никак, кроме как для этой задачи, не могут быть применены. Это плохой метод, программирование никогда бы не развилось до такого уровня, на каком оно есть сейчас, пользуйся все таким грубым подходом. Так же ничего не было вынесено в какие-то функции для упрощения кода.&lt;&#x2F;p&gt;
&lt;p&gt;А чем кардинально отличается новое решение задачи? Оно повышает уровень абстракции. Если при написании первого решения я думал строго в терминах координат, в терминах формул, которые используют эти координат (на низком уровне), то в новом решении я использую некоторые абстрактные объекты: &amp;quot;системы координат&amp;quot;, &amp;quot;векторы&amp;quot; и применяю абстрактную процедуру как &amp;quot;преобразование координат&amp;quot; (а это уже более высокий уровень абстракции). Как видно, код от этого стал намного проще, он не только пишется хорошо, но ещё его способен понять другой человек. Да и в нём вообще не используется каких-либо формул, только понятные человеку имена функций.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё в старом коде при незначительном усложнении задачи (перейти от квадрата к правильному многоугольнку), значительно сильно усложнялся код. В новом же решении понадобилось совсем немного строк для решения новой задачи.&lt;&#x2F;p&gt;
&lt;p&gt;Это и есть суть более высокого уровня абстракции - мы не задумываемся над низкоуровневыми вещами, вроде формул, а мыслим более сложными абстрактными объектами, которые позволяют нам эффективней решать задачу.&lt;&#x2F;p&gt;
&lt;p&gt;Конечно, эта эффективность ещё зависит от того, насколько хорошо написана библиотека. Для некоторых задач незначительное усложнение влечет за собой незначительные изменения, а иногда совсем наоборот.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;kak-zarozhdalas-eta-biblioteka&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#kak-zarozhdalas-eta-biblioteka&quot;&gt;#&lt;&#x2F;a&gt;Как зарождалась эта библиотека&lt;&#x2F;h1&gt;
&lt;p&gt;Поначалу, как вы можете видеть, я вообще не пользовался никакими абстракциями. Потом, в одном проекте графического интерфейса &lt;code&gt;GraphWinApi&lt;&#x2F;code&gt; я создал класс &lt;code&gt;Point&lt;&#x2F;code&gt;, который представлял собой обычный двумерный вектор. Я всего-лишь написал для него тривиальные методы, вроде &lt;code&gt;move&lt;&#x2F;code&gt;, &lt;code&gt;rotate&lt;&#x2F;code&gt;, &lt;code&gt;+&lt;&#x2F;code&gt;, &lt;code&gt;*&lt;&#x2F;code&gt; и т. д., но затем я удивился насколько просто можно рисовать повернутые объекты с использованием функции &lt;code&gt;rotate&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Далее, в библиотеке &lt;code&gt;TinyWindowsGraphics&lt;&#x2F;code&gt; я написал класс &lt;code&gt;PointBase&lt;&#x2F;code&gt; по сути с теми же методами, только немного лучше, плюс методы &lt;code&gt;toBasis&lt;&#x2F;code&gt;, &lt;code&gt;fromBasis&lt;&#x2F;code&gt;. И даже написал код для генерации фрактала на линии с помощью этих функций:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt; Draw&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;drawFractal&lt;&#x2F;span&gt;&lt;span&gt;(ImageDrawing_aa&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;				 Polygon_d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;poly&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const 
&lt;&#x2F;span&gt;&lt;span&gt;				 Draw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;				 int8u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;maxDepth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;				 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;minRadius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;				 int32u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(depth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; maxDepth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span&gt;(poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;getLength&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; minRadius) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span&gt;(poly, depth);
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(int8u i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;			Polygon_d poly1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; poly;
&lt;&#x2F;span&gt;&lt;span&gt;			poly1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;poly1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			Point_d ox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;			ox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;=&lt;&#x2F;span&gt;&lt;span&gt; ox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;getLength&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;			Point_d oy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ox;
&lt;&#x2F;span&gt;&lt;span&gt;			oy.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			poly1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;toBasis&lt;&#x2F;span&gt;&lt;span&gt;(ox, oy);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			Point_d nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[i];
&lt;&#x2F;span&gt;&lt;span&gt;			nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;= &lt;&#x2F;span&gt;&lt;span&gt;(poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;getLength&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;			Point_d ny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nx;
&lt;&#x2F;span&gt;&lt;span&gt;			ny.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;rotate&lt;&#x2F;span&gt;&lt;span&gt;(pi&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;			poly1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fromBasis&lt;&#x2F;span&gt;&lt;span&gt;(nx, ny);
&lt;&#x2F;span&gt;&lt;span&gt;			poly1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span&gt;(poly.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;[i]);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;			&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;drawFractal&lt;&#x2F;span&gt;&lt;span&gt;(img, poly1, draw, maxDepth, minRadius, depth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;		}
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Вообще, я бы мог написать статью об этом решении, но оно не настолько красивое, да и тогда я не осознал всю суть.&lt;&#x2F;p&gt;
&lt;p&gt;Где-то с этого момента я вспомнил линейную алгебру и у меня в голове засела идея, что системы координат неплохо так использовать во множестве задач.&lt;&#x2F;p&gt;
&lt;p&gt;Далее в одном секретном проекте под действием этой идеи родилось понятие системы координат, там преобразование координат было самой основой. Поначалу это было в виде некрасивых функций &lt;code&gt;toCoordSystem()&lt;&#x2F;code&gt;, &lt;code&gt;fromCoordSystem()&lt;&#x2F;code&gt;, затем под множеством волн рефакторинга появилось то, что есть сейчас. Ввиду огромного удобства я начал использовать этот код во всех своих других проектах. И приходилось тащить везде весь код этого секретного проекта только ради преобразований координат. Тогда я и понял, что эта часть является настолько независимой от самого проекта, что должна быть вынесена в отдельную библиотеку.&lt;&#x2F;p&gt;
&lt;p&gt;Ну, и как говорится вначале, когда я начал придумывать примеры для этой библиотеки, я осознал всю её мощь; насколько хорошо она применима к моим старым проектам.&lt;&#x2F;p&gt;
&lt;p&gt;Именно поэтому я и показывал вам весь этот путь от кошмарного кода к коду, использующему абстракции на простом примере одного фрактала.&lt;&#x2F;p&gt;
&lt;p&gt;Повышайте уровень абстракции. До встречи!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>«В смысле?» — вопрос-лень</title>
            <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/sisle/</link>
            <guid>https://testzorax.github.io/p/sisle/</guid>
            <description>&lt;p&gt;Меня бесит вопрос &lt;code&gt;В смысле?&lt;&#x2F;code&gt;. Бесит тем, что когда мне его задают, я никогда не понимаю в чём проблема.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;В смысле?&lt;&#x2F;code&gt; - это вопрос-лень. Человек задает его когда ленится задать нормальный вопрос, перекладывая труд по определению своей проблемы на собеседника. И собеседнику приходится гадать что же человек не понял.&lt;&#x2F;p&gt;
&lt;p&gt;Это раздражает.&lt;&#x2F;p&gt;
&lt;p&gt;Вместо &lt;code&gt;В смысле?&lt;&#x2F;code&gt; всегда можно задать нормальный вопрос, например: &lt;code&gt;Что такое _____?&lt;&#x2F;code&gt;, &lt;code&gt;Когда такое было?&lt;&#x2F;code&gt;, &lt;code&gt;Почему?&lt;&#x2F;code&gt;. Тем самым переложив ответственность по определению своей проблемы на себя.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>У слова &#x27;ложь&#x27; слишком много значений.</title>
            <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/lie/</link>
            <guid>https://testzorax.github.io/p/lie/</guid>
            <description>&lt;p&gt;Слово &lt;code&gt;ложь&lt;&#x2F;code&gt; выражает слишком много смыслов. В русском языке нельзя отличить одним словом когда человек говорит неправду осознанно, или просто говорит неверное утверждение. Хотелось бы, чтобы у нас было три слова для лжи, а именно: &lt;code&gt;false&lt;&#x2F;code&gt;, &lt;code&gt;lie&lt;&#x2F;code&gt;, &lt;code&gt;misinformation&lt;&#x2F;code&gt;. Я взял их в кавычки, чтобы кратко обозначать смысл, а как их называть по-русски я не знаю.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;false&lt;&#x2F;code&gt; - не истинная информация. Не важно произносится человеком, или написана на бумаге. А даже если и произносится человеком, не важно осознает он не истинность этой информации или нет.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;lie&lt;&#x2F;code&gt; - не истинная информация, причем произносится человеком, и он осознает её не истинность. Вот это реально &lt;code&gt;ложь&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;misinformation&lt;&#x2F;code&gt; - не истинная информация, которую произносит человек, не осознающий её не истинность. Очень жаль, что это называют &lt;code&gt;ложью&lt;&#x2F;code&gt;, в случае когда человек не знал что это &lt;code&gt;false&lt;&#x2F;code&gt;. При этом создается путаница, как будто человек обманул специально, когда он на самом деле не хотел.&lt;&#x2F;p&gt;
&lt;p&gt;Можно сказать, что два последних слова являются подмножествами первого: &lt;code&gt;lie&lt;&#x2F;code&gt; ⊂ &lt;code&gt;false&lt;&#x2F;code&gt;, &lt;code&gt;misinformation&lt;&#x2F;code&gt; ⊂ &lt;code&gt;false&lt;&#x2F;code&gt;, при этом множества &lt;code&gt;lie&lt;&#x2F;code&gt; и &lt;code&gt;misinformation&lt;&#x2F;code&gt; не пересекаются.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;241&quot;
    height=&quot;241&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;d42f279b2f2d11ed00.webp&quot; 
    onclick=&quot;full_screen(&#x27;lie.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;lie.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;</description>
        </item>
        <item>
            <title>Оправдание своего поведения на примере хвастовства</title>
            <pubDate>Mon, 25 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/arrogance/</link>
            <guid>https://testzorax.github.io/p/arrogance/</guid>
            <description>&lt;p&gt;Пока занимаюсь рутиной, я люблю раскручивать в голове всякие диалоги, которые потенциально могут произойти. В частности этот я раскрутил, когда мыл посуду:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Я:&lt;&#x2F;strong&gt; *&lt;em&gt;Похвастался тем, что в школе делал какую-то сложную вещь.&lt;&#x2F;em&gt;*&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Некто:&lt;&#x2F;strong&gt; Почему ты всё время хвастаешься?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Я:&lt;&#x2F;strong&gt; В конкретно этом случае я принял решение похвастаться не на основании каких-то логических умозаключений, а по воле моего подсознания. Поэтому объяснить своё поведение я не могу (вообще пытаться объяснить подсознание - тоже самое что пытаться объяснить как работает нейросеть, т. е. бесполезно. Она работает с каким-то процентом ошибок, и всё) Но я могу оправдать своё поведение! Например:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Оправдание 1:&lt;&#x2F;em&gt; я бы хотел, чтобы ты тоже хвастался своими достижениями, поэтому и сам позволяю себе хвастаться согласно золотому правилу нравственности.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Этим диалогом я хочу показать, что мы не всегда на самом деле объясняем своё поведение, а скорее оправдываем его. Ведь большинство наших действий делается на основании решений подсознательного, которое мы понимаем с трудом.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Что произойдет, если Пиноккио скажет: &#x27;Мой нос сейчас вырастет&#x27;?</title>
            <pubDate>Sat, 23 Mar 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/pinoccio/</link>
            <guid>https://testzorax.github.io/p/pinoccio/</guid>
            <description>&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;604&quot;
    height=&quot;562&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;0877cc197a03b07400.webp&quot; 
    onclick=&quot;full_screen(&#x27;pinocchio.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;pinocchio.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Что произойдет, если Пиноккио скажет: &amp;quot;Мой нос сейчас вырастет&amp;quot;?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Ответ:&lt;&#x2F;strong&gt; с большой вероятностью нос не вырастет, но с меньшей вероятностью может и вырасти. Сейчас поясню почему я так считаю.&lt;&#x2F;p&gt;
&lt;p&gt;Нос Пиноккио растет только тогда, когда он сам знает врет он или нет. Его нос не может быть великим богом, который знает ответ на любой вопрос, он является лишь частью его организма. Так же нос Пиноккио не растет, если он говорит чушь или то, в чем не разбирается (но я в этом не так уверен, тут скорее неопределенное поведение).&lt;&#x2F;p&gt;
&lt;p&gt;В случае же когда Пиноккио утверждает что его нос вырастет, это можно приравнять к чуши, либо к будущему, в котором он не может быть достаточно уверен.&lt;&#x2F;p&gt;
&lt;p&gt;И далее всё зависит от подсознания, которое управляет его носом. Скорее всего оно прикажет носу не вырастать. Отсюда следует первая часть ответа.&lt;&#x2F;p&gt;
&lt;p&gt;Но, конечно, как и любые процессы в организме, на рост носа можно как-то влиять. Наверняка Пиноккио может выучиться мастерски обманывать свое подсознание при помощи самовнушения, например ради удивления друзей. Из этого следует вторая часть ответа, про маленькую вероятность.&lt;&#x2F;p&gt;
&lt;p&gt;Почему здесь нет парадокса, спросите вы?&lt;&#x2F;p&gt;
&lt;p&gt;Потому что парадокс возникает тогда, когда люди считают нос Пиннокио - божественным провидцем и обладателем всех знаний. Но это не так. Логично считать Пиннокио - обысным малым, а его нос - обычной частью тела. Я всего-лишь экстраполировал знания об реальном мире на вымышленный &amp;quot;нос, растущий от лжи&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Если же вам интересна эта проблема именно с точки зрения на нос как на божественное создание, знающее ответ на любой вопрос, то для вас есть математика, теория множеств и т. д. Иначе же&lt;&#x2F;p&gt;
&lt;center&gt;Будьте реалистами.&lt;&#x2F;center&gt;</description>
        </item>
        <item>
            <title>Применения std::function</title>
            <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/std-function/</link>
            <guid>https://testzorax.github.io/p/std-function/</guid>
            <description>&lt;h1 id=&quot;stat-ia-ob-ispol-zovanii-std-function&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stat-ia-ob-ispol-zovanii-std-function&quot;&gt;#&lt;&#x2F;a&gt;Статья об использовании std::function&lt;&#x2F;h1&gt;
&lt;p&gt;Поводом для написания данной статьи стало желание систематизировать всё то, чему я научился в процессе кодинга лаб по таким предметам, как &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;numerical_methods&quot;&gt;Численные методы&lt;&#x2F;a&gt;; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&quot;&gt;Уравнения математической физики&lt;&#x2F;a&gt;; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&quot;&gt;Методы оптимизации&lt;&#x2F;a&gt;. Надеюсь эта статья будет полезна не только людям, которые учатся в НГТУ на факультете ФПМИ, но и широкому кругу читателей.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;В Си&#x2F;C++ имеется возможность передавать функцию в качестве аргумента функции как указатель на функцию. Вы наверняка знаете этот страшный синтаксис:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;operation)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Начиная с C++11 появился удобный интерфейс для описания функциональных объектов под названием &lt;code&gt;std::function&lt;&#x2F;code&gt;, он имеет более красивый синтаксис:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; c = 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Причём, в отличие от Си, в C++ таким образом можно описывать любой функциональный объект, то есть объект, допускающий вызов операции &lt;code&gt;()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Adder
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;operator()&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Adder add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; d = 4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Аналогичным образом можно использовать &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;66021&#x2F;&quot;&gt;лямбды&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; e = 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Таким образом, можно передавать функции в качестве аргументов функций.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chislennoe-vychislenie-proizvodnoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chislennoe-vychislenie-proizvodnoi&quot;&gt;#&lt;&#x2F;a&gt;Численное вычисление производной&lt;&#x2F;h1&gt;
&lt;p&gt;Пусть у нас имеется некоторая функция &lt;code&gt;f&lt;&#x2F;code&gt;, которая получает &lt;code&gt;double&lt;&#x2F;code&gt; и возвращает &lt;code&gt;double&lt;&#x2F;code&gt;. Тогда можно численно вычислить производную этой функции следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;derivative_f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;h;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но писать для каждой функции другую функцию, вычисляющую её производную непрактично! Поэтому такую проблему можно решить с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;h;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Данная функция получает функцию, и возвращает функцию, которая считает её производную. Пример использования:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span&gt;(f);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; a == 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;df&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; a == 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;А далее представлен код для вычисления первой и второй производных функций, взятый из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L283&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;, смело используйте его в своих проектах.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_1d_t&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_1d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_1d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Может показаться, что если уменьшить величину &lt;code&gt;0.001&lt;&#x2F;code&gt;, то точность повысится, но это не так, на практике у меня точность только падала, а при этом значении уже очень хорошо расчитывается производная.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;primer-ispol-zovaniia-std-bind&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#primer-ispol-zovaniia-std-bind&quot;&gt;#&lt;&#x2F;a&gt;Пример использования &lt;code&gt;std::bind&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Окей, у нас существует функция для расчета производной одномерной функции, но что если у нас функция принимает два аргумента, например &lt;code&gt;f(x, y)&lt;&#x2F;code&gt;. Как посчитать её производную по одному параметру? &lt;&#x2F;p&gt;
&lt;p&gt;На помощь приходит &lt;code&gt;std::bind&lt;&#x2F;code&gt; - функция, которая получает функцию, список аргументов и возвращает другую функцию. И лучше увидеть пример, чтобы понять как он работает:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Производная f по x при y=0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, std::placeholders::_1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Производная f по y при x=0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, std::placeholders::_1));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fx_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; fx_value = 2; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fy_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; fy_value = 3;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Где &lt;code&gt;std::placeholders::_1&lt;&#x2F;code&gt; показывает первый параметр внешней функции, которую возвратит &lt;code&gt;std::bind&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению в этом случае функция &lt;code&gt;fx&lt;&#x2F;code&gt; получается функцией одной переменной, при фиксированном &lt;code&gt;y=0&lt;&#x2F;code&gt;. Чтобы получить функцию &lt;code&gt;fx&lt;&#x2F;code&gt;, которая принимает два параметра, но при этом возвращает производную по &lt;code&gt;x&lt;&#x2F;code&gt;, можно воспользоваться следующим трюком:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, std::placeholders::_1, y))(x);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fx_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; df(1, 0)&#x2F;dx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Наверное можно было бы его улучшить, чтобы не копипастить эти строки, и придумать новый &lt;code&gt;std::bind2&lt;&#x2F;code&gt;, при помощи шаблонной магии C++, но я такое не умею. Если вы сможете это сделать, обязательно pull-request&#x27;ните сюда!&lt;&#x2F;p&gt;
&lt;p&gt;Или другой пример:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std::placeholders;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, _2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, _1);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; gv == fv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;avtomaticheskii-raschet-pravoi-chasti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#avtomaticheskii-raschet-pravoi-chasti&quot;&gt;#&lt;&#x2F;a&gt;Автоматический расчет правой части&lt;&#x2F;h1&gt;
&lt;p&gt;В таком предмете, как УМФ требуется решить следующее дифференциальное уравнение: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;-div(lambda * grad u) + gamma * u + sigma * du&#x2F;dt = f&lt;&#x2F;code&gt;, &lt;&#x2F;p&gt;
&lt;p&gt;где &lt;code&gt;u = u(x, y, t)&lt;&#x2F;code&gt; является неизвестной функцией. Для численного решения используется Метод Конечных Элементов.&lt;&#x2F;p&gt;
&lt;p&gt;Для декартовых координат это уравнение раскладывается в &lt;code&gt;lambda*(d^2 u&#x2F;dx^2 + d^2 u&#x2F;dy^2)  + gamma * u + sigma * du&#x2F;dt = f&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Для тестирования программы-решателя мы придумываем некоторую функцию &lt;code&gt;u&lt;&#x2F;code&gt;, например: &lt;code&gt;u = x*x + y*y + t&lt;&#x2F;code&gt;, придумываем значения констант &lt;code&gt;lambda&lt;&#x2F;code&gt;, &lt;code&gt;gamma&lt;&#x2F;code&gt;, &lt;code&gt;sigma&lt;&#x2F;code&gt;, и согласно верхнему уравнению можно вычислить функцию &lt;code&gt;f&lt;&#x2F;code&gt;, при которой дифференциальное уравнение превращается в тождество.&lt;&#x2F;p&gt;
&lt;p&gt;Для того, чтобы тестировать нашу программу на широком спектре функций, можно написать функцию, которая будет автоматически рассчитывать эту правую часть на основе вышеописанных функций для вычисления производных:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_3d_t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;** Все константы решаемого уравнения. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;constants_t
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; lambda; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент внутри div
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gamma;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент при u
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; sigma;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент при du&#x2F;dt
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_3d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_right_part&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; constants_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; cs
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; f = -div(lambda * grad u) + gamma * u + sigma * du&#x2F;dt
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; t) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; placeholders;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; ut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, x, y, _1));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; uxx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, _1, y, t));
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; uyy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, x, _1, t));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span&gt;cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;uxx&lt;&#x2F;span&gt;&lt;span&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;uyy&lt;&#x2F;span&gt;&lt;span&gt;(y)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gamma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;(x, y, t) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sigma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ut&lt;&#x2F;span&gt;&lt;span&gt;(t);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят опять же из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L304&quot;&gt;репозитория по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом, мы получаем функцию &lt;code&gt;f&lt;&#x2F;code&gt; на основе известной нам функции &lt;code&gt;u&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Это избавляет от лишней рутины ручного вычисления производных для функций при тестировании, автоматизируя этот процесс, также снижается вероятность ошибиться.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;obertka-dlia-podscheta-vyzovov-funktsii&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obertka-dlia-podscheta-vyzovov-funktsii&quot;&gt;#&lt;&#x2F;a&gt;Обертка для подсчета вызовов функции&lt;&#x2F;h1&gt;
&lt;p&gt;Например, нам надо протестировать какой-то метод, находящий минимум заданной функции &lt;code&gt;f&lt;&#x2F;code&gt;. Надо узнать насколько он хороший путем определения сколько раз ему потребовалось обратиться к функции &lt;code&gt;f&lt;&#x2F;code&gt;, потому что обычно самой дорогой операцией считается именно вызов функции &lt;code&gt;f&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Это можно сделать не вмешиваясь в код этого метода, явным образом выставляя &lt;code&gt;count++&lt;&#x2F;code&gt; при каждом вызове функции, послав вместо функции обёртку над ней:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;setFunctionToCountCalls&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;where) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[where, f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; v) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;where)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; fCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;optimize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;setFunctionToCountCalls&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fCount&lt;&#x2F;span&gt;&lt;span&gt;, f), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Взято из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;methods.cpp#L268&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zamer-vremeni&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zamer-vremeni&quot;&gt;#&lt;&#x2F;a&gt;Замер времени&lt;&#x2F;h1&gt;
&lt;p&gt;У нас стоит задача замерить время работы какого-то кода. Можно поступить следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;chrono&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; chrono;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; main code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; duration_cast&amp;lt;microseconds&amp;gt;(end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; start).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но это решение плохо тем, что нам постоянно надо копировать эти участки кода, и мы потенциально можем потерять начало или конец замера времени, поэтому можно воспользоваться концепцией RAII, и сделать это следующим красивым образом, передав в функцию замера времени лямбду кода, время которого будет замеряться:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;chrono&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;** Считает время выполнения функции f в микросекундах. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;inline double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_time_microseconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std::chrono;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;duration_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;microseconds&amp;gt;(end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; start).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;();;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_time_microseconds&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;](){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; main code
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Притом мы не теряем локальные переменные благодаря использованию лямбд.&lt;&#x2F;p&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;lib.h#L24&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dvoinoi-integral&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dvoinoi-integral&quot;&gt;#&lt;&#x2F;a&gt;Двойной интеграл&lt;&#x2F;h1&gt;
&lt;p&gt;Предположим, что у нас есть функция вычисления интеграла одномерной функции:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_1d_t&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; n - количество внутренных узлов
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; f
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Тогда двойной интеграл двумерной функции можно вычислить следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;nx&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ay&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;by&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ny&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_2d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; f
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(ax, bx, nx, [ay, by, ny, f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(ay, by, ny, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, x, _1));
&lt;&#x2F;span&gt;&lt;span&gt;	});
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L269&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;funktsii-testirovaniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#funktsii-testirovaniia&quot;&gt;#&lt;&#x2F;a&gt;Функции тестирования&lt;&#x2F;h1&gt;
&lt;p&gt;Представим, у нас есть множество методов, решающих одну задачу, но каждый по-разному, при этом интерфейс у них одинаковый. И стоит задача протестировать их все единым образом, построить таблицы. Это тоже можно красиво сделать с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;, написать прототип функции метода:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;MethodResult(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;makeTableForMethod&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;	
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;pair&amp;lt;Method, string&amp;gt;&amp;gt; methodsToTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	{method1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table1.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},	
&lt;&#x2F;span&gt;&lt;span&gt;	{method2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table2.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table3.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method4, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table4.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method5, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table5.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; methodsToTest)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeTableForMethod&lt;&#x2F;span&gt;&lt;span&gt;(i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Некоторые люди делают это с помощью копипаста, но думаю не стоит вам объяснять чем плох копипаст по сравнению с этим подходом.&lt;&#x2F;p&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;make_tables.cpp#L9&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;odnomernyi-poisk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#odnomernyi-poisk&quot;&gt;#&lt;&#x2F;a&gt;Одномерный поиск&lt;&#x2F;h1&gt;
&lt;p&gt;В МО многомерные методы нахождения минимума функции используют одномерную функцию оптимизации. И было задание задавать различные методы одномерной оптимизации, чтобы протестировать их эффективность конкретно в этой среде. Ну раз так, то мы не будем в программе жестко задавать функцию одномерной оптимизации, а будем передавать её как аргумент функции многомерной оптимизации:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OneDimensionFunction&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;multiDimenshionOptimize1&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;argmin&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; eps
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;multiDimenshionOptimize2&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;argmin&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; eps
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;methods.h#L18&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pattern-listener&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pattern-listener&quot;&gt;#&lt;&#x2F;a&gt;Паттерн listener&lt;&#x2F;h1&gt;
&lt;p&gt;Иногда бывает так, что вам нужно выводить информацию о внутреннем состоянии метода, например, вы решаете задачу оптимизации, и вам надо на каждой итерации выводить текущее решение, значение градиента функции в этой точке итд, чтобы строить таблицу. Вместо того, чтобы делать это явно, можно передавать в функцию метода функцию &lt;code&gt;listener&lt;&#x2F;code&gt;, которая будет получать всё внутреннее состояние метода, и уже у себя внутри решать что с этим делать.&lt;&#x2F;p&gt;
&lt;p&gt;В одном случае она может выводить это на экран, в другом случае - в файл, а в третьем, когда нужная максимальная производительность - ничего не делать с этой информацией.&lt;&#x2F;p&gt;
&lt;p&gt;На самом деле я не использовал это на практике, а пример этого паттерна взял из библиотеки &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;differential-evolution&#x2F;blob&#x2F;9cfefc0b36ed3bf4ca6c37d786244d56c0b3b2ba&#x2F;de_test&#x2F;tutorial.cpp#L71&quot;&gt;дифференциальной эволюции&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Там же можно увидеть &lt;strong&gt;паттерн termination strategy&lt;&#x2F;strong&gt;, при помощи которого можно передавать в метод функцию, которая будет решать когда завершать метод. Но в рамках нашей учебной программы это излишная абстракция, и различные стратегии завершения метода никогда не применятся.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;inkapsuliruem-s-pomoshch-iu-std-function&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#inkapsuliruem-s-pomoshch-iu-std-function&quot;&gt;#&lt;&#x2F;a&gt;Инкапсулируем с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;В УМФ у нас есть задача получить конечно-элементную аппроксимацию функции на основе правой части дифференциального уравнения и сетки конечных элементов. Учитывая эту информацию, решатель МКЭ может выглядеть следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; grid
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Возвращается вектор, потому что мы находим только аппроксимацию весов &lt;code&gt;q&lt;&#x2F;code&gt;, именно они и возвращаются в методе.&lt;&#x2F;p&gt;
&lt;p&gt;Но при решении МКЭ мы не можем игнорировать ту вещь, что нам нужно выставлять краевые условия. Краевые условия - это известные нам значения функции на краях области. Не имея краевых значений, невозможно решить задачу, она просто не сойдется.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому мы должны каким-то образом внутри функции решения дифференциального уравнения выставлять краевые условия.&lt;&#x2F;p&gt;
&lt;p&gt;В нашем курсе УМФ мы не решаем реальные задачи, а лишь исследуем насколько хорошо метод справляется с известными нам функциями &lt;code&gt;u&lt;&#x2F;code&gt;, поэтому может появиться соблазн написать следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; true_function_u
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; doing smth
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; выставляем краевые условия с помощью функции u по краям области
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; делаем что-то дальше
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но это ужасный стиль! Зачем нам находить значение функции при помощи численных методов, которую мы уже знаем? Это выглядит как бред, поэтому более красивым может быть передавать &lt;strong&gt;функцию, которая выставляет краевые условия&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; boundary_setter_function_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; set_boundary_conditions
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; doing smth
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;set_boundary_conditions&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; делаем что-то дальше
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Это очень красивое решение, которое может быть применено при решении реальных задач, если мы реально не знаем истинную функцию, но знаем значения краевых условий. Это значительно повышает абстрактность кода, позволяет его использовать в других проектах.&lt;&#x2F;p&gt;
&lt;p&gt;Так как вы можете использовать это на практике, более подробно смотрите код из курсовой по УМФ:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L146&quot;&gt;Прототип функции выставления краевых условий.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L149&quot;&gt;Сама функция выставления краевых условий на основе известной нам функции u.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L159&quot;&gt;Функция решения МКЭ.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;main.cpp#L32&quot;&gt;Пример использования.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Было показано каким образом &lt;code&gt;std::function&lt;&#x2F;code&gt; позволит вам избавиться от лишнего копипаста и инкапсулировать код и данные и в принципе сделать код намного более абстрактным и красивым. Если вы придумали ещё одно интересное применение &lt;code&gt;std::function&lt;&#x2F;code&gt;, то пишите в комментариях!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Фрактал &#x27;Круги Аполлона&#x27;. Первые эксперименты.</title>
            <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/apollon-circles/</link>
            <guid>https://testzorax.github.io/p/apollon-circles/</guid>
            <description>&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dca9f31ca768a44e00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Этот фрактал основан на бесконечном построении касающихся окружностей.&lt;&#x2F;p&gt;
&lt;p&gt;Суть этого фрактала заключается в следующем: изначально у нас есть минимальный набор окружностей (три), у которого мы знаем положение центров и радиусы. Далее необходимо строить касательную к каждой из них, и к каждой из образовавшихся, и так до бесконечности, чтобы пространство полностью заполнялось без пересечений окружностей.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;851&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;079e9c99fb32c36500.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому, для того, чтобы нарисовать при помощи программы такой фрактал, необходимо сначала решить простую задачу:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;Как, зная координаты центра и радиус трех окружностей, найти все касательные к ним? 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но для начала &lt;em&gt;свойство двух касательных окружностей:&lt;&#x2F;em&gt; если касание внешнее, то расстояние между центрами окружностей равно сумме их радиусов; если касание внутреннее, то расстояние между центрами равно разности их радиусов, взятое по модулю.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;431&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8dd0153a3e68544800.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Учитывая, что окружностей три, а каждая может касаться четвертой двумя способами, получаем всего 2³=8 способов как могут касаться три окружности с четвертой, которую надо найти. &lt;&#x2F;p&gt;
&lt;p&gt;Благодаря этому свойству можем составить систему из трех уравнений, где есть три неизвестных. За m&lt;sub&gt;1&lt;&#x2F;sub&gt;, m&lt;sub&gt;2&lt;&#x2F;sub&gt;, m&lt;sub&gt;3&lt;&#x2F;sub&gt; я обозначил параметры - внешнее или внутреннее касание для конкретной окружности: +1 означает внешнее касание, -1 внутреннее (рисунок 4).&lt;&#x2F;p&gt;
&lt;p&gt;Благодаря этому свойству можем составить систему из трех уравнений, где есть три неизвестных. За m&lt;sub&gt;1&lt;&#x2F;sub&gt;, m&lt;sub&gt;2&lt;&#x2F;sub&gt;, m&lt;sub&gt;3&lt;&#x2F;sub&gt; я обозначил параметры - внешнее или внутреннее касание для конкретной окружности: +1 означает внешнее касание, -1 внутреннее.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;785&quot;
    height=&quot;210&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;317ad607fcc4b81100.webp&quot; 
    onclick=&quot;full_screen(&#x27;formulas.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;formulas.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Такую систему уравнений надо как-то решить. Поначалу она может показаться страшной, и на самом деле так и есть :) И проще её решить аналитически, чем при помощи всяких численных методов. Но это аналитическое решение не способна выдать ни одна система символьных вычислений, а если может, то ей не хватит памяти, либо формула выходит километровой, и ее невозможно использовать в программе (если вы найдете такую программу, которая сможет решить эту систему, и там не будет километровой формулы, то я скинусь вам на шаурму). Поэтому единственный доступный способ - решать на бумажке, делая огромное число замен.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;312&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3601259840ca2db000.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_4.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Пример решения системы уравнений для различных m&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!-- TODO сделать надпись выше привязанной к картинке --&gt;
&lt;p&gt;Я не буду здесь приводить решение, потому что это слишком сложно: я ещё в школе пытался решить эту систему, но так и не смог; лишь после двух курсов в университете, мои мозги достаточно подготовились, чтобы решить ее до конца. Если захотите повторить мой подвиг, то вот вам подсказка: делайте больше замен, заменяя некоторые части на новые переменные.&lt;&#x2F;p&gt;
&lt;p&gt;Одна очень важная деталь, которую я выяснил насчет решения: оно численно неустойчиво даже для вещественных чисел двойной точности (это при том, что там вычисляются только формулы!), поэтому я использовал библиотеку для длинной арифметики &lt;code&gt;boost::multiprecision::cpp_bin_float&lt;&#x2F;code&gt;, где задал размер вещественного числа в 40 байт (320 бит).&lt;&#x2F;p&gt;
&lt;p&gt;Далее, имея функцию нахождения касательных окружностей к трем данным, можно легко написать функцию, которая из изначального набора строит весь фрактал. В этой функции будет использоваться рекурсия, а так же там надо учесть, чтобы не возникали окружности, которые уже рисовались.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом получается первая картинка.&lt;&#x2F;p&gt;
&lt;p&gt;Ну а на следующей картинке показаны первые эксперименты: внутрь всех окружностей была вписана изначальная окружность. &lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7d7a9c8b0d6e1ee400.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_5.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;А на следующей картинке такой процесс повторялся до бесконечности (причем, чтобы выглядело красиво, цвет более глубоких итераций ставился на более блёклый).&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;48adcc45418acfbb00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_6.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_6.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Далее планируется переписать код, чтобы он стабильно работал для всех случаев, когда может происходить деление на ноль; вообще создать целую библиотеку вычислений касательных окружностей для разных случаев; создание различных анимаций; создание кругов Аполлона со случайными характеристиками на всех уровнях.&lt;&#x2F;p&gt;
&lt;p&gt;Если у вас появятся идеи того, что ещё можно натворить с кругами Аполлона — предлагайте их в комментариях.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
