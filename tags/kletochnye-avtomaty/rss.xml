<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>optozorax.blog - клеточные-автоматы</title>
        <link>https://testzorax.github.io/</link>
        <description>Мои програмульки и результаты их работы</description>
        <generator>Zola</generator>
        <language>ru</language>
        <atom:link href="https://testzorax.github.io/tags/kletochnye-avtomaty/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 28 Jul 2021 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Свойства обратимых 1D автоматов</title>
            <pubDate>Wed, 28 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/invertible-1d-automata/</link>
            <guid>https://testzorax.github.io/p/invertible-1d-automata/</guid>
            <description>&lt;style&gt;
.container { 
  display: flex; 
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-around;
  width: 90%;
  border: 1px solid gray;
  padding: 10px;
  margin: 5px;
}
.automata-col {
  border: 1px solid rgba(39,41,43,0.1); 
  background-color: rgba(39,41,43,0.03);
  padding: 10px;
  margin: 5px;
  min-width: 110px;
  flex: 1 0 0%;
}
.pixelated {
  -ms-interpolation-mode: nearest-neighbor;
  image-rendering: crisp-edges;
  image-rendering: pixelated;
}

.skip-img {
  display: none;
}

.skip-img, .both-img, .any-img {
  width: 150px;
  margin: 2px;
  border-radius: 0px;
}
.automata-name {
  font-size: 12pt;
  font-family: monospace;
}
.svg {
}
&lt;&#x2F;style&gt;
&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;Предполагается что перед чтением этой статьи вы уже знакомы с тем что такое Клеточный автомат, и знакомы с правилом &lt;code&gt;110&lt;&#x2F;code&gt; или правилом &lt;code&gt;30&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Если нет, то рекомендуется прочитать эти две статьи:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;273393&#x2F;&quot;&gt;Простейшие клеточные автоматы и их практическое применение&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;company&#x2F;wolfram&#x2F;blog&#x2F;470425&#x2F;&quot;&gt;30.000$ за решение задач о Правиле 30 для клеточных автоматов — конкурс от Стивена Вольфрама&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ещё предполагается что вы знакомы с тем что такое &lt;strong&gt;обратимый&lt;&#x2F;strong&gt; клеточный автомат. Если нет, то рекомендуется прочитать эту статью на Википедии:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9A%D1%80%D0%B8%D1%82%D1%82%D0%B5%D1%80%D1%8B&quot;&gt;Криттеры&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Так же я писал про обратимые автоматы в своём телеграм канале начиная отсюда: &lt;a href=&quot;https:&#x2F;&#x2F;t.me&#x2F;optozorax_dev&#x2F;235&quot;&gt;optozorax_dev&#x2F;235&lt;&#x2F;a&gt; на 7 постов.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;tablitsa-avtomatov&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#tablitsa-avtomatov&quot;&gt;#&lt;&#x2F;a&gt;Таблица автоматов&lt;&#x2F;h1&gt;
&lt;p&gt;В данной статье я хочу аналогично предыдущим рассмотреть одномерные обратимые клеточные автоматы и выяснить их свойства.&lt;&#x2F;p&gt;
&lt;p&gt;Обратимые клеточные автоматы можно получить множеством способов, но я выберу именно тот, которым сконструированы Криттеры, а именно — соседство Марголуса. В одномерном случае оно будет иметь размер 2 бита, поэтому количество возможных состояний будет равно 2² = 4, а количество возможных правил равно 2²! = 24.&lt;&#x2F;p&gt;
&lt;p&gt;Все эти автоматы можно посмотреть в таблице ниже. Здесь всё начинается со случайной строки из нулей и единиц, конец которой замкнут на начало. Затем к ней применяются правила данного автомата, и каждая получающаяся строка прибавляется вниз картинки. То есть на картинках время идёт вниз, а направление вправо или влево. Сверху подписан номер автомата (число от 0 до 23), а снизу подписано правило этого автомата, то есть перестановка чисел &lt;code&gt;[0, 1, 2, 3]&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col trivial trivial_two time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;0&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;0_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;0_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 1 2 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;1_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 1 3 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;2_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;2_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 2 1 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;3&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;3_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;3_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 2 3 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;4&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;4_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;4_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 3 1 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;5&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;5_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;5_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[0 3 2 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;6&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;6_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;6_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 0 2 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial_two time_symmetricale anti_time_symmetricale self_inverse&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;7&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;7_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;7_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 0 3 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;8&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;8_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;8_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 2 0 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;9&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;9_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;9_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 2 3 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;10&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;10_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;10_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 3 0 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;11&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;11_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;11_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[1 3 2 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;12&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;12_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;12_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 0 1 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;13&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;13_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;13_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 0 3 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;14&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;14_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;14_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 1 0 3]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;15&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;15_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;15_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 1 3 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial_two time_symmetricale anti_time_symmetricale self_inverse&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;16&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;16_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;16_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 3 0 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;17&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;17_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;17_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[2 3 1 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;18&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;18_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;18_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 0 1 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;19&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;19_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;19_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 0 2 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;20&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;20_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;20_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 1 0 2]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;21_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 1 2 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col anti_time_symmetricale&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;22&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;22_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;22_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 2 0 1]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col trivial trivial_two time_symmetricale anti_time_symmetricale self_mirror self_inverse save_count&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;23&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated skip-img&quot; src=&quot;img&#x2F;23_skip.png&quot;&gt;
&lt;img class=&quot;pixelated both-img&quot; src=&quot;img&#x2F;23_both.png&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;[3 2 1 0]&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Так как соседство Марголуса требует на чётных шагах применять правила, начиная с чётных ячеек, а на нечётных шагах применять правила для нечётных ячеек, я добавил возможность включать и выключать показ нечётных шагов. Некоторые автоматы ведут себя одинаково для чётных шагов, например &lt;code&gt;0&lt;&#x2F;code&gt; ~ &lt;code&gt;23&lt;&#x2F;code&gt;, &lt;code&gt;2&lt;&#x2F;code&gt; ~ &lt;code&gt;10&lt;&#x2F;code&gt; ~ &lt;code&gt;13&lt;&#x2F;code&gt; ~ &lt;code&gt;21&lt;&#x2F;code&gt;. Это можно настраивать здесь:&lt;br&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; id=&quot;img_intermediate&quot; name=&quot;img_intermediate&quot; checked&gt; Показывать нечётные шаги&lt;&#x2F;label&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;razlichnye-svoistva&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#razlichnye-svoistva&quot;&gt;#&lt;&#x2F;a&gt;Различные свойства&lt;&#x2F;h1&gt;
&lt;p&gt;Ещё в данной таблице можно показать различные свойства автоматов. Можете выбирать конкретное свойство и пролистать вверх, автоматы обладающие им, подсветятся красным цветом.&lt;&#x2F;p&gt;
&lt;form name=&quot;properties_radio&quot;&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;all&quot; checked &gt; Убрать свойства&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;trivial&quot; &#x2F;&gt; Сохраняют текущее состояние&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;trivial_two&quot; &#x2F;&gt; Сохраняют через два состояния&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;self_mirror&quot; &#x2F;&gt; Зеркалирование правил приводит к самому себе&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;save_count&quot; &#x2F;&gt; Сохраняют количество закрашенных клеток&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;time_symmetricale&quot; &#x2F;&gt; Одинаковые законы для симуляции назад и вперёд во времени&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;anti_time_symmetricale&quot; &#x2F;&gt; Правило для симуляции назад во времени равно текущему с инвертированными цветами&lt;&#x2F;label&gt;&lt;br&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;prop&quot; value=&quot;self_inverse&quot; &#x2F;&gt; Инвертирование цвета правил приводит к самому себе&lt;&#x2F;label&gt;&lt;br&gt;
&lt;&#x2F;form&gt;
&lt;p&gt;Все свойства вычисляются для автоматов через 2 шага, то есть после чётного и нечётного хода. Мне кажется оценивать свойства автомата после 1 шага, не зная какой был до этого: чётный или нечётный не очень полезно, потому что вариантов становится слишком много, и свойств практически не остаётся. Некоторые свойства я объясню далее:&lt;&#x2F;p&gt;
&lt;p&gt;Самые скучные автоматы - &lt;strong&gt;сохраняющие текущее состояние&lt;&#x2F;strong&gt;. Это автоматы &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt;. Они не делают ничего.&lt;&#x2F;p&gt;
&lt;p&gt;Чуть менее скучные автоматы — &lt;strong&gt;сохраняющие через два состояния&lt;&#x2F;strong&gt;. Относительно данного шага, их шаг в прошлое и шаг в будущее должны быть одинаковы. В итоге это выливается в то, что они приходят к изначальному состоянию максимум через 4 шага. Тут добавляется ещё два автомата: &lt;code&gt;7&lt;&#x2F;code&gt; и &lt;code&gt;16&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё чуть менее-скучные автоматы — &lt;strong&gt;при зеркалировании приводящие сами в себя&lt;&#x2F;strong&gt;. То есть они не способны различать где лево, а где право. Тут к тривиальным &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt; добавляются &lt;code&gt;2 и 21&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Одинаковые законы для симуляции назад и вперёд во времени&lt;&#x2F;strong&gt; — мне кажется это свойство аналогично &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;T-%D1%81%D0%B8%D0%BC%D0%BC%D0%B5%D1%82%D1%80%D0%B8%D1%8F&quot;&gt;T-симметрии&lt;&#x2F;a&gt;, хотя я не знаю насколько справедливо проводить такие аналогии. К ним относится треугольный &lt;code&gt;1&lt;&#x2F;code&gt; и порождаемые им (далее мы увидим это).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Правило для симуляции назад во времени равно текущему с инвертированными цветами&lt;&#x2F;strong&gt; — то же самое, что и предыдущее, только инвертированное. Это свойство интересно, ведь Криттеры именно такими и являются. То есть если в криттерах инвертировать всё поле, то там будут возникать глайдеры, состоящие не из заполненных клеток, а из пустых клеток, и эти глайдеры будут двигаться назад во времени, а не вперёд.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Инвертирование цвета правил приводит к самому себе&lt;&#x2F;strong&gt; — тут интересны автоматы &lt;code&gt;10&lt;&#x2F;code&gt; и &lt;code&gt;13&lt;&#x2F;code&gt;, потому что другими особыми свойствами они не обладают.&lt;&#x2F;p&gt;
&lt;p&gt;Давайте соберём список нетривиальных автоматов, которые обладают своим уникальным свойством:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{1, 5, 6, 14}&lt;&#x2F;code&gt; не различают направление времени.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{9, 17, 18, 22}&lt;&#x2F;code&gt; двигаются назад во времени для инвертированных цветов.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{2, 21}&lt;&#x2F;code&gt; не различают лево и право.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;{10, 13}&lt;&#x2F;code&gt; не различают белый и чёрный.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;krasivye-avtomaty&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#krasivye-avtomaty&quot;&gt;#&lt;&#x2F;a&gt;Красивые автоматы&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1&lt;&#x2F;code&gt; похож на правило &lt;code&gt;30&lt;&#x2F;code&gt; для обычных автоматов, тоже формирует треугольники, только повёрнутые на 90°.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2&lt;&#x2F;code&gt; похож на узор для рубашки.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;21&lt;&#x2F;code&gt; похож на &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Block_cellular_automaton#Tron&quot;&gt;правило Tron&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;2_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;h1 id=&quot;porozhdenie-pravil&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#porozhdenie-pravil&quot;&gt;#&lt;&#x2F;a&gt;Порождение правил&lt;&#x2F;h1&gt;
&lt;p&gt;Если вернуться в начало и посмотреть на все автоматы, то можно заметить, что для автомата &lt;code&gt;1&lt;&#x2F;code&gt;, &lt;code&gt;5&lt;&#x2F;code&gt; является его зеркальным отражением, &lt;code&gt;6&lt;&#x2F;code&gt; его инверсией, а &lt;code&gt;14&lt;&#x2F;code&gt; одновременно инверсией и зеркальным отражением.&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;5&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;5_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;6&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;6_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;14&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;14_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Поэтому можно задаться вопросом: а какие автоматы можно вывести из каких при помощи различных операций над правилами?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;trivial-nye-porozhdeniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#trivial-nye-porozhdeniia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Тривиальные порождения&lt;&#x2F;h2&gt;
&lt;p&gt;Возьмём преобразования правил, для которых мы можем точно сказать: да, это одно и то же правило, только немного-по другому.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Поменять местами лево и право. Будет обозначаться &lt;span style=&quot;color: green; font-weight: bold;&quot;&gt;Зелёным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Инвертировать белый на чёрный. Будет обозначаться &lt;span style=&quot;color: red; font-weight: bold;&quot;&gt;Красным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Инвертировать правила на симуляцию назад во времени. Будет обозначаться &lt;span style=&quot;font-weight: bold;&quot;&gt;Чёрным цветом&lt;&#x2F;span&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Тогда все правила будут иметь такие связи:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;3.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;4.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;5.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;6.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;7.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;8.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут что-то не так. Почему-то &lt;code&gt;0&lt;&#x2F;code&gt; и &lt;code&gt;23&lt;&#x2F;code&gt; никак не связаны, как не связаны &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;21&lt;&#x2F;code&gt;, а ведь они одинаковы если пропустить нечётные шаги:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;0&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;0_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;23&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;23_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;21&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;21_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Зато автоматы &lt;code&gt;1&lt;&#x2F;code&gt;, &lt;code&gt;5&lt;&#x2F;code&gt;, &lt;code&gt;6&lt;&#x2F;code&gt;, &lt;code&gt;14&lt;&#x2F;code&gt; связаны между собой, и это радует:&lt;&#x2F;p&gt;
&lt;p&gt;Значит нам нужно придумать ещё какое-то правило для порождения нового правила, чтобы другие можно было связать.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;poluinversiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#poluinversiia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Полуинверсия&lt;&#x2F;h2&gt;
&lt;p&gt;Давайте добавим правило, которое реализуется полу-инверсией. Если правило можно представить в следующем виде: &lt;code&gt;[00, 01, 10, 11] → [11, 01, 0, 10]&lt;&#x2F;code&gt;, то обычная инверсия инвертирует биты с двух сторон, а полу-инверсия только с правой стороны. Будем обозначать её &lt;span style=&quot;color: purple; font-weight: bold;&quot;&gt;Фиолетовым цветом&lt;&#x2F;span&gt;. Тогда наши графы будут выглядеть следующим образом:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;9.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;10.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;11.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;12.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут интересная особенность. Кластер правил, порождённых от &lt;code&gt;1&lt;&#x2F;code&gt;, связался с кластером правил, порождённых от &lt;code&gt;22&lt;&#x2F;code&gt;. Ну и они довольно похожи:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;1&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;1_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;22&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;22_both.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;А кластер правил, порождённых от &lt;code&gt;3&lt;&#x2F;code&gt;, связался с кластером от &lt;code&gt;20&lt;&#x2F;code&gt;. Они выглядят похожим образом при пропуске нечётных шагов:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;3&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;3_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;20&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;20_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Если посмотреть на то как новая операция связывает правила, то можно сказать что она просто делает &lt;code&gt;23-x&lt;&#x2F;code&gt;. То есть с этой операцией мы можем получить любое правило с &lt;code&gt;12&lt;&#x2F;code&gt; включительно, если нам известны все правила до 11. Это хорошо, потому что можно выкинуть половину правил и знать что она будет симметрична первой половине относительно полу-инверсии.&lt;&#x2F;p&gt;
&lt;p&gt;Но у нас всё ещё не связаны правила &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;10&lt;&#x2F;code&gt;, которые просто идентичны без нечётных шагов:&lt;&#x2F;p&gt;
&lt;center&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;2&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;2_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;automata-col&quot;&gt;
&lt;span class=&quot;automata-name&quot;&gt;&lt;b&gt;10&lt;&#x2F;b&gt;&lt;&#x2F;span&gt;&lt;br&gt;
&lt;img class=&quot;pixelated any-img&quot; src=&quot;img&#x2F;10_skip.png&quot;&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;strannaia-operatsiia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#strannaia-operatsiia&quot;&gt;#&lt;sup&gt;2&lt;&#x2F;sup&gt;&lt;&#x2F;a&gt;Странная операция&lt;&#x2F;h2&gt;
&lt;p&gt;Я не смог найти комбинацию из обращения времени, отзеркаливания, инверсии, их половинок и всех их комбинаций, чтобы связать &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;10&lt;&#x2F;code&gt; правило. Единственное что я нашёл, это операцию: поменять местами 0 и 1 элемент, и поменять местами 2 и 3 элемент в массиве правила (обозначается квадратными скобками в таблице). Назовём это &lt;strong&gt;странной операцией&lt;&#x2F;strong&gt;, и будем обозначать &lt;span style=&quot;color: cyan; font-weight: bold;&quot;&gt;Циановым цветом&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Тогда у нас получается следующий набор графов:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;13.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;14.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;15.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;16.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Ура! Теперь у нас связаны тривиальные автоматы &lt;code&gt;{0, 7, 16, 23}&lt;&#x2F;code&gt; и чуть более сложные, но тоже очень простые &lt;code&gt;{2, 10, 13, 21}&lt;&#x2F;code&gt;. А что касается остальных автоматов, с ними не произошло ничего особенного. Что уже было связано прежними операциями, так и осталось связано ими.&lt;&#x2F;p&gt;
&lt;p&gt;Итого у нас получается 4 группы автоматов, которые можно получить довольно простыми операциями, которые не очень сильно меняют поведение автомата. Можно сказать что если мы изучим свойства автомата &lt;code&gt;1&lt;&#x2F;code&gt;, то по идее можем эктраполировать его свойства с учётом полу-инверсии на &lt;code&gt;22&lt;&#x2F;code&gt; автомат.&lt;&#x2F;p&gt;
&lt;p&gt;Правда мне эта &lt;strong&gt;странная операция&lt;&#x2F;strong&gt; не нравится совсем. Ведь я не понимаю что будет если её обобщить на:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Автоматы с большим размером блока (от 3 и больше)&lt;&#x2F;li&gt;
&lt;li&gt;Автоматы с большим числом цветов (от 3 и больше)&lt;&#x2F;li&gt;
&lt;li&gt;Автоматы с большей размерностью (от 2 и больше)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Поэтому если у вас есть идеи что с этим можно сделать — пишите.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2d-vremia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#2d-vremia&quot;&gt;#&lt;&#x2F;a&gt;2D время&lt;&#x2F;h1&gt;
&lt;p&gt;Следующее исследование свойств вдохновлено статьёй о том как создать 2D время для необратимых клеточных автоматов:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dmishin.blogspot.com&#x2F;2014&#x2F;06&#x2F;cellular-automata-with-2-temporal.html&quot;&gt;CELLULAR AUTOMATA WITH 2 TEMPORAL DIMENSIONS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Там автор предлагает идею 2D времени, которая требует иметь две функции \(f, g\), которые дают одинаковый результат независимо от порядка их применения \(f(g(x)) = g(f(x))\). Поэтому можно проверить все автоматы и узнать кто с кем коммутирует. Прежде всего надо сказать что автоматы &lt;code&gt;{0, 23, 7, 16}&lt;&#x2F;code&gt; коммутируют со всеми, а они совсем тривиальны и не интересны, поэтому я исключил их из графа. И у меня получился следующим результат:&lt;&#x2F;p&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute0.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute1.svg&quot;&gt;
&lt;img class=&quot;svg&quot; src=&quot;svg&#x2F;commute2.svg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Тут задействованы правила только из групп, порождённых &lt;code&gt;2&lt;&#x2F;code&gt; и &lt;code&gt;3&lt;&#x2F;code&gt;, но нет автоматов, порождённых от треугольной &lt;code&gt;1&lt;&#x2F;code&gt;, что довольно печально.&lt;&#x2F;p&gt;
&lt;p&gt;Получается примерно тот же результат, как и в той статье, что между собой коммутируют только довольно скучные автоматы, не считая тривиальных.&lt;&#x2F;p&gt;
&lt;p&gt;То что можно рисовать графы между правилами было вдохновлено этой статьёй:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;dmishin.blogspot.com&#x2F;2016&#x2F;01&#x2F;graph-of-commuting-elementary-cellular.html&quot;&gt;GRAPH OF COMMUTING ELEMENTARY CELLULAR AUTOMATA&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Для вычисления того коммутируют два правила или нет, я просто беру очень длинную строку на 10к бит, и проверяю формулу &lt;code&gt;f(g(x)) = g(f(x))&lt;&#x2F;code&gt; на ней одной. Так что мои результаты не идеальны, но вероятность ошибки крайне мала.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;iskhodniki&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#iskhodniki&quot;&gt;#&lt;&#x2F;a&gt;Исходники&lt;&#x2F;h1&gt;
&lt;p&gt;Исходники для вычисления картинок, свойств и графов для этой статьи находятся в репозитории: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;time_2d_inversible_automata&quot;&gt;optozorax&#x2F;time_2d_inversible_automata&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dal-neishaia-rabota&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dal-neishaia-rabota&quot;&gt;#&lt;&#x2F;a&gt;Дальнейшая работа&lt;&#x2F;h1&gt;
&lt;p&gt;Мне кажется должны найтись очень интересные правила для:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Обратимых одномерных автоматов с &lt;strong&gt;3&lt;&#x2F;strong&gt; цветами и размером блока &lt;strong&gt;2&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Обратимых одномерных автоматов с &lt;strong&gt;2&lt;&#x2F;strong&gt; цветами и размером блока &lt;strong&gt;3&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;В первом случае получается 3²! = 362_880, а во втором 2³! = 40_320 автоматов, что тоже очень много...&lt;&#x2F;p&gt;
&lt;p&gt;Тут придётся уже писать софт, чтобы в графах искать компоненты связности. И больше раскидывать мозгами. Но думаю что количество групп, из которых можно вывести всё остальное, должно быть не таким большим. А далее уже можно исследовать группы на коммутативность. Может среди этих вариантов найдутся интересные правила, для которых можно образовать двумерное время.&lt;&#x2F;p&gt;
&lt;script&gt;
function highlight(name) {
  let elements = document.getElementsByClassName(name);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style[&quot;background-color&quot;] = &#x27;rgba(255,41,43,0.20)&#x27;;
  }
}
function leave(name) {
  let elements = document.getElementsByClassName(name);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style[&quot;background-color&quot;] = &quot;rgba(39,41,43,0.03)&quot;;
  }
}
function show(skip_img, both_img) {
  let elements = document.getElementsByClassName(&quot;skip-img&quot;);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style.display = skip_img;
  }

  elements = document.getElementsByClassName(&quot;both-img&quot;);
  for (var i = elements.length - 1; i &gt;= 0; i--) {
    elements[i].style.display = both_img;
  }
}

show(&quot;none&quot;, &quot;block&quot;);

let rad = document.properties_radio.prop;
let prev = { value: &#x27;all&#x27; };
for (var i = 0; i &lt; rad.length; i++) {
    rad[i].addEventListener(&#x27;change&#x27;, function() {
        if (this !== prev) {
            leave(prev.value);
            highlight(this.value);
        }
        prev = this;
    });
}

document.getElementById(&#x27;img_intermediate&#x27;).addEventListener(&#x27;change&#x27;, function() {
    if (this.checked) {
      show(&quot;none&quot;, &quot;block&quot;);
    } else {
      show(&quot;block&quot;, &quot;none&quot;);
    }
});
&lt;&#x2F;script&gt;
</description>
        </item>
        <item>
            <title>Клеточный автомат на основе фильма «Довод»</title>
            <pubDate>Thu, 29 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/the-tenet-of-life/</link>
            <guid>https://testzorax.github.io/p/the-tenet-of-life/</guid>
            <description>&lt;p&gt;Сразу как у нас открыли кинотеатры, я побежал смотреть фильм &amp;quot;Довод&amp;quot; от Нолана. Мне очень понравилось. И весь дальнейший пост будет основан на концепции из этого фильма, так что если вы не любите спойлеры, то лучше не читайте дальше. Хотя, возможно, я рассказываю спойлеры только максимум на уровне трейлера, я хз, не смотрю трейлеры из-за ненависти к любым спойлерам. Короче, я вас предупредил.&lt;&#x2F;p&gt;
&lt;p&gt;Меня не особо интересуют всякие персонажи и прочие кожаные мешки, а вот концепции и идеи - очень даже. Поэтому мне ОООЧЕНЬ понравился этот фильм. И в &amp;quot;Доводе&amp;quot; как раз показывается ОЧЕНЬ интересная концепция, когда вещество, идущее обратно во времени, существует параллельно с веществом, идущим вперёд во времени. Это даже путешествием во времени назвать нельзя, потому что это не то читерство с гитовыми ветками, которое нам показывают в других фильмах, это очень органичная, сложная, противоречивая и интересная вещь. Сразу после фильма я задался единственным главным вопросом: возможно ли и как такое симулировать?! Интересует как минимум возможность симуляции такого через клеточный автомат, не то что физика. Как раз хорошим совпадением стало то, что я за пару месяцев до этого наконец &lt;a href=&quot;&#x2F;critters&quot;&gt;реализовал обратимый автомат Critters и немного его поисследовал&lt;&#x2F;a&gt;. Я сразу подумал, что обратимость Critters должна как-то помочь с концепцией Довода, но в первые дни я так и ничего не смог придумать.&lt;&#x2F;p&gt;
&lt;p&gt;Так же я начал думать каким образом прошлое может знать о том каким будет будущее, так что наверняка обязательно придётся решать какую-то астрономически огромную систему уравнений, чтобы реализовать что-то подобное &amp;quot;Доводу&amp;quot;, поэтому концепция обычной пошаговой симуляции тут может быть неприменима.&lt;&#x2F;p&gt;
&lt;p&gt;Затем я начал целенаправленно думать как это симулировать и наконец придумал. Обратимость Critters действительно помогла, и я сделал на основе него обратимый клеточный автомат, где существует одновременно три вещества: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;пустота - чёрные клетки, &lt;&#x2F;li&gt;
&lt;li&gt;вещество идущее вперёд во времени - синие клетки,&lt;&#x2F;li&gt;
&lt;li&gt;вещество идущее обратно во времени - красные клетки.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Блин, у меня цвета походу с фильмом не сходятся :(&lt;&#x2F;p&gt;
&lt;p&gt;При этом:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Если свапнуть цвет красного и синего, и ещё сделать одну мелочь, то симуляция времени вперёд будет равна симуляции времени назад до свапа. То есть все состояния корректно идут во времени в нужную сторону, и существует относительность направления времени!: красным кажется что они идут вперёд, а синие назад во времени, а синим что они идут вперёд, а красные назад.&lt;&#x2F;li&gt;
&lt;li&gt;Наборы клеток, которые состоят из пустоты, красных и синих клеток корректно обрабатываются.&lt;&#x2F;li&gt;
&lt;li&gt;Если правила для обычных Critters имеют размер &lt;code&gt;2^4&lt;&#x2F;code&gt;, то в моём автомате они размером &lt;code&gt;2*3^4&lt;&#x2F;code&gt;. Такой большой размер тоже составляет некоторую сложность в разработке правил.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Назвал я этот автомат гордым именем и с уважением к вдохновителю: The Tenet Of Life (Critters является самым близким аналогом The Game Of Life в мире обратимых автоматов, поэтому вполне логично). &lt;&#x2F;p&gt;
&lt;p&gt;Там были интересные проблемы и их решения, так что я хочу всё это подробно рассказать вместе с картинками, но сейчас у меня нет времени и мотивации. Надеюсь когда-нибудь в будущем доберусь.&lt;&#x2F;p&gt;
&lt;p&gt;Ладно, а теперь время картинок!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;В прошлом посте про Critters я не осилил управление мышью, поэтому там были очень шакальные картинки, и вы даже не смогли рассмотреть глайдера. Чтож, я исправил это недоразумение, теперь я сделал управление мышью и можно масштабировать, передвигать. И ещё интерфейс есть вместо клавиш на клавиатуре.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_1_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Это глайдер в обычном автомате Critters. Так как он синего цвета, видно что он идёт вперёд во времени. Здесь показывается как этот глайдер двигается в направлении куда он указывает. Так же здесь показывается сетка, чтобы можно было видеть как работают блочные правила обычного Critters, о которых я ранее рассказывал.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_2_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А здесь одновременно два глайдера с разными направлениями времени. Красный глайдер указывает влево, но идёт вправо, потому что он обращён во времени. И вообще эта гифка немного напоминает сцену из фильма с машинами) Я думаю это сделать логотипом моего автомата.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_3_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А тут просто куча клеток разных времён как-то взаимодействуют...&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; controls&gt;
  &lt;source src=&quot;article_4_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А это так правила записываны в коде))))))))))000)0 Конечно, эти массивы вычисляется. Вычислением просто занимается другой код.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;546&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3366ce0f175281e600.webp&quot; 
    onclick=&quot;full_screen(&#x27;article_5.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;article_5.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А это я проектировал правила на draw.io. Не пытайтесь понять, просто спойлер, в будущем подробно расскажу об этом.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one-two&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;396&quot;
    height=&quot;640&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;800892818cb69b2700.webp&quot; 
    onclick=&quot;full_screen(&#x27;article_6.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;article_6.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Мне кажется ничего интересного или революционного я не увидел. Просто красные и синие клетки кипишатся и обладают хорошими математическими свойствами. Поэтому самое интересное - то как я его сделал, а не сам результат. Результаты не интересные потому что сам изначальный автомат Critters не очень интересный. Тут надо другие обратимые автоматы исследовать с таким подходом.&lt;&#x2F;p&gt;
&lt;p&gt;Ну и ещё результаты не очень интересные, потому что у меня нет самой главной фичи из фильма - устройства, которое обращает назад во времени всё что в него войдёт. Ведь именно такое устройство и создаёт интересные парадоксы и вынос мозга. А судя по тому что получилось у меня, просто параллельное существование двух временных типов материи не очень интересно и не очень противоречиво.&lt;&#x2F;p&gt;
&lt;p&gt;Мне кажется ввести клетки, которые делают такое инвертирование либо невозможно, либо придётся решать астрономическую систему уравнений, либо очень сложно. И если такое вводить, то надо заранее просчитывать вселенную чтобы она была согласована с этим устройством, потому что оно на вход должно принимать два одинаковых объекта с разными направлениями времени. То есть надо заранее пускать обратный и прямой глайдер в эту машину, чтобы они вошли в неё и исчезли, тогда результат этой машины будет как в фильме.&lt;&#x2F;p&gt;
&lt;p&gt;Если суметь создать такую машину, и направить туда прямой глайдер, но не направить обратный, то мне кажется что эта машина ещё до входа создаст много всякого шума, который самоаннигилируется с этим глайдером, и он умрёт, так и не попав назад во времени.&lt;&#x2F;p&gt;
&lt;p&gt;Ещё, касательно простых обратимых автоматов могу посоветовать смотреть это:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=FiO6jkNkrb4&quot;&gt;Большой обзор клеточных автоматов от Онигири&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Quj5fP2Lqio&quot;&gt;Квантовый компьютер и обратимые вычисления от Онигири&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%9F%D1%80%D0%B8%D0%BD%D1%86%D0%B8%D0%BF_%D0%9B%D0%B0%D0%BD%D0%B4%D0%B0%D1%83%D1%8D%D1%80%D0%B0&quot;&gt;Принцип Ландауэра на Википедии&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Я знаком с Онигири, и так интересно случается что у нас абсолютно случайно темы с этими автоматами пересеклись по времени и по смыслу в видео что я посоветовал) У него к сожалению видео не изобилуют сложными подробностями, и ориентированны на более молодую аудиторию, но в целом много нового можно узнать)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Обратимые клеточные автоматы</title>
            <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/critters/</link>
            <guid>https://testzorax.github.io/p/critters/</guid>
            <description>&lt;p&gt;Всем известно про такой клеточный автомат, как &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Conway%27s_Game_of_Life&quot;&gt;&amp;quot;Conway&#x27;s Game Of Life&amp;quot;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;У этого автомата есть такое свойство как необратимость, то есть у данного расположения клеток может быть от 0 до бесконечного числа предков, которые приводят к этому состоянию. Состояния, у которых не может быть предка, называются &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%A1%D0%B0%D0%B4_%D0%AD%D0%B4%D0%B5%D0%BC%D0%B0_%28%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F_%D0%BA%D0%BB%D0%B5%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE_%D0%B0%D0%B2%D1%82%D0%BE%D0%BC%D0%B0%D1%82%D0%B0%29&quot;&gt;Садом Эдема&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Легко понять что этот автомат необратим: в нём возможно создать состояния, приводящие к пустому пространству. Очевидно, у пустоты существует бесконечное число предков.&lt;&#x2F;p&gt;
&lt;p&gt;Для устранения этого свойства придумали обратимые клеточные автоматы, то есть у такого автомата всегда может быть потомок и причём только один, и его можно легко алгоритмически вычислить.&lt;&#x2F;p&gt;
&lt;p&gt;По сути такой автомат позволяет заглянуть в прошлое, если нам известно настоящее!&lt;&#x2F;p&gt;
&lt;p&gt;По этим автоматам очень мало информации в сети, из-за чего они меня так сильно заинтересовали. Пример такого автомата - &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Critters_%28block_cellular_automaton%29&quot;&gt;Critters&lt;&#x2F;a&gt;. Алгоритм его работы такой: без пересечений смотрятся все квадратики &lt;code&gt;2x2&lt;&#x2F;code&gt; и заменяются согласно трансформации на вики. Затем сетка квадратиков смещается на &lt;code&gt;1&lt;&#x2F;code&gt; по диагонали и делается то же самое. Теперь считается что прошёл один шаг и сетка снова двигается на &lt;code&gt;1&lt;&#x2F;code&gt; по диагонали (возвращается в прошлое состояние).&lt;&#x2F;p&gt;
&lt;p&gt;Введу пару обозначений: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;&#x2F;code&gt; - текущее состояние,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;10&lt;&#x2F;code&gt; - симуляцию &lt;code&gt;10&lt;&#x2F;code&gt; шагов вперёд от текущего состояния,&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-10&lt;&#x2F;code&gt; - симуляцию &lt;code&gt;10&lt;&#x2F;code&gt; шагов назад.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Меня интересовало в этом автомате: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;как будет выглядеть &lt;code&gt;-10&lt;&#x2F;code&gt;, если я что-то нарисую в &lt;code&gt;0&lt;&#x2F;code&gt;; &lt;&#x2F;li&gt;
&lt;li&gt;как будет выглядеть &lt;code&gt;0&lt;&#x2F;code&gt;, если просимулировать до &lt;code&gt;10&lt;&#x2F;code&gt;, затем там что-то модифицировать, а затем просимулировать обратно.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;По этим автоматам информации в сети настолько мало, что я не смог найти симуляцию Critters. Поэтому пришлось писать программу самому.&lt;&#x2F;p&gt;
&lt;p&gt;Быстренько накидал программку и выложил на &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;critters&quot;&gt;github:critters&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Так эволюционируют криттерсы при обычной симуляции вперёд из рисунка hi.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;hi_forward_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;А вот эволюция рисунка hi в обратную сторону.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;hi_backward.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Сверху показано текущее состояние поля. Снизу показано как будет выглядеть поле, если его симулировать до &lt;code&gt;0&lt;&#x2F;code&gt; шага. Сначала происходит симуляция до &lt;code&gt;95&lt;&#x2F;code&gt; шага. Видно, что поле снизу остаётся неизменным. Но, затем я начинаю менять поле в настоящем, удаляя белые точки в некоторых местах. Видно, что от удаления одного глайдера или пары пикселей сразу сильно меняется прошлое. Причём эффект взрывной, ломается целая конструкция.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;to_zero.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Здесь показано как выглядят правила преобразования с википедии, и как они записаны у меня в программе. Массив для обратной симуляции вычисляется из этого. Вообще любая перестановка этого массива тоже является обратимым клеточным автоматом, наверное среди всех этих перестановок можно найти что-то интереснее.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-one&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;838&quot;
    height=&quot;682&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;016feabbd7f5b4e400.webp&quot; 
    onclick=&quot;full_screen(&#x27;rules.jpg&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;rules.jpg&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;jpg&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Пример одной из перестановок, данного массива.&lt;&#x2F;p&gt;
&lt;video class=&quot;img-one&quot; autoplay loop muted inline&gt;
  &lt;source src=&quot;other_rules.gif_web.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
  Your browser is not supporting video.
&lt;&#x2F;video&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Я сделал этот автомат на зацикленном поле, следовательно количество состояний конечно, и ограничено &lt;code&gt;2^(WxH)&lt;&#x2F;code&gt;. А учитывая что у любого состояния всегда существует один потомок и один предок, любое состояние через какое-то количество шагов обязательно вернётся в самого себя. Таким же образом можно объяснить почему при применении одной и той же комбинации для Кубика Рубика, он всегда вернётся в изначальное состояние, через определённое число шагов. Таким же образом, если наш мир является конечным обратимым автоматом, то через определённое число больших взрывов и схлопываний он полностью повторит сам себя (напоминает одну серию в Футураме :) ).&lt;&#x2F;p&gt;
&lt;p&gt;Ещё этот автомат не может потерять информацию, потому что он должен быть обратимым. Что это значит можно объяснить на примере: допустим, вы захотели сделать на этом конечном автомате устройство для умножения двух чисел. Тогда такое устройство должно уметь симулироваться обратно, а значит оно должно уметь получать для одного числа два других, которые при умножении дали это число. Но самого числа будет недостаточно, нужна будет ещё мета-информация или &amp;quot;мусор&amp;quot;, чтобы вернуться в изначальное состояние. Скорее всего этот &amp;quot;мусор&amp;quot; будет кучей глайдеров, которые вышли из устройства умножения в процессе. Так что взломать RSA не получится)) Кстати, существуют обратимые языки программирования! Пример: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Janus_%28time-reversible_computing_programming_language%29&quot;&gt;Janus&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;В &amp;quot;Игре Жизнь&amp;quot; при создании устройства умножения никаких глайдеров не вылетает, всё работает очень чисто, и после умножения устройство может вернуться в изначальное состояние. Это потому что данный автомат теряет информацию. &lt;&#x2F;p&gt;
&lt;p&gt;А наш мир можно симулировать в обратную сторону? Я слышал, что согласно классической механике, да. Насчёт квантовых эффектов уже не уверен. Кстати, в физике существует такая проблема как &lt;a href=&quot;https:&#x2F;&#x2F;ru.wikipedia.org&#x2F;wiki&#x2F;%D0%98%D1%81%D1%87%D0%B5%D0%B7%D0%BD%D0%BE%D0%B2%D0%B5%D0%BD%D0%B8%D0%B5_%D0%B8%D0%BD%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D1%86%D0%B8%D0%B8_%D0%B2_%D1%87%D1%91%D1%80%D0%BD%D0%BE%D0%B9_%D0%B4%D1%8B%D1%80%D0%B5&quot;&gt;исчезновение информации в чёрных дырах&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;На гифках видно, что critters выглядит довольно скучно в динамике, не сравнимо с тем как красиво выглядит &amp;quot;игра жизнь&amp;quot;. Возможно правила не очень удачные, но мне кажется главная проблема что critters не может терять информацию, поэтому его эволюция выглядит так скучно, и вообще там толком не происходит эволюции, просто шум шумит, благо хотя бы глайдеры существуют.&lt;&#x2F;p&gt;
&lt;p&gt;Хотя если учесть что наш мир тоже обратим, то он выглядит слишком интересно. Думаю всё дело в том, что с первого взгляда он выглядит как &amp;quot;игра жизнь&amp;quot;, но при более внимательном взгляде весь &amp;quot;мусор&amp;quot;, нужный чтобы симулировать его обратно, хранится в виде тепла и электромагнитного излучения. Причём интересные состояния (атомы) сильно влияют на мир, а неинтересные состояния нужные для сохранения информации (тепло, электромагнитное излучение, фотоны), мало влияют на мир. Видимо надо тоже пытаться проектировать клеточный автомат, который всю скуку будет преобразовывать в слабые состояния, а самое интересное в сильные состояния.&lt;&#x2F;p&gt;
&lt;p&gt;В общем я немного разочарован с этим автоматом, его прошлое не интересно, будущее тоже, видимо надо придумывать более сложный автомат с большим числом состояний у одной клетки, может как-то воспользоваться идеей из прошлого абзаца.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
