<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>optozorax.blog - круги-аполлона</title>
        <link>https://testzorax.github.io/</link>
        <description>Мои програмульки и результаты их работы</description>
        <generator>Zola</generator>
        <language>ru</language>
        <atom:link href="https://testzorax.github.io/tags/krugi-apollona/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Fri, 20 Jul 2018 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Фрактал &#x27;Круги Аполлона&#x27;. Первые эксперименты.</title>
            <pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/apollon-circles/</link>
            <guid>https://testzorax.github.io/p/apollon-circles/</guid>
            <description>&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;dca9f31ca768a44e00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_1.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_1.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Этот фрактал основан на бесконечном построении касающихся окружностей.&lt;&#x2F;p&gt;
&lt;p&gt;Суть этого фрактала заключается в следующем: изначально у нас есть минимальный набор окружностей (три), у которого мы знаем положение центров и радиусы. Далее необходимо строить касательную к каждой из них, и к каждой из образовавшихся, и так до бесконечности, чтобы пространство полностью заполнялось без пересечений окружностей.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;851&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;079e9c99fb32c36500.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_2.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_2.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.4&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Поэтому, для того, чтобы нарисовать при помощи программы такой фрактал, необходимо сначала решить простую задачу:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot;&gt;&lt;code&gt;&lt;span&gt;Как, зная координаты центра и радиус трех окружностей, найти все касательные к ним? 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но для начала &lt;em&gt;свойство двух касательных окружностей:&lt;&#x2F;em&gt; если касание внешнее, то расстояние между центрами окружностей равно сумме их радиусов; если касание внутреннее, то расстояние между центрами равно разности их радиусов, взятое по модулю.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;431&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;8dd0153a3e68544800.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_3.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_3.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.3&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Учитывая, что окружностей три, а каждая может касаться четвертой двумя способами, получаем всего 2³=8 способов как могут касаться три окружности с четвертой, которую надо найти. &lt;&#x2F;p&gt;
&lt;p&gt;Благодаря этому свойству можем составить систему из трех уравнений, где есть три неизвестных. За m&lt;sub&gt;1&lt;&#x2F;sub&gt;, m&lt;sub&gt;2&lt;&#x2F;sub&gt;, m&lt;sub&gt;3&lt;&#x2F;sub&gt; я обозначил параметры - внешнее или внутреннее касание для конкретной окружности: +1 означает внешнее касание, -1 внутреннее (рисунок 4).&lt;&#x2F;p&gt;
&lt;p&gt;Благодаря этому свойству можем составить систему из трех уравнений, где есть три неизвестных. За m&lt;sub&gt;1&lt;&#x2F;sub&gt;, m&lt;sub&gt;2&lt;&#x2F;sub&gt;, m&lt;sub&gt;3&lt;&#x2F;sub&gt; я обозначил параметры - внешнее или внутреннее касание для конкретной окружности: +1 означает внешнее касание, -1 внутреннее.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;785&quot;
    height=&quot;210&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;317ad607fcc4b81100.webp&quot; 
    onclick=&quot;full_screen(&#x27;formulas.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;formulas.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Такую систему уравнений надо как-то решить. Поначалу она может показаться страшной, и на самом деле так и есть :) И проще её решить аналитически, чем при помощи всяких численных методов. Но это аналитическое решение не способна выдать ни одна система символьных вычислений, а если может, то ей не хватит памяти, либо формула выходит километровой, и ее невозможно использовать в программе (если вы найдете такую программу, которая сможет решить эту систему, и там не будет километровой формулы, то я скинусь вам на шаурму). Поэтому единственный доступный способ - решать на бумажке, делая огромное число замен.&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;312&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;3601259840ca2db000.webp&quot; 
    onclick=&quot;full_screen(&#x27;apollon_4.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_4.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×2.1&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Пример решения системы уравнений для различных m&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!-- TODO сделать надпись выше привязанной к картинке --&gt;
&lt;p&gt;Я не буду здесь приводить решение, потому что это слишком сложно: я ещё в школе пытался решить эту систему, но так и не смог; лишь после двух курсов в университете, мои мозги достаточно подготовились, чтобы решить ее до конца. Если захотите повторить мой подвиг, то вот вам подсказка: делайте больше замен, заменяя некоторые части на новые переменные.&lt;&#x2F;p&gt;
&lt;p&gt;Одна очень важная деталь, которую я выяснил насчет решения: оно численно неустойчиво даже для вещественных чисел двойной точности (это при том, что там вычисляются только формулы!), поэтому я использовал библиотеку для длинной арифметики &lt;code&gt;boost::multiprecision::cpp_bin_float&lt;&#x2F;code&gt;, где задал размер вещественного числа в 40 байт (320 бит).&lt;&#x2F;p&gt;
&lt;p&gt;Далее, имея функцию нахождения касательных окружностей к трем данным, можно легко написать функцию, которая из изначального набора строит весь фрактал. В этой функции будет использоваться рекурсия, а так же там надо учесть, чтобы не возникали окружности, которые уже рисовались.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом получается первая картинка.&lt;&#x2F;p&gt;
&lt;p&gt;Ну а на следующей картинке показаны первые эксперименты: внутрь всех окружностей была вписана изначальная окружность. &lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;7d7a9c8b0d6e1ee400.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_5.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_5.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.2&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;А на следующей картинке такой процесс повторялся до бесконечности (причем, чтобы выглядело красиво, цвет более глубоких итераций ставился на более блёклый).&lt;&#x2F;p&gt;
&lt;div class=&quot;magnifier-container img-two-three&quot;&gt;
&lt;img
    class=&quot;not-default full-screen-img&quot;
    width=&quot;853&quot;
    height=&quot;853&quot;
    src=&quot;&amp;#x2F;processed_images&amp;#x2F;48adcc45418acfbb00.jpg&quot; 
    onclick=&quot;full_screen(&#x27;apollon_6.png&#x27;)&quot;
    onauxclick=&quot;full_screen_new_page(&#x27;apollon_6.png&#x27;)&quot;&gt;
&lt;div class=&quot;magnifier-display&quot;&gt;
&lt;img class=&quot;magnifier&quot; src=&quot;&#x2F;ico&#x2F;magnifier.svg&quot;&gt;&lt;div class=&quot;magnifier-info&quot;&gt;×1.8&lt;br&gt;png&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Далее планируется переписать код, чтобы он стабильно работал для всех случаев, когда может происходить деление на ноль; вообще создать целую библиотеку вычислений касательных окружностей для разных случаев; создание различных анимаций; создание кругов Аполлона со случайными характеристиками на всех уровнях.&lt;&#x2F;p&gt;
&lt;p&gt;Если у вас появятся идеи того, что ещё можно натворить с кругами Аполлона — предлагайте их в комментариях.&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
