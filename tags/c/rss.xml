<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>optozorax.blog - c++</title>
        <link>https://testzorax.github.io/</link>
        <description>Мои програмульки и результаты их работы</description>
        <generator>Zola</generator>
        <language>ru</language>
        <atom:link href="https://testzorax.github.io/tags/c/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 30 Jan 2019 00:00:00 +0000</lastBuildDate>
        <item>
            <title>Применения std::function</title>
            <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
            <link>https://testzorax.github.io/p/std-function/</link>
            <guid>https://testzorax.github.io/p/std-function/</guid>
            <description>&lt;h1 id=&quot;stat-ia-ob-ispol-zovanii-std-function&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#stat-ia-ob-ispol-zovanii-std-function&quot;&gt;#&lt;&#x2F;a&gt;Статья об использовании std::function&lt;&#x2F;h1&gt;
&lt;p&gt;Поводом для написания данной статьи стало желание систематизировать всё то, чему я научился в процессе кодинга лаб по таким предметам, как &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;numerical_methods&quot;&gt;Численные методы&lt;&#x2F;a&gt;; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&quot;&gt;Уравнения математической физики&lt;&#x2F;a&gt;; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&quot;&gt;Методы оптимизации&lt;&#x2F;a&gt;. Надеюсь эта статья будет полезна не только людям, которые учатся в НГТУ на факультете ФПМИ, но и широкому кругу читателей.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;vvedenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#vvedenie&quot;&gt;#&lt;&#x2F;a&gt;Введение&lt;&#x2F;h1&gt;
&lt;p&gt;В Си&#x2F;C++ имеется возможность передавать функцию в качестве аргумента функции как указатель на функцию. Вы наверняка знаете этот страшный синтаксис:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;operation)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Начиная с C++11 появился удобный интерфейс для описания функциональных объектов под названием &lt;code&gt;std::function&lt;&#x2F;code&gt;, он имеет более красивый синтаксис:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; c = 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Причём, в отличие от Си, в C++ таким образом можно описывать любой функциональный объект, то есть объект, допускающий вызов операции &lt;code&gt;()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Adder
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;operator()&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; state;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Adder add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;(add); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; d = 4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Аналогичным образом можно использовать &lt;a href=&quot;https:&#x2F;&#x2F;habr.com&#x2F;ru&#x2F;post&#x2F;66021&#x2F;&quot;&gt;лямбды&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;call_operation&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; state &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span&gt;}); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; e = 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Таким образом, можно передавать функции в качестве аргументов функций.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;chislennoe-vychislenie-proizvodnoi&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#chislennoe-vychislenie-proizvodnoi&quot;&gt;#&lt;&#x2F;a&gt;Численное вычисление производной&lt;&#x2F;h1&gt;
&lt;p&gt;Пусть у нас имеется некоторая функция &lt;code&gt;f&lt;&#x2F;code&gt;, которая получает &lt;code&gt;double&lt;&#x2F;code&gt; и возвращает &lt;code&gt;double&lt;&#x2F;code&gt;. Тогда можно численно вычислить производную этой функции следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;derivative_f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;h;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но писать для каждой функции другую функцию, вычисляющую её производную непрактично! Поэтому такую проблему можно решить с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.0001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;h;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Данная функция получает функцию, и возвращает функцию, которая считает её производную. Пример использования:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; df &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;derivative&lt;&#x2F;span&gt;&lt;span&gt;(f);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; a == 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;df&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; a == 2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;А далее представлен код для вычисления первой и второй производных функций, взятый из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L283&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;, смело используйте его в своих проектах.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_1d_t&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_1d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; h);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_1d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span&gt; h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0.001&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;h) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h))&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;h);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Может показаться, что если уменьшить величину &lt;code&gt;0.001&lt;&#x2F;code&gt;, то точность повысится, но это не так, на практике у меня точность только падала, а при этом значении уже очень хорошо расчитывается производная.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;primer-ispol-zovaniia-std-bind&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#primer-ispol-zovaniia-std-bind&quot;&gt;#&lt;&#x2F;a&gt;Пример использования &lt;code&gt;std::bind&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Окей, у нас существует функция для расчета производной одномерной функции, но что если у нас функция принимает два аргумента, например &lt;code&gt;f(x, y)&lt;&#x2F;code&gt;. Как посчитать её производную по одному параметру? &lt;&#x2F;p&gt;
&lt;p&gt;На помощь приходит &lt;code&gt;std::bind&lt;&#x2F;code&gt; - функция, которая получает функцию, список аргументов и возвращает другую функцию. И лучше увидеть пример, чтобы понять как он работает:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;y;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Производная f по x при y=0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, std::placeholders::_1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; Производная f по y при x=0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, std::placeholders::_1));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fx_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; fx_value = 2; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fy_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; fy_value = 3;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Где &lt;code&gt;std::placeholders::_1&lt;&#x2F;code&gt; показывает первый параметр внешней функции, которую возвратит &lt;code&gt;std::bind&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;К сожалению в этом случае функция &lt;code&gt;fx&lt;&#x2F;code&gt; получается функцией одной переменной, при фиксированном &lt;code&gt;y=0&lt;&#x2F;code&gt;. Чтобы получить функцию &lt;code&gt;fx&lt;&#x2F;code&gt;, которая принимает два параметра, но при этом возвращает производную по &lt;code&gt;x&lt;&#x2F;code&gt;, можно воспользоваться следующим трюком:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; fx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;[] (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, std::placeholders::_1, y))(x);
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fx_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fx&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; df(1, 0)&#x2F;dx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Наверное можно было бы его улучшить, чтобы не копипастить эти строки, и придумать новый &lt;code&gt;std::bind2&lt;&#x2F;code&gt;, при помощи шаблонной магии C++, но я такое не умею. Если вы сможете это сделать, обязательно pull-request&#x27;ните сюда!&lt;&#x2F;p&gt;
&lt;p&gt;Или другой пример:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std::placeholders;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, _2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, _1);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; fv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; gv == fv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;avtomaticheskii-raschet-pravoi-chasti&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#avtomaticheskii-raschet-pravoi-chasti&quot;&gt;#&lt;&#x2F;a&gt;Автоматический расчет правой части&lt;&#x2F;h1&gt;
&lt;p&gt;В таком предмете, как УМФ требуется решить следующее дифференциальное уравнение: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;-div(lambda * grad u) + gamma * u + sigma * du&#x2F;dt = f&lt;&#x2F;code&gt;, &lt;&#x2F;p&gt;
&lt;p&gt;где &lt;code&gt;u = u(x, y, t)&lt;&#x2F;code&gt; является неизвестной функцией. Для численного решения используется Метод Конечных Элементов.&lt;&#x2F;p&gt;
&lt;p&gt;Для декартовых координат это уравнение раскладывается в &lt;code&gt;lambda*(d^2 u&#x2F;dx^2 + d^2 u&#x2F;dy^2)  + gamma * u + sigma * du&#x2F;dt = f&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Для тестирования программы-решателя мы придумываем некоторую функцию &lt;code&gt;u&lt;&#x2F;code&gt;, например: &lt;code&gt;u = x*x + y*y + t&lt;&#x2F;code&gt;, придумываем значения констант &lt;code&gt;lambda&lt;&#x2F;code&gt;, &lt;code&gt;gamma&lt;&#x2F;code&gt;, &lt;code&gt;sigma&lt;&#x2F;code&gt;, и согласно верхнему уравнению можно вычислить функцию &lt;code&gt;f&lt;&#x2F;code&gt;, при которой дифференциальное уравнение превращается в тождество.&lt;&#x2F;p&gt;
&lt;p&gt;Для того, чтобы тестировать нашу программу на широком спектре функций, можно написать функцию, которая будет автоматически рассчитывать эту правую часть на основе вышеописанных функций для вычисления производных:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_3d_t&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;** Все константы решаемого уравнения. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;constants_t
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; lambda; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент внутри div
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gamma;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент при u
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; sigma;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F;&#x2F; Коэффициент при du&#x2F;dt
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;function_3d_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_right_part&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; constants_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; cs
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; f = -div(lambda * grad u) + gamma * u + sigma * du&#x2F;dt
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; t) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; placeholders;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; ut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_first_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, x, y, _1));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; uxx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, _1, y, t));
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; uyy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_second_derivative&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(u, x, _1, t));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return -&lt;&#x2F;span&gt;&lt;span&gt;cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;uxx&lt;&#x2F;span&gt;&lt;span&gt;(x) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;uyy&lt;&#x2F;span&gt;&lt;span&gt;(y)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;gamma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;(x, y, t) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;sigma &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ut&lt;&#x2F;span&gt;&lt;span&gt;(t);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят опять же из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L304&quot;&gt;репозитория по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Таким образом, мы получаем функцию &lt;code&gt;f&lt;&#x2F;code&gt; на основе известной нам функции &lt;code&gt;u&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Это избавляет от лишней рутины ручного вычисления производных для функций при тестировании, автоматизируя этот процесс, также снижается вероятность ошибиться.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;obertka-dlia-podscheta-vyzovov-funktsii&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#obertka-dlia-podscheta-vyzovov-funktsii&quot;&gt;#&lt;&#x2F;a&gt;Обертка для подсчета вызовов функции&lt;&#x2F;h1&gt;
&lt;p&gt;Например, нам надо протестировать какой-то метод, находящий минимум заданной функции &lt;code&gt;f&lt;&#x2F;code&gt;. Надо узнать насколько он хороший путем определения сколько раз ему потребовалось обратиться к функции &lt;code&gt;f&lt;&#x2F;code&gt;, потому что обычно самой дорогой операцией считается именно вызов функции &lt;code&gt;f&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Это можно сделать не вмешиваясь в код этого метода, явным образом выставляя &lt;code&gt;count++&lt;&#x2F;code&gt; при каждом вызове функции, послав вместо функции обёртку над ней:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;setFunctionToCountCalls&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;where) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;[where, f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; v) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;where)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(v);
&lt;&#x2F;span&gt;&lt;span&gt;	};
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; fCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b3933a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;optimize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;setFunctionToCountCalls&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;fCount&lt;&#x2F;span&gt;&lt;span&gt;, f), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Взято из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;methods.cpp#L268&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;zamer-vremeni&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zamer-vremeni&quot;&gt;#&lt;&#x2F;a&gt;Замер времени&lt;&#x2F;h1&gt;
&lt;p&gt;У нас стоит задача замерить время работы какого-то кода. Можно поступить следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;chrono&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; chrono;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; main code
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; duration_cast&amp;lt;microseconds&amp;gt;(end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; start).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но это решение плохо тем, что нам постоянно надо копировать эти участки кода, и мы потенциально можем потерять начало или конец замера времени, поэтому можно воспользоваться концепцией RAII, и сделать это следующим красивым образом, передав в функцию замера времени лямбду кода, время которого будет замеряться:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;chrono&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;** Считает время выполнения функции f в микросекундах. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;inline double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_time_microseconds&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std::chrono;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;high_resolution_clock::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;duration_cast&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;microseconds&amp;gt;(end &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; start).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;();;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_time_microseconds&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;](){
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; main code
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Притом мы не теряем локальные переменные благодаря использованию лямбд.&lt;&#x2F;p&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;lib.h#L24&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;dvoinoi-integral&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#dvoinoi-integral&quot;&gt;#&lt;&#x2F;a&gt;Двойной интеграл&lt;&#x2F;h1&gt;
&lt;p&gt;Предположим, что у нас есть функция вычисления интеграла одномерной функции:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;lt;functional&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;function_1d_t&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; n - количество внутренных узлов
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_1d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; f
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Тогда двойной интеграл двумерной функции можно вычислить следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;nx&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ay&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;by&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;ny&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_2d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; f
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(ax, bx, nx, [ay, by, ny, f](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; x)-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;calc_integral_gauss3&lt;&#x2F;span&gt;&lt;span&gt;(ay, by, ny, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;(f, x, _1));
&lt;&#x2F;span&gt;&lt;span&gt;	});
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.cpp#L269&quot;&gt;курсовой по УМФ&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;funktsii-testirovaniia&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#funktsii-testirovaniia&quot;&gt;#&lt;&#x2F;a&gt;Функции тестирования&lt;&#x2F;h1&gt;
&lt;p&gt;Представим, у нас есть множество методов, решающих одну задачу, но каждый по-разному, при этом интерфейс у них одинаковый. И стоит задача протестировать их все единым образом, построить таблицы. Это тоже можно красиво сделать с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;, написать прототип функции метода:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;MethodResult(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;method5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;makeTableForMethod&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;method&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;	
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&amp;lt;pair&amp;lt;Method, string&amp;gt;&amp;gt; methodsToTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	{method1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table1.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},	
&lt;&#x2F;span&gt;&lt;span&gt;	{method2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table2.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table3.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method4, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table4.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;	{method5, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d07711;&quot;&gt;&amp;quot;table5.txt&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;},
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; methodsToTest)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;makeTableForMethod&lt;&#x2F;span&gt;&lt;span&gt;(i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* Method args. *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Некоторые люди делают это с помощью копипаста, но думаю не стоит вам объяснять чем плох копипаст по сравнению с этим подходом.&lt;&#x2F;p&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;make_tables.cpp#L9&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;odnomernyi-poisk&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#odnomernyi-poisk&quot;&gt;#&lt;&#x2F;a&gt;Одномерный поиск&lt;&#x2F;h1&gt;
&lt;p&gt;В МО многомерные методы нахождения минимума функции используют одномерную функцию оптимизации. И было задание задавать различные методы одномерной оптимизации, чтобы протестировать их эффективность конкретно в этой среде. Ну раз так, то мы не будем в программе жестко задавать функцию одномерной оптимизации, а будем передавать её как аргумент функции многомерной оптимизации:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OneDimensionFunction&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator2&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;oneDimensionOptimizator4&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimensionFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;eps&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;typedef&lt;&#x2F;span&gt;&lt;span&gt; std::function&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;multiDimenshionOptimize1&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;argmin&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; eps
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;MethodResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;multiDimenshionOptimize2&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; OneDimenshionExtremumFinder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;argmin&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;x0&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; eps
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Код взят из &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;optimization_methods&#x2F;blob&#x2F;feb65cda80b43145a58ada90b6de7c5ae8e777a4&#x2F;2&#x2F;methods.h#L18&quot;&gt;2 лабораторной по МО&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;pattern-listener&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#pattern-listener&quot;&gt;#&lt;&#x2F;a&gt;Паттерн listener&lt;&#x2F;h1&gt;
&lt;p&gt;Иногда бывает так, что вам нужно выводить информацию о внутреннем состоянии метода, например, вы решаете задачу оптимизации, и вам надо на каждой итерации выводить текущее решение, значение градиента функции в этой точке итд, чтобы строить таблицу. Вместо того, чтобы делать это явно, можно передавать в функцию метода функцию &lt;code&gt;listener&lt;&#x2F;code&gt;, которая будет получать всё внутреннее состояние метода, и уже у себя внутри решать что с этим делать.&lt;&#x2F;p&gt;
&lt;p&gt;В одном случае она может выводить это на экран, в другом случае - в файл, а в третьем, когда нужная максимальная производительность - ничего не делать с этой информацией.&lt;&#x2F;p&gt;
&lt;p&gt;На самом деле я не использовал это на практике, а пример этого паттерна взял из библиотеки &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;differential-evolution&#x2F;blob&#x2F;9cfefc0b36ed3bf4ca6c37d786244d56c0b3b2ba&#x2F;de_test&#x2F;tutorial.cpp#L71&quot;&gt;дифференциальной эволюции&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Там же можно увидеть &lt;strong&gt;паттерн termination strategy&lt;&#x2F;strong&gt;, при помощи которого можно передавать в метод функцию, которая будет решать когда завершать метод. Но в рамках нашей учебной программы это излишная абстракция, и различные стратегии завершения метода никогда не применятся.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;inkapsuliruem-s-pomoshch-iu-std-function&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#inkapsuliruem-s-pomoshch-iu-std-function&quot;&gt;#&lt;&#x2F;a&gt;Инкапсулируем с помощью &lt;code&gt;std::function&lt;&#x2F;code&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;В УМФ у нас есть задача получить конечно-элементную аппроксимацию функции на основе правой части дифференциального уравнения и сетки конечных элементов. Учитывая эту информацию, решатель МКЭ может выглядеть следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; grid
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Возвращается вектор, потому что мы находим только аппроксимацию весов &lt;code&gt;q&lt;&#x2F;code&gt;, именно они и возвращаются в методе.&lt;&#x2F;p&gt;
&lt;p&gt;Но при решении МКЭ мы не можем игнорировать ту вещь, что нам нужно выставлять краевые условия. Краевые условия - это известные нам значения функции на краях области. Не имея краевых значений, невозможно решить задачу, она просто не сойдется.&lt;&#x2F;p&gt;
&lt;p&gt;Поэтому мы должны каким-то образом внутри функции решения дифференциального уравнения выставлять краевые условия.&lt;&#x2F;p&gt;
&lt;p&gt;В нашем курсе УМФ мы не решаем реальные задачи, а лишь исследуем насколько хорошо метод справляется с известными нам функциями &lt;code&gt;u&lt;&#x2F;code&gt;, поэтому может появиться соблазн написать следующим образом:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; true_function_u
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; doing smth
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; выставляем краевые условия с помощью функции u по краям области
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; делаем что-то дальше
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Но это ужасный стиль! Зачем нам находить значение функции при помощи численных методов, которую мы уже знаем? Это выглядит как бред, поэтому более красивым может быть передавать &lt;strong&gt;функцию, которая выставляет краевые условия&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#f5f5f5;color:#1f1f1f;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;vector_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c23f31;&quot;&gt;solve_differential_equation&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; function_3d_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; grid_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#668f14;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; boundary_setter_function_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#72ab00;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; set_boundary_conditions
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; doing smth
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#5597d6;&quot;&gt;set_boundary_conditions&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;* ... *&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#7f8989;&quot;&gt;&#x2F;&#x2F; делаем что-то дальше
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Это очень красивое решение, которое может быть применено при решении реальных задач, если мы реально не знаем истинную функцию, но знаем значения краевых условий. Это значительно повышает абстрактность кода, позволяет его использовать в других проектах.&lt;&#x2F;p&gt;
&lt;p&gt;Так как вы можете использовать это на практике, более подробно смотрите код из курсовой по УМФ:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L146&quot;&gt;Прототип функции выставления краевых условий.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L149&quot;&gt;Сама функция выставления краевых условий на основе известной нам функции u.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;fem.h#L159&quot;&gt;Функция решения МКЭ.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;optozorax&#x2F;labs_emf&#x2F;blob&#x2F;60b62fb5746aa83e3c52a802d5da1741950b6292&#x2F;coursework&#x2F;main.cpp#L32&quot;&gt;Пример использования.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;zakliuchenie&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#zakliuchenie&quot;&gt;#&lt;&#x2F;a&gt;Заключение&lt;&#x2F;h1&gt;
&lt;p&gt;Было показано каким образом &lt;code&gt;std::function&lt;&#x2F;code&gt; позволит вам избавиться от лишнего копипаста и инкапсулировать код и данные и в принципе сделать код намного более абстрактным и красивым. Если вы придумали ещё одно интересное применение &lt;code&gt;std::function&lt;&#x2F;code&gt;, то пишите в комментариях!&lt;&#x2F;p&gt;
</description>
        </item>
    </channel>
</rss>
